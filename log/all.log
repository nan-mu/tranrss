2024-03-11T22:51:03.790741951+08:00 - start
2024-03-11T22:51:03.790805679+08:00 - 访问 https://rustcc.cn/rss 开始
2024-03-11T22:51:03.790880447+08:00 - 访问 https://rustmagazine.org/feed.xml 开始
2024-03-11T22:51:03.790920640+08:00 - 访问 https://readrust.net/all/feed.rss 开始
2024-03-11T22:51:03.853250978+08:00 - starting new connection: https://readrust.net/
2024-03-11T22:51:03.853332749+08:00 - proxy(http://127.0.0.1:15777) intercepts 'https://readrust.net/'
2024-03-11T22:51:03.856562466+08:00 - starting new connection: https://rustmagazine.org/
2024-03-11T22:51:03.856599384+08:00 - proxy(http://127.0.0.1:15777) intercepts 'https://rustmagazine.org/'
2024-03-11T22:51:03.857512588+08:00 - starting new connection: https://rustcc.cn/
2024-03-11T22:51:03.857547577+08:00 - proxy(http://127.0.0.1:15777) intercepts 'https://rustcc.cn/'
2024-03-11T22:51:08.294393003+08:00 - RSS2
2024-03-11T22:51:08.294433450+08:00 - 文章标题：【Rust日报】2024-03-11 crates.io: 下载变化
2024-03-11T22:51:08.294465503+08:00 - 文章内容：<h1>GreptimeDB: 基于 Rust 的时序数据库0.7版本发布</h1>
<p>基于 Rust 的时序数据库 GreptimeDB 发布了 0.7 版本。新版本实现了针对云原生监控场景优化的 Metrics Engine，在逻辑上支持 Prometheus 的单值数据模型的同时，底层采用更紧凑的存储大幅提升性能和降低成本。Greptime 团队将在本周四进行线上直播介绍新版本的功能并进行演示，欢迎关注。</p>
<p><img src="https://picx.zhimg.com/80/v2-94e644990a8cba68de09db61ffb1051e_720w.jpeg" alt="img"></p>
<p><a href="https://greptime.com/blogs/2024-03-07-greptimedb-v0.7" rel="noopener noreferrer">原文链接</a></p>
<h1>crates.io: 下载变化</h1>
<p>随着Rust社区的增长，crates.io的下载和包数量每年增加2-3倍，这种增长带来了一些挑战，其中最重要的挑战之一是所有的下载请求都经过crates.io API，有时会导致规模扩展问题。解决这些问题的方法是从2024年3月12日开始，cargo将直接从静态.crates.io CDN服务器下载crate，而不再通过crates.io API。这一变化不需要对cargo或用户的系统进行任何更改，而是通过修改package index上的config.json文件来实现的。过去几个月，crates.io后端已经进行了一系列改变，包括宣布“非规范”下载的废弃、更改下载计数方式等，以便支持直接从CDN服务器下载。预期这些改变将显著提高下载的可靠性和速度，并将持续监控系统的性能以确保改变的预期效果。同时，也将联系那些不使用config.json文件来构建下载URL的非cargo构建系统的维护人员，确保他们了解这一变化并更新系统以使用新的下载URL。</p>
<p><img src="https://blog.rust-lang.org/images/2024-03-11-crates-io-download-changes/download-graph.png" alt="img"></p>
<p><a href="https://blog.rust-lang.org/2024/03/11/crates-io-download-changes.html" rel="noopener noreferrer">原文链接</a></p>
<h1>cargo-wizard: 自动化配置项目</h1>
<p>cargo-wizard 是一个 Cargo子命令，可以自动化Cargo项目配置，以实现最大运行时性能、最快编译时间或最小二进制大小。尽管Rust的编译时间、运行时性能和二进制大小不断改善，但并非所有优化都会默认应用，用户可能需要使用许多可用的配置选项来启用它们。cargo-wizard可以在几秒钟内将三个预定义模板应用到Cargo工作区，并允许用户自定义模板，显示可用的配置选项。</p>
<p><img src="https://kobzol.github.io/assets/posts/cargo-wizard/wizard-demo.gif" alt="img"></p>
<p><a href="https://kobzol.github.io/rust/cargo/2024/03/10/rust-cargo-wizard.html" rel="noopener noreferrer">原文链接</a></p>
<h1>biscotti: 新的 http cookie 库</h1>
<p>biscotti 是一个新的 http cookie 库, 他的API力求尽可能忠实于HTTP cookies的基本语义，并关注边缘情况和安全性</p>
<p><a href="https://www.lpalmieri.com/posts/biscotti-http-cookies-in-rust/" rel="noopener noreferrer">原文链接</a></p>
<p><a href="https://github.com/LukeMathWalker/biscotti" rel="noopener noreferrer">github地址</a></p>
<h1>structural-convert: 结构转换宏</h1>
<p>当 struct 的结构类似时,可以用于快速创建 <code>From</code>,<code>Into</code>,<code>TryFrom</code>,<code>TryInto</code> 等转换实现</p>
<p>示例代码</p>
<pre><code>#[derive(Debug, PartialEq)]
struct Rhs {
    z: i8,
    x: u32,
}

#[derive(Debug, PartialEq, StructuralConvert)]
#[convert(from(Rhs))]
struct Lhs {
    z: i32,
    x: u32,
}

assert_eq!(Lhs { z: 1, x: 2 }, Rhs { z: 1, x: 2 }.into());
assert_eq!(Lhs { z: 1, x: 2 }, Rhs { z: 1, x: 2 }.into());
</code></pre>
<p><a href="https://github.com/voidpumpkin/structural-convert/" rel="noopener noreferrer">github 地址</a></p>
<p>--</p>
<p>From 日报小组 BobQ, FBI小白</p>
<p>社区学习交流平台订阅：</p>
<ul>
<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>
<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>
</ul>
2024-03-11T22:51:08.294491053+08:00 - 文章标题：rawcopy-rs 主要针对复制正在使用而无法复制文件的库
2024-03-11T22:51:08.294529420+08:00 - 文章内容：<h1>rawcopy-rs</h1>
<p>RawCopy crate 提供了使用“卷影技术('Volume Shadow Copy Service' VSS)”在 Rust 中进行文件复制的功能。
主要针对复制因正在使用而无法直接复制的文件。</p>
<p>RawCopy 必须在 Windows 上以管理员权限运行。</p>
<h2>起因</h2>
<p>我想读某些文件,进行解密,但如果软件或系统正在使用则无法读取.<br>
找了一大圈才了解到'Volume Shadow Copy Service'卷影技术, 发现有人包装了go的,c++的倒是一大堆,但从头写我没有那个水平,看了go的<a href="https://github.com/kmahyyg/go-rawcopy" rel="noopener noreferrer">go-rawcopy</a>后我发现它是调用了<a href="https://github.com/velocidex/go-ntfs" rel="noopener noreferrer">go-ntfs</a>的库,索性我就改为去找rust的ntfs库.</p>
<p>发现还是有不少的,有些是调用了C++,最后发现有个<a href="https://github.com/ColinFinck/ntfs" rel="noopener noreferrer">ntfs</a>库不错.尝试运行了它的shell后发现完全满足我的需求.然后就想着不如我也尝试搞个rawcopy的rust的库.</p>
<h2>开始折腾</h2>
<p>起初想着直接看<a href="https://github.com/ColinFinck/ntfs" rel="noopener noreferrer">ntfs</a>的文档开搞,结果发现整不明白参数怎么实例化给出它的要求.又去看了<a href="https://github.com/ColinFinck/ntfs" rel="noopener noreferrer">ntfs</a>的shell代码,然后就是偷过来一部分代码折腾折腾,想着完事了.</p>
<p>折腾完所有的报错,最后发现可以复制我想复制的了.都打算写README了.</p>
<p>想着找个系统文件试试,结果一试报错了,却报在我写的方法里.</p>
<h3>std::path的问题</h3>
<p>以前我就发现path(包括fs)里的很多方法操作路径的时候它默认会去判断文件/路径是否存在,导致报错.<br>
被独占的文件也会报错.<br>
<code>path.canonicalize()</code>规范化路径这个方法报错,我又看了下文档,发现它为了解决软连接的问题会去查看文件,解决<code>a/b/../c</code> 不一定是<code>a/c</code> 的等问题. 但我不能让它去查看文件,它也查看不了,我需要路径的前缀(Component::Prefix).windows中常见的就是<code>\\.\C:</code>这种.我刚想自己拼一下,就想着找找库吧,是有很多规范化路径的库,本质上都是为了解决<code>canonicalize</code>去访问文件的问题.我想都没想就直接用了.<br>
再次遇坑,找来的库也没有处理前缀(Component::Prefix),直接返回了<code>c:\</code>.没办法我就先拼了一下.实际上是不可取的,这样的话就无法复制nt中<code>\</code>下的镜像了.但暂时我不需要,就留着这个坑吧.</p>
<p>关于windows路径的知识:<br>
https://learn.microsoft.com/zh-cn/windows/win32/fileio/naming-a-file?redirectedfrom=MSDN<br>
实际上是可以通过<code>\...</code>去访问设备的,和*unix差不多.</p>
<h2>发布</h2>
<p>写完README又删了点println!,(发布完才发现还有没删的)<br>
没发布过到crates.io上,又看篇文章,终于发布了.</p>
<p>但过了几分钟才发现,README上有我复制别人范例的没改过来...又改,再发布只能提升版本号了<br>
再用<code>cargo yank</code>或直接登录crates.io撤销之前的版本.</p>
<h2>直接使用命令行的方式</h2>
<p>example:</p>
<pre><code>rawcopy.exe "C:\swapfile.sys" d:\tmp
</code></pre>
<h2>引用库的方式</h2>
<p>Cargo.toml中加入:</p>
<pre><code>[dependencies]
rawcopy-rs = "0.1.2"
</code></pre>
<p>代码中直接调用即可,就这么一个方法:</p>
<pre><code>rawcopy_rs::rawcopy(r"C:\swapfile.sys", ".");
</code></pre>
<h2>地址</h2>
<p>rawcopy-rs库: https://crates.io/crates/rawcopy-rs<br>
文档: https://docs.rs/rawcopy-rs/latest/rawcopy_rs<br>
github地址: https://github.com/pkptzx/rawcopy-rs</p>
2024-03-11T22:51:08.294547001+08:00 - 文章标题：【Rust 日报】2024-03-10 Rust新闻/聚合
2024-03-11T22:51:08.294589073+08:00 - 文章内容：<h2>[new library] RTCs</h2>
<p>RTC相关项目：</p>
<ul>
<li>RTC协议：https://github.com/webrtc-rs/rtc</li>
<li>选择转发单元SFU：https://github.com/webrtc-rs/sfu，在WebRTC中，SFU主要用于处理群组通话和直播的媒体服务器。</li>
<li>WebRTC：https://github.com/webrtc-rs/webrtc</li>
</ul>
<p><a href="https://img.gejiba.com/image/EJ0Isq" rel="noopener noreferrer"><img src="https://img.gejiba.com/images/e83920290852e74e89e30c55f37ac486.png" alt="e83920290852e74e89e30c55f37ac486.png"></a></p>
<h2>[new library] mdopen</h2>
<p>在浏览器中快速预览本地 Markdown 文件，具有类似 GitHub 的外观。不使用 GitHub API，而只是在 Rust 中将 markdown 编译为 HTML。</p>
<p>安装使用：</p>
<pre><code>git clone https://github.com/immanelg/mdopen --depth=1
cd mdopen
cargo install --path .

mdopen README.md TODO.md -b firefox
</code></pre>
<p>其他类似项目：</p>
<ul>
<li>https://github.com/swsnr/mdcat</li>
<li>https://github.com/Inlyne-Project/inlyne</li>
</ul>
<p><a href="https://github.com/immanelg/mdopen/" rel="noopener noreferrer">GitHub</a>: https://github.com/immanelg/mdopen/</p>
<h2>[new library] complexipy</h2>
<p>一个计算 Python 文件认知复杂性的库。</p>
<pre><code>def a_decorator(a, b):
    def inner(func):
        return func
    return inner

def b_decorator(a, b):
    def inner(func):
        if func:
            return None
        return func
    return inner
</code></pre>
<p>对上面的Python方法，输出结果如下：</p>
<pre><code>───────────────────────────── 🐙 complexipy 0.3.0 ──────────────────────────────
                                    Summary
      ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━┓
      ┃ Path              ┃ File              ┃ Function    ┃ Complexity ┃
      ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━━━┩
      │ test_decorator.py │ test_decorator.py │ a_decorator │ 0          │
      ├───────────────────┼───────────────────┼─────────────┼────────────┤
      │ test_decorator.py │ test_decorator.py │ b_decorator │ 1          │
      └───────────────────┴───────────────────┴─────────────┴────────────┘
🧠 Total Cognitive Complexity in ./tests/src/test_decorator.py: 1
1 file analyzed in 0.0032 seconds
────────────────────────── 🎉 Analysis completed! 🎉 ───────────────────────────
</code></pre>
<blockquote>
<p>小编注：非常不错的一个项目。</p>
</blockquote>
<p><a href="https://github.com/rohaquinlop/complexipy" rel="noopener noreferrer">GitHub</a>: https://github.com/rohaquinlop/complexipy</p>
<h2>[resource] rust book</h2>
<p>一份Rust的书籍清单，涉及方方面面。不过貌似都是亚马逊的链接。</p>
<p><a href="https://rustworkshop.co/2023/06/18/rust-programming-books/" rel="noopener noreferrer">链接</a>: https://rustworkshop.co/2023/06/18/rust-programming-books/</p>
<hr>
<p>From 日报小组 长琴</p>
<p>社区学习交流平台订阅：</p>
<ul>
<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc 论坛：支持 rss</a></li>
<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust 语言中文社区</a></li>
</ul>
2024-03-11T22:51:08.294604701+08:00 - 文章标题：GPUI和zed在win10上报错
2024-03-11T22:51:08.294618182+08:00 - 文章内容：<p>听说zed和gpui已经在windows和Linux上跑起来了，git了一个试试。
Ubuntu上还好。
可以跑，就是openai账户咱没有。</p>
<p>但是一台和老婆合用的win10家庭中文版19045.4046上遇到问题：</p>
<p>error: process didn't exit successfully: <code>target\debug\Zed.exe</code> (exit code: 0xc0000139, STATUS_ENTRYPOINT_NOT_FOUND)
或者说  无法定位程序输入点 DCompostionWaitForCompositionClock于动态链接库。。。。zed.exe上。</p>
<p>gpui的hello world也是同样问题。</p>
<p>哪位高手能给个指导意见吗？
用的是vs 2022 community版。</p>
2024-03-11T22:51:08.294628477+08:00 - 文章标题：【Rust日报】2024-03-09 Dust DDS 发布 v0.8.0
2024-03-11T22:51:08.294650832+08:00 - 文章内容：<h3>Dust DDS 发布 v0.8.0</h3>
<p>Dust DDS 是 Rust 实现的数据分发服务 (DDS) 中间件。新版本的改动包括：</p>
<ul>
<li>添加异步 API</li>
<li>更新 DDS API，删除 DdsResult 中不返回 ReturnCode 的方法</li>
<li>为 DDS 类型添加枚举支持</li>
<li>添加缺少的 API 文档</li>
<li>将 IDL 生成器更新至 IDL v4.2</li>
</ul>
<p>更多信息查看 GitHub，https://github.com/s2e-systems/dust-dds/releases/tag/v0.8.0</p>
<h3>OstFS，FUSE 文件系统</h3>
<p>OstFS 是 Rust 实现的“玩具” FUSE 文件系统，支持零成本快照和克隆。</p>
<blockquote>
<p>开发者：OstFS 是一个玩具 —— 我制作它只是为了学习一些很酷的概念； 如果您正在寻找实际的文件系统，ZFS 是您的朋友！</p>
</blockquote>
<p>GitHub 链接，https://github.com/Patryk27/ostfs</p>
<h3>Rolldown，JS 捆绑器</h3>
<p>TL;DR</p>
<p>Rolldown 是用 Rust 实现的 JS 捆绑器，旨在作为 Vite 中未来使用的捆绑器。它提供与 Rollup 兼容的 API 和插件接口，但在范围上与 esbuild 更相似。</p>
<p>更多信息参见官网，https://rolldown.rs/</p>
<hr>
<p>From 日报小组 <a href="https://github.com/lesterli" rel="noopener noreferrer">洋芋</a></p>
<p>社区学习交流平台订阅：</p>
<ul>
<li><a href="https://rust.cc" rel="noopener noreferrer">Rust.cc论坛: 支持rss</a></li>
<li><a href="https://rust.cc/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言学习交流</a></li>
</ul>
2024-03-11T22:51:08.294665940+08:00 - 文章标题：Ferroc 内存分配器：现已发布第一个预发布正式版
2024-03-11T22:51:08.294936879+08:00 - 文章内容：<p>Ferroc v1.0.0-pre.1 现已在<a href="https://crates.io/crates/ferroc/1.0.0-pre.1" rel="noopener noreferrer">crates.io</a>上发布。期待大家的使用和反馈来持续改进，最终完备地发布第一个正式版。</p>
<h2>主要的功能和实现改动</h2>
<ul>
<li>减小了<code>allocate_*</code>系列函数接口的<code>Result</code>大小，与之相应的具体<code>Error</code>类型将不能够再直接获得（变为<code>core::alloc::AllocError</code>），转而可以通过开启新增的<code>error-log</code>功能来记录错误日志；</li>
<li>TLS变量转而使用专门的<a href="https://docs.rs/ferroc/1.0.0-pre.1/ferroc/heap/struct.ThreadLocal.html" rel="noopener noreferrer">缓存结构体</a>，可以在新旧线程交替时复用，减小TLS对应内存的重复分配；</li>
<li>各种代码生成上的优化，比如尾调用、冷热路径分离等等；</li>
<li>暂时移除了数据统计和大于10MB对齐的内存块分配的支持，会在未来的版本中重新加入；</li>
<li>增加了C/C++的使用支持。</li>
</ul>
<h2>TLS缓存介绍</h2>
<p><code>ferroc::heap::ThreadLocal</code>是高度灵活的TLS缓存，用户可以选择手动或自动管理其中缓存的生命周期。其内部使用了指数增长的内存分配策略，并直接通过<code>BaseAlloc</code>分配空间给线程本地的<code>Context</code>和<code>Heap</code>。</p>
<h3>自动管理缓存生命周期</h3>
<p>通过<code>ferroc::heap::ThreadData</code>可以直接从<code>ThreadLocal</code>获得一块自动管理生命周期的线程本地缓存。该缓存可以被分配在栈上（以作为临时的上下文），或者存储在实际的TLS变量中。</p>
<p>栈上使用示例：</p>
<pre><code>#![feature(allocator_api)]

use core::pin::pin;
use ferroc::{
    arena::Arenas,
    base::Mmap,
    heap::{ThreadLocal, ThreadData}
};

let arenas = Arenas::new(Mmap);
let thread_local = pin!(ThreadLocal::new(&amp;arenas));
let thread_data = ThreadData::new(thread_local.as_ref());

let mut vec = Vec::with_capacity_in(5, &amp;thread_data);
vec.extend([1, 2, 3, 4, 5]);
assert_eq!(vec.iter().sum::&lt;i32&gt;(), 15);
</code></pre>
<p>存储于TLS的使用示例：</p>
<pre><code>static ARENAS: Arenas&lt;Mmap&gt; = Arenas::new(Mmap);
static THREAD_LOCAL: ThreadLocal&lt;Mmap&gt; = ThreadLocal::new(&amp;ARENAS);

thread_local! {
    static THREAD_DATA: ThreadData&lt;'static, 'static, Mmap&gt;
       = ThreadData::new(Pin::static_ref(&amp;THREAD_LOCAL));
}

THREAD_DATA.with(|td| {
    let mut vec = Vec::with_capacity_in(5, td);
    vec.extend([1, 2, 3, 4, 5]);
    assert_eq!(vec.iter().sum::&lt;i32&gt;(), 15);
})
</code></pre>
<p>然而，由于Rust本身TLS变量的存储和销毁并用到了堆内存，因此直接将<code>THREAD_DATA</code>包装成单元结构体来做全局分配器将会造成递归爆栈。这时候，自动管理生命周期的方式已经不再有效。</p>
<p>手动管理生命周期则依靠<code>ThreadLocal</code>直接提供的成员方法<code>assign</code>、<code>get</code>和<code>put</code>。其中后二者为<code>unsafe</code>。以下给出两种手动管理的示例，可以根据需要选用（示例中<code>register_thread_dtor</code>是手动注册TLS析构器的函数，提供者有pthread，可查阅相关文档）：</p>
<ol>
<li>存储线程唯一的缓存ID：</li>
</ol>
<pre><code>static ARENAS: Arenas&lt;Mmap&gt; = Arenas::new(Mmap);
static THREAD_LOCAL: ThreadLocal&lt;Mmap&gt; = ThreadLocal::new(&amp;ARENAS);

#[thread_local]
static ID: Cell&lt;Option&lt;NonZeroU64&gt;&gt; = Cell::new(None);

fn with_heap&lt;T&gt;(f: impl FnOnce(&amp;Heap) -&gt; T) -&gt; T {
    f(Pin::get_ref(match ID.get() {
        Some(id) =&gt; unsafe { Pin::static_ref(&amp;THREAD_LOCALS).get(id) },
        None =&gt; {
            let (heap, id) = Pin::static_ref(&amp;THREAD_LOCALS).assign();
            ID.set(id);
            unsafe { register_thread_dtor(id, || Pin::static_ref(&amp;THREAD_LOCALS).put(id)) };
            heap
        }
    }))
}
</code></pre>
<ol start="2">
<li>直接存储线程本地堆的引用：</li>
</ol>
<pre><code>#[thread_local]
static HEAP: Cell&lt;Pin&lt;&amp;Heap&gt;&gt; = Cell::new(THREAD_LOCALS.empty_heap());

fn with_heap&lt;T&gt;(f: impl FnOnce(&amp;Heap) -&gt; T) -&gt; T {
    f(&amp;HEAP.get())
}

fn with_heap_fallback&lt;T, F&gt;(f: F) -&gt; T
where
    F: for&lt;'a&gt; FnOnce(&amp;'a Heap&lt;'static, 'static&gt;, fn() -&gt; &amp;'a Heap&lt;'static, 'static&gt;) -&gt; T,
{
    fn fallback&lt;'a&gt;() -&gt; &amp;'a Heap&lt;'static, 'static&gt; {
        let (heap, id) = Pin::static_ref(&amp;THREAD_LOCALS).assign();
        HEAP.set(heap);
        unsafe { register_thread_dtor(id, || Pin::static_ref(&amp;THREAD_LOCALS).put(id)) };
        Pin::get_ref(heap)
    }
    f(Pin::get_ref(HEAP.get()), fallback)
}
</code></pre>
<p>其中，前者的优势是简单；而后者的优势则是优化代码路径——<code>deallocate</code>不需要当前的<code>Heap</code>初始化，而<code>allocate</code>可能才需要。后者的fallback可以作为一个参数传入新加入的<code>Heap::allocate_with</code>成员函数用来提供当前堆未初始化时的替代，用来优化代码路径。</p>
<p>最后，当然还是直接使用<code>ferroc::config!</code>，或者直接使用默认的<code>ferroc::Ferroc</code>最为方便：</p>
<pre><code>// 内部默认使用了`ferroc::heap::ThreadLocal`。
ferroc::config!(pub Custom =&gt; ferroc::base::Mmap; pthread);
</code></pre>
<h2>C/C++用户使用示例</h2>
<ol>
<li>下载Rust工具链：</li>
</ol>
<pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs |\
    sh -- -y --toolchain nightly --profile minimal -c rust-src
</code></pre>
<ol start="2">
<li><code>cmake</code> 然后 <code>make</code>来自动化生成：</li>
</ol>
<pre><code>mkdir target &amp;&amp; cd target # 注意不要改成build等其他目录
cmake .. &amp;&amp; make
</code></pre>
<p>生成的文件有（相对路径）：<code>target/libferroc.so</code>、<code>target/libferroc.a</code>和<code>ferroc.h</code></p>
<ol start="3">
<li>安装动态库、静态库和头文件到本地:</li>
</ol>
<pre><code>sudo make install
</code></pre>
<p>CMake的通用配置选项比如<code>-DCMAKE_BUILD_TYPE</code>、<code>--install-prefix</code>等均支持。
并且有其他的自定义选项（<code>cmake -D</code>）：</p>
<ul>
<li><code>FE_TRACK_VALGRIND</code>: 使用valgrind追踪内存UB；</li>
<li><code>FE_FINER_GRAINED</code>: 提升内存效率，但是可能会导致使用SIMD的程序发生内存对齐错误；</li>
<li><code>FE_PGO_GATHER</code>: 启用 PGO (Profile-Guided Optimization) 的数据收集（至项目目录下<code>target/pgo</code>）。</li>
<li><code>FE_PGO_USE</code>: 使用PGO的数据优化生成目标（需要与Rust工具链版本匹配的<code>llvm-profdata</code>，可在第一步安装Rust工具链时在命令尾部增加<code>llvm-tools</code>来顺带安装）。</li>
</ul>
<h2>基准测试结果更新</h2>
<p>时间消耗：</p>
<p><img src="https://raw.githubusercontent.com/js2xxx/ferroc/v1.0.0-pre.1/assets/time1.png" alt="Time #1"></p>
<p><img src="https://raw.githubusercontent.com/js2xxx/ferroc/v1.0.0-pre.1/assets/time2.png" alt="Time #2"></p>
<p>内存消耗：</p>
<p><img src="https://raw.githubusercontent.com/js2xxx/ferroc/v1.0.0-pre.1/assets/memory1.png" alt="Memory #1"></p>
<p><img src="https://raw.githubusercontent.com/js2xxx/ferroc/v1.0.0-pre.1/assets/memory2.png" alt="Memory #2"></p>
<p>欢迎大家试用并提供反馈！</p>
2024-03-11T22:51:08.294961794+08:00 - 文章标题：想问一下，真实项目中多大概率会遇到rust一些高级的东西？
2024-03-11T22:51:08.294974481+08:00 - 文章内容：<p>比如死灵书里面比较难理解的，drop check，协变，Higher-Rank Trait Bounds这些。</p>
<p>再比如死灵书中实现Vec，一开始就要考虑 &amp;Vec&lt;&amp;'static str&gt; couldn't be used where a &amp;Vec&lt;&amp;'a str&gt; was expected. 大家在写rust的时候，会在设计时就想到这些限制吗，我应该是完全想不到，不知道要怎样才能对这些高阶内容胸有成竹</p>
2024-03-11T22:51:08.294984852+08:00 - 文章标题：萌新做了一个游戏的imgui内置修改器
2024-03-11T22:51:08.294996637+08:00 - 文章内容：<p>符文工房3</p>
<p>https://github.com/vSylva/rune_factory_3_trainer</p>
<p>crate用的是hudhook和minhook</p>
<p>hudhook包含了imgui和dx11的hook</p>
<p>效果蛮可</p>
2024-03-11T22:51:08.295006957+08:00 - 文章标题：【Rust日报】2024-03-07
2024-03-11T22:51:08.295046719+08:00 - 文章内容：<h3>Ascent：在 Rust 中嵌入的逻辑编程语言</h3>
<p>开发者 s-arash 发布了 Ascent，一种嵌入在 Rust 中的逻辑编程语言。Ascent 类似于 Datalog，通过宏的形式在 Rust 中嵌入，为开发者提供了简洁而强大的逻辑编程解决方案。</p>
<p>Ascent 使开发者能够轻松解决图论、路径计算等问题，例如计算图中的连接节点、寻找最短路径等。</p>
<pre><code>use ascent::ascent;

ascent! {
    // 定义两个关系：边和路径
    relation edge(i32, i32);
    relation path(i32, i32);

    // 定义路径的规则：如果有边连接两个节点，则它们之间存在路径
    path(x, y) &lt;-- edge(x, y);
    // 定义路径的规则：如果有边连接节点 x 和节点 y，并且存在路径从节点 y 到节点 z，则存在路径从节点 x 到节点 z
    path(x, z) &lt;-- edge(x, y), path(y, z);
}

fn main() {
    let mut prog = AscentProgram::default();
    // 设置边的关系数据
    prog.edge = vec![(1, 2), (2, 3)];
    // 执行逻辑编程操作
    prog.run();
    // 打印路径的结果: path: [(1, 2), (2, 3), (1, 3)]
    println!("path: {:?}", prog.path);
}
</code></pre>
<p><a href="https://github.com/s-arash/ascent" rel="noopener noreferrer">GitHub</a>: <a href="https://github.com/s-arash/ascent" rel="noopener noreferrer">https://github.com/s-arash/ascent</a></p>
<p><a href="https://s-arash.github.io/ascent/" rel="noopener noreferrer">Blog</a>: <a href="https://s-arash.github.io/ascent/" rel="noopener noreferrer">https://s-arash.github.io/ascent/</a></p>
<h3>Rust 周报第 537 期</h3>
<p>本周 Rust 周报发布。</p>
<p>详见 <a href="https://this-week-in-rust.org/blog/2024/03/06/this-week-in-rust-537/" rel="noopener noreferrer">This Week in Rust 537</a>: <a href="https://this-week-in-rust.org/blog/2024/03/06/this-week-in-rust-537/" rel="noopener noreferrer">https://this-week-in-rust.org/blog/2024/03/06/this-week-in-rust-537/</a>。</p>
<p>以上就是本期的主要内容。Rust 生态正在蓬勃发展,相信会带来更多惊喜。</p>
<p>请关注我们的更新，以便了解更多有关 Rust 的新闻和动态！</p>
<p>From 日报小组 Cupnfish &amp; GPT</p>
<p>社区学习交流平台订阅：</p>
<ul>
<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rust.cc 论坛: 支持 rss</a></li>
<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust 语言中文社区</a></li>
</ul>
2024-03-11T22:51:08.295061691+08:00 - 文章标题：【Rust日报】2024-03-06 Rust 版本的 PickleDB
2024-03-11T22:51:08.295127380+08:00 - 文章内容：<h2>Rust 版本的 PickleDB</h2>
<p>PickleDB 是一个用 Rust 编写的轻量级且简单的键值存储，很大程度上受到 Python PickleDB 的启发。PickleDB 有趣且易于使用</p>
<h3>PickleDB 使用</h3>
<pre><code>use pickledb::{PickleDb, PickleDbDumpPolicy, SerializationMethod};

fn main() {

    // create a new DB with AutoDump (meaning every change is written to the file)
    // and with Json serialization (meaning DB will be dumped to file as a Json object)
    let mut db = PickleDb::new("example.db", PickleDbDumpPolicy::AutoDump, SerializationMethod::Json);

    // set the value 100 to the key 'key1'
    db.set("key1", &amp;100).unwrap();

    // print the value of key1
    println!("The value of key1 is: {}", db.get::&lt;i32&gt;("key1").unwrap());

    // load the DB from the same file
    let db2 = PickleDb::load("example.db", PickleDbDumpPolicy::DumpUponRequest, SerializationMethod::Json).unwrap();

    // print the value of key1
    println!("The value of key1 as loaded from file is: {}", db2.get::&lt;i32&gt;("key1").unwrap());
}
</code></pre>
<h3>安装</h3>
<pre><code>[dependencies]
pickledb = "0.5.1"
</code></pre>
<h3>例子</h3>
<p>目前 PickleDB 附带了两个示例：</p>
<ul>
<li><a href="https://github.com/seladb/pickledb-rs/tree/master/examples/hello_world" rel="noopener noreferrer">Hello World</a>，展示了 PickleDB 的基本用法：创建新的数据库、从文件加载数据库、获取/设置不同类型的键值对等等；</li>
<li><a href="https://github.com/seladb/pickledb-rs/tree/master/examples/lists" rel="noopener noreferrer">List</a>展示了如何在 PickleDB 中使用列表：创建新列表、从列表中添加/删除项目、从列表中检索项目、删除列表等。</li>
</ul>
<hr>
<ul>
<li>https://github.com/seladb/pickledb-rs</li>
</ul>
<h2>使用 Tokio 实现不完整的 Redis 客户端和服务器(仅用于学习目的)</h2>
<p>mini-redis是使用Tokio构建的Redis客户端和服务器 的不完整、惯用的实现。该项目的目的是提供编写 Tokio 应用程序的更大示例。</p>
<ul>
<li>免责声明请不要在生产中使用 mini-redis。该项目旨在成为一个学习资源，并省略了 Redis 协议的各个部分，因为实现它们不会引入任何新概念。我们不会添加新功能，因为您的项目需要它们 - 请使用功能齐全的替代方案之一。</li>
</ul>
<h3>为什么选择 Redis</h3>
<p>该项目的主要目标是教授 Tokio。要做到这一点，需要一个具有广泛功能的项目，并注重实现的简单性。Redis 是一种内存数据库，提供广泛的功能并使用简单的有线协议。广泛的功能允许在“现实世界”环境中演示许多 Tokio 模式。</p>
<ul>
<li>Redis 有线协议文档可以在<a href="https://redis.io/topics/protocol/" rel="noopener noreferrer">此处</a>找到；</li>
<li>Redis 提供的命令集可以 在<a href="https://redis.io/docs/reference/protocol-spec/" rel="noopener noreferrer">此处</a>找到。</li>
</ul>
<hr>
<h3>运行</h3>
<p>该存储库提供服务器、客户端库和一些用于与服务器交互的客户端可执行文件。</p>
<p>启动服务器：</p>
<pre><code>RUST_LOG=debug cargo run --bin mini-redis-server
</code></pre>
<p>该 tracing crate 用于提供结构化日志。您可以替换debug为所需的日志级别。然后，在不同的终端窗口中，可以执行各种客户端示例。例如：</p>
<pre><code>cargo run --example hello_world
</code></pre>
<p>此外，还提供 CLI 客户端来从终端运行任意命令。服务器运行时，将进行以下工作：</p>
<pre><code>cargo run --bin mini-redis-cli set foo bar
cargo run --bin mini-redis-cli get foo
</code></pre>
<p>mini-redis 目前支持的命令</p>
<ul>
<li>PING</li>
<li>GET</li>
<li>SET</li>
<li>PUBLISH</li>
<li>SUBSCRIBE</li>
</ul>
<hr>
<ul>
<li>https://github.com/tokio-rs/mini-redis</li>
</ul>
<hr>
<p>From 日报小组 侯盛鑫</p>
<p>社区学习交流平台订阅：</p>
<ul>
<li><a href="https://rustcc.cn/" rel="noopener noreferrer">Rustcc论坛: 支持rss</a></li>
<li><a href="https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62" rel="noopener noreferrer">微信公众号：Rust语言中文社区</a></li>
</ul>
2024-03-11T22:51:08.295144329+08:00 - 文章标题：感谢ChatGPT，救了我狗的命！
2024-03-11T22:51:08.295168529+08:00 - 文章内容：<p>PS 前端后端测试，深圳武汉西安：jinshuju.net/f/o38ijj</p>
<p>前一段时间，国外一位小哥哥在推特上发布了一条消息，声称GPT-4拯救了自家狗狗的性命。
这是怎么一回事呢？</p>
<p>这个小哥哥养了一只两岁的边境牧羊犬，这只牧羊犬被诊断出患有蜱传疾病，这属于一种细菌性传染病。
虽然小哥哥一直带着狗狗积极治疗，但是狗狗的病情仍然在加重，出现了严重的贫血。对于狗狗病情，兽医一时也找不到真正的原因，尝试了许多治疗方法都没能得到缓解。
小哥哥眼看着可爱的狗狗一天一天衰弱下去，预计不久就要回归汪星了，感到很无力。
就在这时候，OpenAI的新版本大模型GPT-4刚刚发布，小哥哥抱着试一试的心态，把小狗的病情现状，以及各种详细的检查和诊断数据输入给ChatGPT，并且请AI给出诊断意见。</p>
<p>ChatGPT分析了这些数据，非常智能地罗列出了一些对病因的猜测。</p>
<p>在AI所列出的狗病原因列表中，GPT-4表示，免疫介导性溶血性贫血(IMHA)最符合小狗当前的症状。
这一结论点醒了男主，他火速联系上兽医，兽医也果断采取针对性的治疗。因为这一次的对症下药，狗狗的病情很快康复了。</p>
<p>在GPT-4给出正确分析，拯救了自己小狗之后，小哥哥感慨万千，于是有了前面推特上的那一番话。
看到这条新闻，小灰也感到很欣慰。有很多人总是视AI如洪水猛兽，觉得某一天AI强大起来，会取代我们的工作，甚至会颠覆人类社会。</p>
<p>其实，AI在更多的情况下是我们的好朋友，好帮手，而非我们的敌人。我相信，未来的AI不但可以拯救狗命，也会拯救更多人类的生命。我们的世界，会因为AI而变得更美好。​</p>
2024-03-11T22:51:08.295184580+08:00 - 文章标题：DELETED
2024-03-11T22:51:08.295194090+08:00 - 文章内容：
2024-03-11T22:51:08.295204136+08:00 - 文章标题：Lightning Network Development Recruitment
2024-03-11T22:51:08.295225628+08:00 - 文章内容：<p>responsibilities</p>
<p>As an Open Source RGB/Lightning Developer, you will be a part of the team that contributes to the development of the RGB protocol for assets on top of Bitcoin and the Lightning Network, aimed at building a new ecosystem of Bitcoin based decentralized financial applications. This includes:</p>
<ul>
<li>Contributing to improve and evolve the code functional to the RGB protocol.</li>
<li>Development and maintenance of libraries to facilitate RGB integration for wallet developers.</li>
<li>Development and maintenance of an RGB compatible Bitcoin wallet.</li>
<li>Development and maintenance of Lightning Network and DEX compatible applications.
requirements</li>
<li>Knowledgeable about Bitcoin, Lightning Network and related applications.</li>
<li>Knowledgeable about Rust, Docker and Linux
Work experience: Rust &gt; 2 years, able to provide personal github address.</li>
</ul>
<p>Salary：4000-7000USD/month
Telegram:@C89043</p>
2024-03-11T22:51:08.295236313+08:00 - 文章标题：Rust登陆【华为鸿蒙】操作系统之Native模块开发
2024-03-11T22:51:08.295587861+08:00 - 文章内容：<h1><code>Rust</code>登陆【华为鸿蒙】操作系统之<code>Native</code>模块开发</h1>
<h2>名词解释</h2>
<ul>
<li>【鸿蒙操作系统】的英文全名是<code>Open Harmony Operation System</code>。正文将以其首字母缩写词<code>ohos</code>引用该词条。</li>
<li>【鸿蒙软件开发工具包】的英文全名是<code>Open Harmony Software Development Kit</code>。正文也将以它的首字母缩写词<code>ohsdk</code>引用该词条。</li>
<li><code>DevEco Studio IDE</code>是【华为】为鸿蒙应用程序开发免费提供的集成开发环境。它的最新稳定版内置了<code>ohsdk 3.1.0 (API v9)</code>。</li>
<li>【<code>Native</code>模块】是指由遵循了<code>ArkTs NAPI</code>接口规范的<code>C/Cpp/Rust</code>程序经交叉编译输出的链接库<code>.so</code>文件。</li>
</ul>
<h2>前言</h2>
<p>到写文章时止，虽然华为技术团队既未将<code>rustup</code>工具链无缝集成入<code>DevEco Studio IDE</code>也未提供<code>ArkTs + Rust</code>的“一站式”混合编程体验，但<code>Rust</code>登陆<code>ohos</code>依旧势不可挡，因为相较于<code>Rust</code>带来的生产效率收益（参照<code>c / cpp</code>），搭建交叉编译环境的人工成本真的微不足道。甚至，求助于【操作系统镜像】或<code>Docker</code>技术，@Rustacean 还能避免这类重复性劳动的再次发生。</p>
<p>为了填补<code>DevEco Studio IDE</code>与<code>rustup</code>工具链之间的“窄沟”，仅有两步操作需被执行：</p>
<ol>
<li>搭建面向<code>ohos</code>的交叉编译环境。
<ul>
<li>限于作者<code>dev box</code>是<code>Windows 11</code>，所以本篇文章仅分享从<code>Windows</code>至<code>ohos</code>的交叉编译环境搭建心得。</li>
</ul>
</li>
<li>将交叉编译输出的<code>.so</code>文件注入<code>DevEco Studio</code>工作流。</li>
</ol>
<h2>搭建<code>Windows</code>  ➞ <code>ohos</code>交叉编译环境</h2>
<p>鉴于华为硬件产品的三款主流<code>CPU</code>架构，@Rustacean 需同时准备三套交叉编译方案，分别是：</p>
<ul>
<li>面向<code>64</code>位<code>ARM CPU</code>的<code>aarch64-unknown-linux-ohos</code>方案。</li>
<li>面向<code>32</code>位<code>ARM CPU</code>的<code>armv7-unknown-linux-ohos</code>方案。</li>
<li>面向<code>64</code>位<code>AMD / Intel CPU</code>的<code>x86_64-unknown-linux-ohos</code>方案。</li>
</ul>
<p>前两套方案是为【真机】设备提供动态链接库/<code>Native</code>模块；而后一套方案则是服务于手机模拟器（虚拟机）的。</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/5efb6ea0-5f89-42d1-8654-bf9ee712e84e" alt="image"></p>
<p>上表中<code>Triple</code>的信息描述格式统一是：</p>
<pre><code>&lt;CPU架构&gt;&lt;CPU子架构&gt;-&lt;厂商&gt;-&lt;操作系统&gt;-&lt;应用程序二进制接口格式&gt;
</code></pre>
<p>于是，<code>armv7-unknown-linux-ohos</code>应被读作</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/accaeb68-59f6-4409-90f4-a6826250fdfe" alt="image"></p>
<p>【厂商】栏的<code>unkown</code>是<code>Mozilla</code>公司的“锅”，而不是我定的。就我本意，这一栏馁馁的是汉语拼音<code>HuaWei</code>。</p>
<p>下面上干货了...</p>
<h3>第一步，给<code>ohsdk</code>补装<code>native</code>组件</h3>
<p><code>DevEco Studio IDE</code>的内置<code>ohsdk</code>位于<code>%LocalAppData%\Huawei\Sdk\openharmony\&lt;API 版本号&gt;</code>目录下，但其初始安装却缺失了<code>native</code>组件（— 可能是因为这个模块太大了，超过<code>2GB</code>）。所以，@Rustacean 需要</p>
<ol>
<li>补装<code>native</code>组件</li>
<li>记住<code>ohsdk</code>对应的【<code>API</code>版本号】，因为后续配置得用。</li>
</ol>
<h4>具体步骤</h4>
<ol>
<li>
<p>打开<code>DevEco Studio IDE</code></p>
</li>
<li>
<p>若出现的是【欢迎界面】，就从菜单<code>Configure</code> ➞ <code>Settings</code>，打开<code>Settings</code>对话框</p>
</li>
<li>
<p>若出现的是【工程界面】，就从菜单<code>File</code> ➞ <code>Settings</code>，打开<code>Settings</code>对话框</p>
</li>
<li>
<p>从对话框左侧选择<code>SDK</code>；从右侧查看<code>Platform</code>选项卡下面的内容</p>
</li>
<li>
<p>寻找并记忆被勾选的【<code>SDK</code>版本号 (<code>API</code>版本号)】。比如，下图中的<code>3.1.0 (API 9)</code>。</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/97a34762-1dd0-49d2-b7bf-3b3ee4179611" alt="image"></p>
</li>
<li>
<p>勾选<code>native</code>复选框</p>
</li>
<li>
<p>点击<code>OK</code>按钮</p>
</li>
<li>
<p>等待<code>native</code>组件安装完成 — 耐心点儿，等待时间可不短</p>
</li>
</ol>
<p>待上述操作都正常完成之后，便可见如下所示的新目录结构</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/e7cb9374-fb99-4302-87ef-5dcc37764226" alt="image"></p>
<h3>第二步，重新编译<code>Rust</code>标准库</h3>
<p>之所以把事情搞这么大是因为<code>Mozilla</code>厂方并没有为<code>ohos</code>提供<strong>预编译</strong>的【标准库】二进制文件。于是，尽管<code>ohos</code>已被纳入了<code>rustc</code>交叉编译支持清单（请见下图）</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/b9759f8e-74ed-4c01-816d-18b1485123b5" alt="image"></p>
<p>，但直接执行交叉编译指令</p>
<pre><code>cargo build --release --target=aarch64-unknown-linux-ohos
</code></pre>
<p>还是会遭遇失败和看到<code>E0463</code>号错误</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/46f21f43-13f0-40de-85f5-b562e27c5fc7" alt="image"></p>
<h4>技术方案选型</h4>
<p>编译【标准库】源码有两条技术路径</p>
<ol>
<li>
<p>重新编译整条<code>rustup</code>工具链，捎带着也就编译出【标准库】了 — 难！我没搞定</p>
</li>
<li>
<p>将【标准库】作为<strong>普通</strong>依赖<code>crate</code>和<code>Cargo (Lib) Package</code>工程的业务代码一起编译（— 注：这个解释并不精确，因为细究起来<strong>主</strong><code>crate</code>与<strong>依赖</strong><code>crates</code>是搅和在一起的各自独立编译，而不是绝对意义上的“一锅烩”）。下图中被红框圈定的<code>crates</code>就都出自于【标准库】</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/88cfafee-2836-40b4-a82b-c566a174cb84" alt="image"></p>
</li>
</ol>
<p>我选择了<strong>第二条</strong>技术路线。虽然后一条技术路线拖长了程序编译的总用时，但它仅会影响<strong>首次</strong>编译操作。从那以后，借助<a href="https://github.com/mozilla/sccache?tab=readme-ov-file#sccache---shared-compilation-cache" rel="noopener noreferrer">sccache</a>编译缓存技术，由【标准库】引入的额外延时几乎可以忽略不计。更重要的是，该技术路线不会阻塞 @Rustacean 对<code>rustup</code>工具链的后续升级。咱们随时都可以<code>rustup update</code>。</p>
<h4>采用【方案二】的准备工作与先决条件</h4>
<ol>
<li>
<p>给<code>rustup</code>工具链，补装【标准库】源码（即，<code>rust-src</code>组件）。</p>
<p>从命令行，立即执行且仅执行一次：</p>
<pre><code>rustup component add rust-src
</code></pre>
</li>
<li>
<p>启用<code>nigtly</code>工具链，因为工具链的<code>stable</code>版本还尚不支持“裹挟【标准库】共同编译”的新功能。</p>
<p>从命令行，立即执行且仅执行一次：</p>
<pre><code>rustup default nightly
</code></pre>
</li>
<li>
<p>采用<code>ohsdk</code>内置的<code>llvm - clang</code>作为<code>rustc</code>链接器（下一节将详细介绍）</p>
</li>
<li>
<p>向交叉编译指令添加新命令行参数<code>-Zbuild-std</code>。</p>
<ol>
<li>
<p><code>cargo</code>会透传该参数给<code>rustc</code>并指示编译器不是寻找现成的【标准库】链接文件而是<strong>现场</strong>编译【标准库】源码。</p>
</li>
<li>
<p>编译指令也将变为</p>
<pre><code>cargo +nightly build -Zbuild-std --release --target=aarch64-unknown-linux-ohos
</code></pre>
</li>
</ol>
</li>
</ol>
<h4>如何把<code>ohsdk</code>内置的<code>llvm - clang</code>作为<code>rustc</code>链接器</h4>
<p><strong>第一步</strong>，回忆之前记下的【鸿蒙<code>API</code>版本号】数字和新建环境变量<code>OHOS_API_V</code>。【推荐】从<code>Cargo</code>全局配置文件<code>%UserProfile%\.cargo\config.toml</code>新建<code>OHOS_API_V</code>环境变量，因为</p>
<ul>
<li>一方面，这可最小化对系统环境的“污染” — 该变量仅对<code>Rust</code>交叉编译有用，没有必要系统级全局可见。</li>
<li>另一方面，它随时可被【会话级】<strong>同名</strong>环境变量短暂复写，方便以后临时变更做试验。</li>
</ul>
<p>打开<code>%UserProfile%\.cargo\config.toml</code>配置文件和添加配置表</p>
<pre><code>[env]
OHOS_API_V = "9"
</code></pre>
<p>【注意】伴随今后<code>ohsdk</code>的<strong>自动</strong>升级，该环境变量的值须被同步地<strong>手动</strong>更新，以避免编译失败。</p>
<p><strong>第二步</strong>，将<code>ohsdk</code>目录下的<code>LLVM</code>前端编译器<code>llvm\bin\clang.exe</code>包装为<code>rustc</code>的【<strong>鸿蒙</strong>链接器】。敲黑板，重点来了！@Rustacean 需分别构建<strong>三个</strong>链接器，以服务<strong>三套</strong>交叉编译方案，和向华为的<strong>三类</strong>硬件设备提供<code>.so</code>文件。于是，有</p>
<ul>
<li>
<p>【链接器1】面向<code>64</code>位<code>ARM CPU</code><strong>真机</strong>的<code>aarch64-unknown-linux-ohos</code>交叉编译方案。在<code>%UserProfile%</code>目录下，新建<code>cmd</code>文件<code>aarch64-unknown-linux-ohos-clang.cmd</code>，并添加如下代码</p>
<pre><code>%LocalAppData%\Huawei\Sdk\openharmony\%OHOS_API_V%\native\llvm\bin\clang.exe ^
-target aarch64-linux-ohos ^
--sysroot=%LocalAppData%\Huawei\Sdk\openharmony\%OHOS_API_V%\native\sysroot ^
-D__MUSL__ %*
</code></pre>
</li>
<li>
<p>【链接器2】面向<code>32</code>位<code>ARM CPU</code><strong>真机</strong>的<code>armv7-unknown-linux-ohos</code>交叉编译方案。在<code>%UserProfile%</code>目录下，新建<code>cmd</code>文件<code>armv7-unknown-linux-ohos-clang.cmd</code>，并添加如下代码</p>
<pre><code>%LocalAppData%\Huawei\Sdk\openharmony\%OHOS_API_V%\native\llvm\bin\clang.exe ^
-target arm-linux-ohos ^
--sysroot=%LocalAppData%\Huawei\Sdk\openharmony\%OHOS_API_V%\native\sysroot ^
-D__MUSL__ ^
-march=armv7-a ^
-mfloat-abi=softfp ^
-mtune=generic-armv7-a ^
-mthumb %*
</code></pre>
</li>
<li>
<p>【链接器3】面向<code>64</code>位<code>AMD / Intel CPU</code><strong>模拟器</strong>的<code>x86_64-unknown-linux-ohos</code>交叉编译方案。在<code>%UserProfile%</code>目录下，新建<code>cmd</code>文件<code>x86_64-unknown-linux-ohos-clang.cmd</code>，并添加如下代码</p>
<pre><code>%LocalAppData%\Huawei\Sdk\openharmony\%OHOS_API_V%\native\llvm\bin\clang.exe ^
-target x86_64-linux-ohos ^
--sysroot=%LocalAppData%\Huawei\Sdk\openharmony\%OHOS_API_V%\native\sysroot ^
-D__MUSL__ %*
</code></pre>
</li>
</ul>
<p><strong>第三步</strong>，全局且有条件地向<code>rustc</code>装配【鸿蒙链接器】。其中，</p>
<ul>
<li>【全局】意味着修改<code>Cargo</code>全局配置文件<code>%UserProfile%\.cargo\config.toml</code>和作用于所有<code>Cargo Package</code>工程。</li>
<li>【有条件】意味着采用<strong>条件编译</strong>语法<code>target.&lt;triple&gt;.linker</code>限定该【链接器】仅生效于面向<code>ohos</code>的交叉编译操作。</li>
</ul>
<p>具体作法，打开<code>%UserProfile%\.cargo\config.toml</code>配置文件和添加配置表</p>
<pre><code>[target.aarch64-unknown-linux-ohos]
linker = "./aarch64-unknown-linux-ohos-clang.cmd"
[target.armv7-unknown-linux-ohos]
linker = "./armv7-unknown-linux-ohos-clang.cmd"
[target.x86_64-unknown-linux-ohos]
linker = "./x86_64-unknown-linux-ohos-clang.cmd"
[profile.dev.package.compiler_builtins]
opt-level = 2
</code></pre>
<p>再对前面配置片段补充两点解释：</p>
<ol>
<li>配置项<code>linker</code>以<strong>相对</strong>路径引用链接器文件的背后逻辑是<code>cargo</code>总是以<code>config.toml</code>的<strong>父文件夹</strong>（.cargo）<strong>所处目录</strong>为起点开始解析<strong>相对</strong>路径（，而不是以<code>config.toml</code>的同级目录为起点）。所以，本例中的<code>./</code>路径前缀对应的就是登录账号的根目录<code>%UserProfile%</code>。</li>
<li>配置项<code>opt-level</code>，借助【<code>Profile</code>重写（i.e. Override）】配置表头<code>[profile.dev.package.compiler_builtins]</code>，仅将【开发编译】模式下【标准库】内<code>compiler_builtins crate</code>的代码优化级别强制锚定于<code>2</code>。否则，<code>cargo build -Zbuild-std --target=aarch64-unknown-linux-ohos</code>指令（注意：没有<code>--release</code>参数）会概率性地失败于<code>exit code: 0xc0000005, STATUS_ACCESS_VIOLATION</code>错误。</li>
</ol>
<p><strong>第四步</strong>，给冗长的交叉编译指令约定（短）别名。</p>
<p>还是打开<code>%UserProfile%\.cargo\config.toml</code>配置文件和增补如下配置表</p>
<pre><code>[alias]
ohos-build = ["build", "-Zbuild-std", "--target=aarch64-unknown-linux-ohos", "--target=armv7-unknown-linux-ohos", "--target=x86_64-unknown-linux-ohos"]
</code></pre>
<p>于是，只要执行<strong>一条</strong><code>cargo ohos-build</code>指令就相当于连续执行下面<strong>三条</strong>编译指令：</p>
<ol>
<li><code>cargo build -Zbuild-std --target=aarch64-unknown-linux-ohos</code></li>
<li><code>cargo build -Zbuild-std --target=armv7-unknown-linux-ohos</code></li>
<li><code>cargo build -Zbuild-std --target=x86_64-unknown-linux-ohos</code></li>
</ol>
<h3>总结交叉编译环境的搭建成果</h3>
<p>以后每次在<code>Cargo (Lib) Package</code>工程根目录下执行</p>
<pre><code>cargo ohos-build --release
</code></pre>
<p>，编译器都会立即</p>
<ol>
<li>唤起<code>ohsdk</code>内置的<code>LLVM</code>前端编译器<code>llvm - clang</code>作为<code>rustc</code>链接器</li>
<li>将【标准库】源码作为<strong>普通</strong>依赖<code>crate</code>与<strong>主</strong><code>crate</code>业务程序一起编译</li>
<li>并行启动三个<code>JOB</code>进程对同一套<code>Rust</code>源码同时执行三组交叉编译操作</li>
<li>交叉编译输出三个<strong>文件名相同</strong>但 <strong><code>ABI</code>格式不同</strong>的动态链接库<code>.so</code>文件</li>
</ol>
<h3>新建<code>Cargo (Library) Package</code>工程，验证交叉编译环境</h3>
<p>首先，克隆<a href="https://github.com/stuartZhang/socket2" rel="noopener noreferrer">stuartZhang/socket2</a>至本地，并将代码分支切至<code>v0.4.x</code>。</p>
<pre><code>git clone git@github.com:stuartZhang/socket2.git
cd socket2
git checkout -q v0.4.x
</code></pre>
<p>关于这一步操作的必要性，我已经详细地阐述于<a href="https://github.com/stuartZhang/node-bindgen?tab=readme-ov-file#ohos-node-bindgen%E8%BF%98%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8" rel="noopener noreferrer">ohos-node-bindgen还不能被直接使用</a>章节了。简单地讲，这是为了绕过<a href="https://crates.io/crates/socket2" rel="noopener noreferrer">socket2 crate</a>对华为鸿蒙操作系统的<strong>不兼容</strong>缺陷。</p>
<p>然后，从命令行，新建<code>Cargo (Library) Package</code>工程</p>
<pre><code>cd ..
cargo new --lib calculator
code calculator
</code></pre>
<p>其次，在<code>VSCode</code>内，打开<code>Cargo.toml</code>文件，和追加如下内容</p>
<pre><code>[lib]
crate-type = ["cdylib"]

[dependencies]
ohos-node-bindgen = "6.0.3"
socket2 = "0.4.10"

[patch.crates-io]
socket2 = { path = "../socket2" }
</code></pre>
<p>前面配置片段内的【依赖图重写】配置表<code>[patch.crates-io]</code>指示<code>Cargo</code>包管理器使用本地的<code>stuartZhang/socket2 crate</code>山寨货<strong>替换</strong><code>crates.io</code>上的正品，因为正品<strong>不兼容</strong>华为操作系统。</p>
<p>接着，从<code>VSCode</code>打开<code>src/lib.rs</code>文件，和增补如下<code>Demo</code>代码。这是一段简单的整数加运算程序。<strong>请把注意力聚焦在【派生宏】的使用上</strong>。</p>
<pre><code>use ::ohos_node_bindgen::derive::ohos_node_bindgen;
#[ohos_node_bindgen]
fn add(first: i32, second: i32) -&gt; i32 {
    first + second
}
</code></pre>
<p>再次，执行交叉编译</p>
<pre><code>cargo ohos-build --release
</code></pre>
<p>最后，从【资源管理器】查看编译输出结果</p>
<pre><code>Cargo (Library) Package 工程根目录
├── Cargo.toml
├── src — Rust 源码目录
├── target
│  ├── aarch64-unknown-linux-ohos
│  │  └── release
│  │     └── libcalculator.so
│  ├── armv7-unknown-linux-ohos
│  │  └── release
│  │     └── libcalculator.so
│  ├── x86_64-unknown-linux-ohos
│  │  └── release
│  │     └── libcalculator.so
</code></pre>
<p>值得注意的是，编译输出的链接库文件名是<strong>有<code>lib</code>前缀</strong>的。所以，<code>Native</code>模块的文件名是<code>lib&lt;包名&gt;.so</code>，而不是<code>&lt;包名&gt;.so</code>。</p>
<h2>将<code>Native</code>模块注入普通的<code>DevEco Studio</code>工程</h2>
<blockquote>
<p><code>Native</code>模块就是由前面交叉编译输出的<code>ArkTs N-API</code>链接库<code>.so</code>文件。</p>
</blockquote>
<p>首先，从<code>DevEco Studio IDE</code>新建/打开普通<code>Empty Ability</code>工程。</p>
<p>然后，修改<strong>模块级</strong>的<code>build-profile.json5</code>文件（比如，<code>entry/build-profile.json5</code>），和添加如下配置项至<code>buildOption</code>节点</p>
<pre><code>"externalNativeOptions": {
  "abiFilters": [
    "arm64-v8a",
    "armeabi-v7a",
    "x86_64"
  ]
}
</code></pre>
<p>其次，在模块根目录下，创建下面三个子文件夹</p>
<ul>
<li><code>libs/arm64-v8a</code></li>
<li><code>libs/armeabi-v7a</code></li>
<li><code>libs/x86_64</code></li>
</ul>
<p>接着，依次向它们复制入编译好的链接库文件。例如，</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/a003500d-9f39-4855-8cbd-3e60b8d05a08" alt="image"></p>
<p>最后，在<code>ArkTs</code>业务代码内（比如，<code>entry/src/main/ets/pages/Index.ets</code>），以<code>ES Module</code>语法，导入<code>Native</code>模块，和调用其成员方法</p>
<pre><code>import calculator from 'libcalculator.so';
const result = calculator.add(2, 3);
</code></pre>
<p>总的来讲，调用端的<code>ets</code>代码就这么简单！但还是有三处优化可做以改善开发体验：</p>
<h3>优化<code>DevEco Studio</code>工程目录结构</h3>
<p>将<code>Cargo (Lib) Package</code>与<code>DevEco Studio Project</code>合并为一个工程更有利于提高<code>Rust + ArkTs</code>的混合编程生产力。所以，如下<code>DevEco Studio</code>工程目录结构是被强力推荐的：</p>
<pre><code>DevEco Studio 工程根目录
├── entry — 模块根目录
│   ├── libs — 交叉编译输出的 .so 文件都被复制到下面的子文件夹内
│   │   ├── arm64-v8a
│   │   ├── armeabi-v7a
│   │   └── x86_64
│   ├── src
│   │   ├── main
│   │   │  ├── resources
│   │   │  ├── cpp  — *旧有*的 Cpp(ArkTs N-API) 工程目录
│   │   │  ├── ets  — *旧有*的 ArkTs 源码目录
│   │   │  ├── rust — *新建*的 Rust(ArkTs N-API) 工程目录
│   │   │  │   ├── Cargo.toml
│   │   │  │   ├── src — Rust 源码目录
│   │   │  │   ├── target
│   │   │  │   │  ├── aarch64-unknown-linux-ohos
│   │   │  │   │  │  └── release
│   │   │  │   │  ├── armv7-unknown-linux-ohos
│   │   │  │   │  │  └── release
│   │   │  │   │  ├── x86_64-unknown-linux-ohos
│   │   │  │   │  │  └── release
</code></pre>
<p>将<code>Cargo (Lib) Package</code><strong>降级为</strong><code>DevEco Studio Project</code>内某个特定模块下的<strong>子工程</strong>有两个好处：</p>
<ol>
<li>同一个<code>DevEco Studio</code>工程内可同时包含<strong>多个</strong><code>Native</code>子工程。</li>
<li>每个<code>Native</code>子工程既可<strong>独占</strong>一个模块以达成与主模块业务代码<strong>有限隔离</strong>的目的，也能与<code>ets</code>程序“混住”耦合于相同模块内。</li>
</ol>
<h4>友情提示</h4>
<p>在移动<code>Cargo (Lib) Package</code>工程位置后，千万别忘了同步修改<code>Cargo.toml</code>配置文件中【依赖图重写】配置表<code>[patch.crates-io]</code>对本地<code>stuartZhang/socket2 crate</code>的引用路径。否则，会编译失败！</p>
<p>若假设<code>stuartZhang/socket2 crate</code>与<code>DevEco Studio Project</code>处理于平级目录，那么【依赖图重写】配置表应该改为</p>
<pre><code>[patch.crates-io]
socket2 = { path = "../../../../../socket2" }
</code></pre>
<h3>自动化链接库<code>.so</code>文件的复制操作</h3>
<p>在每次执行<code>cargo ohos-build --release</code>指令之后都徒手复制三个<code>.so</code>文件至不同的文件夹是非常低效的，所以 @Rustacean 有必要给<code>Cargo</code>编写<code>build.rs</code>与<code>post_build.rs</code>构建程序，以扩展包管理器在<strong>编译前</strong>与<strong>编译后</strong>的处理行为，并自动完成文件复制操作。其中，</p>
<ol>
<li><a href="https://github.com/stuartZhang/Arkts-NAPI-Rust-Demo/blob/main/entry/src/main/rust/build.rs" rel="noopener noreferrer">build.rs</a>作为【前置处理】程序
<ol>
<li>从环境变量，收集<code>.so</code>文件的位置信息</li>
<li>生成<code>[CMD] COPY /Y</code>或<code>[Shell] cp -f</code>文件复制指令</li>
<li>将【文件复制】指令尾追加至同一个<code>.cmd / .sh</code>脚本文件</li>
</ol>
</li>
<li><a href="https://github.com/stuartZhang/Arkts-NAPI-Rust-Demo/blob/main/entry/src/main/rust/post_build.rs" rel="noopener noreferrer">post_build.rs</a>作为【后置处理】程序
<ol>
<li>执行被写入【文件复制】指令的程序文件，并</li>
<li>删除该程序文件</li>
</ol>
</li>
</ol>
<blockquote>
<p>【打广告】<code>build.rs</code>与<code>post_build.rs</code>皆未对上下文做任何的假设。所以，它们可被<strong>零成本</strong>地复用于其它同类工程中。</p>
</blockquote>
<p>还是看图吧，一图抵千词</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/891e6a5d-cbfd-453d-b374-c221dc83a186" alt="image"></p>
<p>设计很完美但现实很骨感，因为<code>Mozilla</code>厂方的<code>rustup</code>工具链尚<strong>不</strong>支持【后置处理】。所以，@Rustacean 需</p>
<ol>
<li>
<p>额外安装功能增补包<a href="https://crates.io/crates/cargo-post" rel="noopener noreferrer">cargo-post</a></p>
<pre><code>cargo install cargo-post
</code></pre>
</li>
<li>
<p>修改<code>Cargo</code>全局配置文件<code>%UserProfile%\.cargo\config.toml</code>中的<code>ohos-build</code>别名设置，以使<code>cargo-post</code>生效</p>
<pre><code>[alias]
ohos-build = ["post", "build", "-Zbuild-std", "--target=aarch64-unknown-linux-ohos", "--target=armv7-unknown-linux-ohos", "--target=x86_64-unknown-linux-ohos"]
</code></pre>
<p>【注意】在"build"左侧<strong>新</strong>添加了"post"数组项</p>
</li>
</ol>
<h3>给<code>Native</code>模块导出接口，添加<code>.d.ts</code>类型提示</h3>
<p><code>DevEco Studio IDE</code>并没有集成类似于<a href="https://www.nirsoft.net/utils/dll_export_viewer.html" rel="noopener noreferrer">DLL Export Viewer</a>的【动态链接库外部接口反射工具】。所以需要</p>
<ol>
<li>@Rustacean 在输出<code>.so</code>文件的同时也提供一份接口类型说明的<code>.d.ts</code>文件（— 其功能几乎等效于<code>C</code>头文件），并</li>
<li>将该类型说明文件注入<code>DevEco Studio</code>工作流</li>
</ol>
<p>接下来，我沿着前面<code>Rust + ArkTs</code>混合编程的<strong>新</strong>目录结构，描述操作步骤：</p>
<ol>
<li>
<p>在模块<code>entry</code>的根目录下，创建<code>src/main/rust/types/libcalculator</code>子目录。注意：路径末端的文件夹名<code>libcalculator</code>是链接库文件的<code>basename</code>。</p>
</li>
<li>
<p>在新建文件夹内，再新建文件<code>index.d.ts</code>和添入<code>Native</code>模块导出函数的函数签名</p>
<pre><code>export const add: (frist: number, second: number) =&gt; number;
</code></pre>
</li>
<li>
<p>接着新建文件<code>oh-package.json5</code>和添入<code>Native</code>模块的摘要信息。</p>
<pre><code>{
    "name": "libcalculator.so",
    "types": "./index.d.ts",
    "version": "0.1.0",
    "description": "ArkTs NAPI 原生模块示例"
}
</code></pre>
<p>其中，</p>
<ol>
<li><code>name</code>字段就是链接库的文件名（含扩展名）。</li>
<li><code>types</code>字段是指向类型说明文件的<strong>相对</strong>路径。</li>
<li><code>version</code>字段是<code>Native</code>模块版本号。【推荐】该字段值与<code>Cargo (Lib) Package</code>子工程中<code>Cargo.toml</code>配置文件内<code>[package]</code>配置表下<code>version</code>配置项的值保持一致 — 这又是一处纯人工同步点。</li>
<li><code>description</code>字段是<code>Native</code>模块描述信息。</li>
</ol>
</li>
<li>
<p>打开<code>entry</code>模块的<code>oh-package.json5</code>文件，并添加对<code>Native</code>模块的依赖项条目。</p>
<pre><code>"dependencies": {
    "libcalculator.so": "file:src/main/rust/types/libcalculator"
}
</code></pre>
<p>在依赖项条目中，左侧是链接库的文件名；而右侧是指向了类型说明文件所处文件夹的相对目录。</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/a2190d96-e493-4ad6-8652-ba6fb8598c74" alt="image"></p>
</li>
<li>
<p>最后，从<code>DevEco Studio IDE</code>依次点击菜单项<code>Build</code> ➞ <code>Rebuild Project</code>重新构建整个工程和使配置项修改生效。</p>
</li>
</ol>
<p>于是，鸿蒙应用软件开发程序员就能在<code>ets</code>与<code>ts</code>代码编辑器内获得针对<code>Native</code>模块<code>API</code>的丰富类型提示了。</p>
<h2>线上例程</h2>
<p>我已将上述全部文字描述内容都例程化到<code>github</code>工程<a href="https://github.com/stuartZhang/Arkts-NAPI-Rust-Demo/tree/main" rel="noopener noreferrer">Arkts-NAPI-Rust-Demo</a>内了。线下运行该工程可加强对文章繁杂内容的理解。</p>
<h3>运行例程工程的环境要求</h3>
<ol>
<li><code>rustc 1.75.0-nightly</code></li>
<li><code>VSCode 1.86</code></li>
<li><code>ohsdk 3.1.0(API v9)</code></li>
<li><code>DevEco Studio 3.1.1 Release</code></li>
</ol>
<h3>运行例程工程的具体步骤</h3>
<ol>
<li>
<p>克隆<code>git@github.com:stuartZhang/Arkts-NAPI-Rust-Demo.git</code></p>
</li>
<li>
<p>在<code>VSCode</code>内，</p>
<ol>
<li>打开<code>entry/src/main/rust</code>目录</li>
<li>敲击<code>Alt + T + R</code>键。</li>
<li>从<code>Command Palette</code>下拉列表，依次点击<code>build</code> ➞ <code>ohos-build</code> ➞ <code>--release</code></li>
<li>观察控制台输出日志，等待交叉编译结束。</li>
</ol>
</li>
<li>
<p>在<code>DevEco Studio IDE</code>内，</p>
<ol>
<li>打开工程根目录</li>
<li>启动手机模拟器</li>
<li>敲击<code>Shift + F10</code>键，运行移动端程序</li>
</ol>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/b31b49cd-5925-457d-b414-5f43b4c93461" alt="image"></p>
</li>
</ol>
<h2>结束语与扩展阅读</h2>
<p>搞定【交叉编译】难关仅只是鸿蒙<code>Rust</code>原生开发万里征程的<strong>第一步</strong>。加深对<code>ArkTs - NAPI</code>接口定义的理解才是【形成生产力】的核心任务。好消息是</p>
<ol>
<li>
<p><code>ArkTs - NAPI</code>与<code>nodejs N-API</code>高度相似。至少截至目前，它们的相似度还<code>&gt;= 95%</code>。所以，已熟悉<code>nodejs</code>原生模块编程的“老司机”们上手鸿蒙<code>ArkTs - NAPI</code>应该不难。</p>
</li>
<li>
<p>另外，我在春节假期期间贡献的<a href="https://github.com/stuartZhang/node-bindgen?tab=readme-ov-file#ohos-node-bindgen%E8%BF%98%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8" rel="noopener noreferrer">ohos-node-bindgen crate</a>更可<strong>大幅降低</strong><code>ArkTs - NAPI</code>原生开发的复杂度。请对比下图左右侧的代码量</p>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/e94fb366-eb02-42c7-a89c-d1c8835a58a5" alt="image"></p>
<p>所以，<a href="https://github.com/stuartZhang/node-bindgen?tab=readme-ov-file#ohos-node-bindgen%E8%BF%98%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8" rel="noopener noreferrer">ohos-node-bindgen crate</a>值得大家点<code>star</code>呀！也请大家给<a href="https://github.com/stuartZhang/Arkts-NAPI-Rust-Demo/tree/main" rel="noopener noreferrer">Arkts-NAPI-Rust-Demo</a>点<code>star</code>！</p>
</li>
</ol>
<p><img src="https://github.com/rust-lang/cargo/assets/13935927/3ccc7de3-e0cc-4d0d-8a31-2d2ed466e23c" alt="ohos-node-bindgen摘要"></p>
2024-03-11T22:51:08.295620633+08:00 - 文章标题：Tran v.0.1.11 发布了!
2024-03-11T22:51:08.295665800+08:00 - 文章内容：<p><a href="https://github.com/Borber/Tran/releases/tag/v.0.1.11" rel="noopener noreferrer">Release v.0.1.11</a></p>
<p>已发布 <code>v0.1.11</code> 版本！相比一个月前的 <code>v0.1.9</code> 版本 平均反应速度提升至少 <strong>80ms</strong> 主要改进：</p>
<ul>
<li>支持多显示器</li>
<li>去除 Tray 将 退出 功能合并到面板中</li>
<li>设置界面, 按钮 hover 效果</li>
<li>避免多次启动</li>
<li>锁定快捷键, 去除无关的按键模拟, 提升快捷键响应速度</li>
<li>快快快, 快就完了</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/Borber/PublicPic1/tran/v1/tran-exit.png" alt="tran-exit"></p>
<h1>Tran</h1>
<p>简洁, 快速, 划词翻译</p>
<p><a href="https://github.com/Borber/tran?tab=GPL-3.0-1-ov-file" rel="noopener noreferrer"><img src="https://img.shields.io/github/license/borber/tran?color=%2398cbed&amp;logo=rust&amp;style=for-the-badge" alt="LICENSE"></a>
<a href="https://github.com/Borber/tran/releases" rel="noopener noreferrer"><img src="https://img.shields.io/github/downloads/Borber/tran/total.svg?style=for-the-badge&amp;color=82E0AA&amp;logo=github" alt="Downloads"></a>
<a href="https://www.rust-lang.org/" rel="noopener noreferrer"><img src="https://img.shields.io/badge/-Rust-orange?logo=rust&amp;style=for-the-badge&amp;logoColor=white" alt="Rust"></a>
<a href="https://tauri.app/" rel="noopener noreferrer"><img src="https://img.shields.io/badge/Tauri-blue?logo=tauri&amp;color=1B1B1D&amp;style=for-the-badge" alt="Tauri"></a>
<a href="https://github.com/Borber/tran/releases" rel="noopener noreferrer"><img src="https://img.shields.io/badge/-Windows-blue?logo=windows&amp;style=for-the-badge&amp;logoColor=white" alt="Windows"></a>
<a href="https://github.com/Borber/tran/releases" rel="noopener noreferrer"><img src="https://img.shields.io/badge/-macOS-black?&amp;logo=apple&amp;style=for-the-badge&amp;logoColor=white" alt="MacOS"></a>
<a href="https://github.com/Borber/tran/releases" rel="noopener noreferrer"><img src="https://img.shields.io/badge/-Linux-yellow?logo=linux&amp;style=for-the-badge&amp;logoColor=white" alt="Linux"></a></p>
<blockquote>
<p><strong>Keep it simple，stupid.</strong></p>
</blockquote>
<h1>功能</h1>
<table>
<thead>
<tr>
<th align="center">划词翻译</th>
<th align="center">划过固定</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><img src="https://fastly.jsdelivr.net/gh/Borber/PublicPic1/tran/v1/translate.gif" alt="translate"></td>
<td align="center"><img src="https://fastly.jsdelivr.net/gh/Borber/PublicPic1/tran/v1/drag.gif" alt="drag"></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th align="center">划过关闭</th>
<th align="center">划过复制</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><img src="https://fastly.jsdelivr.net/gh/Borber/PublicPic1/tran/v1/close.gif" alt="close"></td>
<td align="center"><img src="https://fastly.jsdelivr.net/gh/Borber/PublicPic1/tran/v1/copy.gif" alt="copy"></td>
</tr>
</tbody>
</table>
<p><strong>快捷键：</strong> <code>Alt + X</code></p>
2024-03-11T22:51:08.295680172+08:00 - 文章标题：smartscp: better scp
2024-03-11T22:51:08.295738908+08:00 - 文章内容：<ul>
<li>对scp的封装, 自动跳过被 gitignore 的文件</li>
<li></li>
<li>原理
- 用 sshfs 把远程目录挂在本地的临时目录
- 用 xcp 复制文件</li>
</ul>
<p>之前我尝试过用 sftp 传输文件, 但是 sftp 很难控制远程 git 仓库
后来我发现 sshfs 可以操控远程 git 仓库像本地一样简单
因此切换到了 sshfs</p>
<ul>
<li>
<p>基本用法</p>
<ul>
<li>和 scp 一样, 不过传目录不需要 -r 参数</li>
<li>
<pre><code>smartscp remote-host:remote_path local_path
smartscp local_path remote-host
smartscp local_path remote-host:remote_path
</code></pre>
</li>
</ul>
</li>
<li>
<ul>
<li>如果目标目录是缺省的, smartscp  会自动根据原目录相对于 home 的偏移量, 计算目标目录
<ul>
<li>比如source 是 ~/foo/bar, 那会自动传到远程的 ~/foo/bar</li>
<li>
<pre><code>smartscp ~/foo/bar remote-host
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li></li>
<li>
<p>使用场景</p>
<ul>
<li>传 rust 项目的时候,避免传 target/</li>
<li>传 nodejs 项目的时候, 避免传 node_modules/</li>
<li>对于带宽 网速有限的网络环境, 特别有用</li>
</ul>
</li>
<li>
<p>尚不支持的功能</p>
<ul>
<li>包含 : 的文件名</li>
</ul>
</li>
<li></li>
<li>
<p>注意</p>
<ul>
<li>不兼容 scp 的参数, 比如不接受 -r 参数</li>
<li>不要直接替代 scp</li>
<li></li>
</ul>
</li>
<li>
<p>Q&amp;A</p>
<ul>
<li>为什么不用 <code>rsync --exclude=</code>
<ul>
<li>我并不觉得方便</li>
<li>不够自动化</li>
<li>要支持复杂的 gitignore</li>
</ul>
</li>
<li>为什么用rust写
- 为了在源码级依赖 xcp</li>
<li>为什么不从头用rust写一遍 scp, 而不是调用 scp
<ul>
<li>需要不少工作量</li>
</ul>
</li>
<li>为什么不用 c 直接改 scp
<ul>
<li>c 中不太方便导库</li>
</ul>
</li>
</ul>
</li>
</ul>
2024-03-11T22:51:08.295754895+08:00 - 文章标题：更快的 tsv 解析
2024-03-11T22:51:08.295887787+08:00 - 文章内容：<ul>
<li><a href="#%E6%9B%B4%E5%BF%AB%E7%9A%84-tsv-%E8%A7%A3%E6%9E%90" rel="noopener noreferrer">更快的 tsv 解析</a>
<ul>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA" rel="noopener noreferrer">项目搭建</a></li>
<li><a href="#regex-%E8%A7%A3%E6%9E%90" rel="noopener noreferrer">regex 解析</a></li>
<li><a href="#%E5%87%8F%E5%B0%91%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D" rel="noopener noreferrer">减少内存分配</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-ascii-%E6%AD%A3%E5%88%99" rel="noopener noreferrer">使用 ascii 正则</a></li>
<li><a href="#%E6%8A%9B%E5%BC%83-regex" rel="noopener noreferrer">抛弃 regex</a></li>
<li><a href="#%E6%89%8B%E5%86%99%E8%A7%A3%E6%9E%90%E7%8A%B6%E6%80%81%E6%9C%BA" rel="noopener noreferrer">手写解析状态机</a></li>
<li><a href="#simd-%E5%8A%A0%E9%80%9F" rel="noopener noreferrer">SIMD 加速?</a></li>
<li><a href="#%E6%80%BB%E7%BB%93" rel="noopener noreferrer">总结</a></li>
</ul>
</li>
</ul>
<p>最近在B站冲浪时发现一个 Rust 和 Go 解析 tsv 文件的视频, 作者需要解析使用 <code>get-NetTCPConnection | Format-Table -Property LocalAddress,LocalPort,RemoteAddress,RemotePort,State,OwningProcess</code> 获取的本地所有 TCP 连接信息, 文件输出大致如下</p>
<pre><code>LocalAddress                          LocalPort RemoteAddress                     RemotePort       State OwningProcess
------------                          --------- -------------                     ----------       ----- -------------
192.168.1.4                               54339 104.210.1.98                             443 Established          4504
</code></pre>
<p>视频作者使用 regex 正则库处理输出, 发现比 Go 版本慢, 优化后虽然比 Go 快, 但并没有领先多少, 于是我自己尝试使用别的优化方法, 解析耗时能优化使用正则解析的 10% 左右. 下面来看看我的优化过程.</p>
<h2>项目搭建</h2>
<p>进行性能时建议使用 <a href="https://github.com/bheisler/criterion.rs" rel="noopener noreferrer">criterion</a>, 它帮我们解决了性能的内存预加载, 操作耗时, 性能记录, 图表输出等功能.</p>
<pre><code>cargo new --lib tsv
cd tsv
cargo add criterion --dev -F html_reports
cargo add regex
</code></pre>
<p>然后在 Cargo.toml 里添加如 bench 文件</p>
<pre><code>[[bench]]
name = "parse"
harness = false
</code></pre>
<pre><code>// benches/parse.rs
#![allow(dead_code)]
use criterion::{black_box, criterion_group, criterion_main, Criterion};

const OUTPUT: &amp;str = include_str!("net.tsv");

fn criterion_benchmark(c: &amp;mut Criterion) {
    todo!()
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
</code></pre>
<p>测试使用的 tsv 一共 380 行.</p>
<h2>regex 解析</h2>
<p>使用正则解析的正则表达式很简单, 这里直接给代码, 为了避免重复编译正则表达式和重新分配内存报错结果列表, 这里将她们作为参数传给解析函数.</p>
<pre><code>struct OwnedRecord {
    local_addr: String,
    local_port: u16,
    remote_addr: String,
    remote_port: u16,
    state: String,
    pid: u64,
}
fn regex_owned(input: &amp;str, re: &amp;regex::Regex, result: &amp;mut Vec&lt;OwnedRecord&gt;) {
    input.lines().for_each(|line| {
        if let Some(item) = re.captures(line).and_then(|captures| {
            let (_, [local_addr, local_port, remote_addr, remote_port, state, pid]) =
                captures.extract();
            let ret = OwnedRecord {
                local_addr: local_addr.to_string(),
                local_port: local_port.parse().ok()?,
                remote_addr: remote_addr.to_string(),
                remote_port: remote_port.parse().ok()?,
                state: state.to_string(),
                pid: pid.parse().ok()?,
            };
            Some(ret)
        }) {
            result.push(item);
        }
    });
    assert_eq!(result.len(), 377);
}
</code></pre>
<p>parse.rs 文件里要加上使用的正则和提前创建好列表, 并且将函数添加的 bench 目标里</p>
<pre><code>fn criterion_benchmark(c: &amp;mut Criterion) {
    let re = regex::Regex::new(r"(\S+)\s+(\d+)\s+(\S+)\s+(\d+)\s+(\S+)\s+(\d+)").unwrap();
    let mut r1 = Vec::with_capacity(400);
    c.bench_function("regex_owned", |b| {
        b.iter(|| {
            // 重置输出 vector
            r1.clear();
            regex_owned(black_box(OUTPUT), &amp;re, &amp;mut r1);
        })
    });
}
</code></pre>
<p>接着跑 <code>cargo bench --bench parse</code> 进行测试, 在我的电脑上测得每次运行耗时 450 µs 左右.</p>
<h2>减少内存分配</h2>
<p>一个最简单的优化是使用 <code>&amp;str</code> 以减少每次创建 <code>String</code> 带来的内存分配和数据复制.</p>
<pre><code>struct Record&lt;'a&gt; {
    local_addr: &amp;'a str,
    local_port: u16,
    remote_addr: &amp;'a str,
    remote_port: u16,
    state: &amp;'a str,
    pid: u64,
}
</code></pre>
<p>两个函数代码差不多, 所以这里不再列出来, 可以通过 <a href="https://gist.github.com/PrivateRookie/3cc2330f9bbeb1115efb4a49f0627298" rel="noopener noreferrer">gits: tsv 解析</a> 获取完整代码.</p>
<p>可惜这次改动带来的优化非常小, 在我的电脑上反复测量, 这个版本耗时在 440 µs 左右.</p>
<h2>使用 ascii 正则</h2>
<p>rust 的 regex 正则默认使用 unicode, 相比于 ascii 编码, unicode 更复杂, 因此性能也相对较低, 刚好要解析的内容都是ascii字符, 使用 ascii 正则是否能提升解析速度呢? regex 有 <code>regex::bytes</code> 模块用于 ascii 解析, 但为了适配字段, 这里不得不使用 <code>transmute</code> 将 <code>&amp;[u8]</code> 强制转换成 <code>&amp;str</code></p>
<pre><code>fn cast(data: &amp;[u8]) -&gt; &amp;str {
    unsafe { std::mem::transmute(data) }
}
fn regex_ascii&lt;'a&gt;(input: &amp;'a str, re: &amp;regex::bytes::Regex, result: &amp;mut Vec&lt;Record&lt;'a&gt;&gt;) {
    input.lines().for_each(|line| {
        if let Some(item) = re.captures(line.as_bytes()).and_then(|captures| {
            let (_, [local_addr, local_port, remote_addr, remote_port, state, pid]) =
                captures.extract();
            let ret = Record {
                local_addr: cast(local_addr),
                local_port: cast(local_port).parse().ok()?,
                remote_addr: cast(remote_addr),
                remote_port: cast(remote_port).parse().ok()?,
                state: cast(state),
                pid: cast(pid).parse().ok()?,
            };
            Some(ret)
        }) {
            result.push(item);
        }
    });
    assert_eq!(result.len(), 377);
}
</code></pre>
<p>添加到 bench 后性能大概多少呢?, 很遗憾, 性能与 regex_borrow 差不多, 在 430 µs 左右.</p>
<h2>抛弃 regex</h2>
<p>鉴于内容格式比较简单, 如果只使用 rust 内置的 split 等方法解析性能会不会更好呢?
解析思路很简单, 使用 <code>lines</code> 得到一个逐行迭代器, 然后对每行使用 split 切分空格再逐个解析即可</p>
<pre><code>fn split&lt;'a&gt;(input: &amp;'a str, result: &amp;mut Vec&lt;Record&lt;'a&gt;&gt;) {
    input
        .lines()
        .filter_map(|line| {
            let mut iter = line.split([' ', '\t', '\r']).filter(|c| !c.is_empty());
            let local_addr = iter.next()?;
            let local_port: u16 = iter.next()?.parse().ok()?;
            let remote_addr = iter.next()?;
            let remote_port: u16 = iter.next()?.parse().ok()?;
            let state = iter.next()?;
            let pid: u64 = iter.next()?.parse().ok()?;
            Some(Record {
                local_addr,
                local_port,
                remote_addr,
                remote_port,
                state,
                pid,
            })
        })
        .for_each(|item| result.push(item));
    assert_eq!(result.len(), 377);
}
</code></pre>
<p>注意 <code>line.split</code> 只后还需要过滤不是空白的字符串, 这是因为字符串 <code>"a   b"</code> split 之后得到 <code>["a", "", "b"]</code>.</p>
<p>经测试, 这个版本测试耗时大概为 53 µs, 这真是一个<strong>巨大提升</strong>, rust 的 regex 性能确实有些问题.</p>
<p>每次 split 之后还需要 filter 感觉有些拖沓, 刚好有个<a href="https://doc.rust-lang.org/std/primitive.str.html#method.split_whitespace" rel="noopener noreferrer">split_whitespace</a>, 换用这个方法, 将新的解析方法命名为<code>split_whitespace</code>后再测试下性能</p>
<pre><code>let mut iter = line.split_whitespace();
</code></pre>
<p>令人意想不到的是性能居然倒退了, 这次耗时大概 60 µs, 仔细研究下来还是 unicode 的问题, 改用 ascii 版本的 <code>split_ascii_whitespace</code> 之后性能提升到 45 µs.</p>
<h2>手写解析状态机</h2>
<p>除了上述的方法, 我还尝试将 Record 的 local_addr 和 remote_addr 改成 <code>std::net::IpAddr</code>, 消除 <code>next()?.parse().ok()?</code> 等其他方法, 但收益几乎没有, 唯一有作用的办法是手写解析状态机.</p>
<p>大致思路是, 对于输出来说, 我们只关系它是以下三种情况</p>
<ol>
<li>换行符 NL</li>
<li>除了换行符的空白符 WS</li>
<li>非空白字符 CH</li>
</ol>
<p>只解析 LocalAddr 和 LocalPort 解析状态机如下, 如果要解析更多字段, 按顺序添加即可.</p>
<pre><code>stateDiagram-v2
    [*] --&gt; LineStart
    LineStart --&gt; LineStart:WS
    LineStart --&gt; ConsumeLocalAddr:Ch
    ConsumeLocalAddr --&gt; LineStart:NL
    ConsumeLocalAddr --&gt; LocalAddr:WS
    ConsumeLocalAddr --&gt; ConsumeLocalAddr:CH
    LocalAddr --&gt; LineStart:NL
    LocalAddr --&gt; LocalAddr:WS
    LocalAddr --&gt; ConsumeLocalPort:CH
    ConsumeLocalPort --&gt; ParsePort:NL
    ConsumeLocalPort --&gt; ParsePort:WS
    ConsumeLocalPort --&gt; ConsumeLocalPort:CH
    ParsePort --&gt; LineDone:parse ok
    ParsePort --&gt; Abort:parse error
    LineDone --&gt; LineStart:NL
    Abort --&gt; LineStart:NL
    LineDone --&gt; [*]:EOF
    Abort --&gt; [*]:EOF
</code></pre>
<p>因为代码有些复杂, 所以这里不再贴出来, 完整代码在 gits 上. 手写状态机的版本耗时大概在 32 µs 左右. 这版本主要性能提升来自手写状态机减少了循环内的分支判断.</p>
<h2>SIMD 加速?</h2>
<p>在上面手写解析的例子里, 处理过程类似与将输出作为一个 vec, 状态机作为另一个 vec, 将两个 vec 进行某种运算后输出结果, 应该能使用 simd 进行加速, 但我还没想出高效实现. 所以这里只给出可能的参考资料</p>
<ol>
<li><a href="https://github.com/liquidaty/zsv" rel="noopener noreferrer">zsv</a> 使用 simd 加速的 csv 解析库</li>
<li><a href="https://mcyoung.xyz/2023/11/27/simd-base64/" rel="noopener noreferrer">simd base64</a> 一篇介绍使用 simd 加速 base64 解析的博客, 非常推荐</li>
</ol>
<h2>总结</h2>
<p>rust regex 在某时候确实存在性能问题, 有时候使用简单的 split 的方法手动解析反而更简单性能也更高, 如果情况允许, 使用 ascii 版本能进一步提升性能, 如果你追求更好的性能, 手写一个状态不失为一种选择, 当然我不建议在生产上这么做. 同时我也期待有 simd 加速的例子.</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDg5MzUwMA==&amp;mid=2247483749&amp;idx=1&amp;sn=6b1fbad044b2ddef1c8aa360ef81e1c1&amp;chksm=f97d4db6ce0ac4a0fe8a8a5d3062cd99f8bf4f0c2ccc30d41e673df1a5d661aab32c269b1dda#rd" rel="noopener noreferrer">公众号原文</a></p>
2024-03-11T22:51:08.295911070+08:00 - 文章标题：Rust与面向对象（四）
2024-03-11T22:51:08.296067652+08:00 - 文章内容：<h2>原型法</h2>
<p>此原型法非原型模式，而是类似JavaScript中的原型扩展，在JS中，能够很轻松地为String类型“原地”扩展方法，如：</p>
<pre><code>String.prototype.isDigit = function() {
  return this.length &amp;&amp; !(/\D/.test(this));
};
</code></pre>
<p>这个能力其实很好用，但是C++无法这样，一直觉得<code>std::string</code>的功能不足，想为其添加更丰富的如<code>trim</code>/<code>split</code>之类的语义，只能采用继承或者组合代理方式：</p>
<ul>
<li>继承：用一个新类继承<code>std::string</code>，并为新类实现<code>trim</code>/<code>split</code></li>
<li>组合代理：用一个新类组合<code>std::string</code>，并为新类代理所有<code>std::string</code>的方法，包括各类构造方法和析构方法，再为新类实现<code>trim</code>/<code>split</code></li>
</ul>
<p>然后，使用<code>std::string</code>的地方替换成新类。这时候那种都比较复杂，组合的方式更复杂一些，所以也别无脑相信面向对象里“组合一定优于继承”。幸运的是，Rust能轻易完成原型法，比如有个<code>bytes</code>库提供了可廉价共享的内存缓冲区，避免不必要的内存搬运拷贝，<a href="https://docs.rust-embedded.org/rust-sysfs-gpio/bytes/struct.BytesMut.html" title="BytesMut" rel="noopener noreferrer"><code>bytes::BytesMut</code></a>实现了可变缓冲区<a href="https://docs.rust-embedded.org/rust-sysfs-gpio/bytes/struct.BytesMut.html#impl-BufMut" title="BufMut" rel="noopener noreferrer"><code>bytes::BufMut</code></a>，有一系列为其写入u8、i8、u16、i16、slice等基础类型的接口，对于基础的通用的在bytes库中已经足够了，现在有个网络模块，想往<code>bytes::BytesMut</code>中写入<code>std::net::SocketAddr</code>结构，Rust可轻易为<a href="https://docs.rust-embedded.org/rust-sysfs-gpio/bytes/struct.BytesMut.html" title="BytesMut" rel="noopener noreferrer"><code>BytesMut</code></a>扩展实现<code>put_socket_addr</code>：</p>
<pre><code>pub trait WriteSocketAddr {
    fn put_socket_addr(&amp;mut self, sock_addr: &amp;std::net::SocketAddr);
}

impl WriteSocketAddr for bytes::BytesMut {
    fn put_socket_addr(&amp;mut self, sock_addr: &amp;std::net::SocketAddr) {
        match sock_addr {
            SocketAddr::V4(v4) =&gt; {
                self.put_u8(4);        // 代表v4地址族
                self.put_slice(v4.ip().octets().as_ref());
                self.put_u16(v4.port()); 
            }
            SocketAddr::V6(v6) =&gt; {
                self.put_u8(6);        // 代表v6地址族
                self.put_slice(v6.ip().octets().as_ref());
                self.put_u16(v6.port()); 
            }
        }
    }
}
</code></pre>
<p>然后就可以使用<code>BytesMut::put_socket_addr</code>了，只需<code>use WriteSocketAddr</code>引入这个trait就可以，是不是很轻松！为何会这么容易？先看JS的原型法，其背后是原型链在支撑，调用String的方法，不仅在String对象里面查找，还会层层向String的父级、祖父级prototype查找，一旦找到就可以调用，而每个prototype本质上都是个Object，可以获取并编辑它们，ES6的继承本质上也是原型链。所以可以拿到String类的prototype，在它上面为其增加isDigit，就能让所有的String对象都能享受isDigit函数的便利，可谓十分方便。但是C++就不行了，也想拿到<code>std::string</code>的函数表，然后一通编辑为其添加<code>trim</code>/<code>split</code>行为，奈何C++不允许这危险的操作啊，只能派生子类，即便子类仅仅只包含一个<code>std::string</code>。那Rust为何可以，关键就是trait函数表与传统面向对象的虚函数表解藕了，后果就是，类型没有绑死函数表，可以为类型增加新trait函数表，然后就有了上面的Rusty原型法。类似的还可以为Rust的<code>String</code>扩展<code>is_digit</code>/<code>is_email</code>/<code>is_mobile</code>，一样地简单。一般有<code>ext</code>模块，就很可能发现原型法的身影，比如<code>tokio::io::AsyncReadExt</code>。</p>
<p>原型法是最能体现trait函数表与传统面向对象虚函数表分离优势的设计模式！注意，Rust的原型法并没有产生任何新类型，只是增加了一个新的trait函数表，所以一开始称之为“原地”扩展，是比JS更干净的原型法，个人非常喜欢用这个模式，能用就用！更进阶的，Rust还能为所有实现了<a href="https://docs.rust-embedded.org/rust-sysfs-gpio/bytes/struct.BytesMut.html#impl-BufMut" title="BufMut" rel="noopener noreferrer"><code>bytes::BufMut</code></a>的类型扩展实现<code>WriteSocketAddr</code>特型，而不仅仅只为<a href="https://docs.rust-embedded.org/rust-sysfs-gpio/bytes/struct.BytesMut.html" title="BytesMut" rel="noopener noreferrer"><code>bytes::BytesMut</code></a>实现：</p>
<pre><code>/// 可以这样读：为所有实现了ButMut特型的类型实现WriteSocketAddr
/// bytes::BytesMut也不过是T的一种，代码复用性更佳
impl&lt;T: bytes::ButMut&gt; WriteSocketAddr for T {
    fn put_socket_addr(&amp;mut self, sock_addr: &amp;std::net::SocketAddr) {
        // 同样的代码
    }
}
</code></pre>
<p>原型法跟模板方法还有些联系，也算模板方法衍生出来的设计模式，因为子类如果不依赖父类，并且子类还不需要有任何字段，不需要有自己独特的结构就能实现算法策略时，那子类也不用依赖注入到父类了，直接在父类的基础上“原地“扩展，更加轻量。总结一下模板方法的衍生变化：</p>
<p>模板方法：</p>
<ul>
<li>子类拥有自己的结构，并依赖父类的结构和行为才能完成，是模板方法</li>
<li>子类拥有自己的结构，但不依赖父类结构和行为也能完成，可不用继承转而采用组合依赖注入，最好多达2个以上组合，达成策略组合模式</li>
<li>子类不需有自己的结构（或者一个空结构），依赖父类的结构和行为就能完成，只是算法在父类模块中不通用而没实现，可不用继承也不用组合，“原地”扩展，原型法即可</li>
<li>子类不需有自己的结构，也不依赖父类，那这么独立也跟父类没任何关系了，理应属于其它模块</li>
</ul>
<p>回到面向对象，凡是Rust能轻松做到的，面向对象却无法轻松做到的，就是面向对象该被批评的点。。面向对象说我服，早知道也不把虚函数表与对象内存结构绑死了。所谓长江后浪推前浪，新语言把老语言拍死在沙滩上，即便C++20如此强大，不改变虚函数表的基础设计，在原型法上也永远追赶不上Rust语言的简洁。</p>
<h2>装饰器模式</h2>
<p>上节说到，策略模式，要是为复合类型也实现trait，就类似装饰器模式，因为装饰器无论是内部委托成员，还是外部装饰器自己，都得实现同一个名为Decorate的trait，就是为了让它们可以相互嵌套组合：</p>
<pre><code>trait Decorate {
    fn decorate(&amp;mut self, params...);
}

/// 一个静多态的装饰器
struct SomeDecorator&lt;D: Decorate&gt; {
    delegate: D,    // 必要的委托
    ...
}

/// 还得为Decorator自己实现Decorate特型
impl&lt;D: Decorate&gt; Decorate for SomeDecorator&lt;D&gt; {
    fn decorate(&amp;mut self, params...) {
        // 1. SomeDecorator itself do sth about params 
        self.do_sth_about_params(params...); // 这是真正要装饰的实现
        // 2. then turn self.delegate
        self.delegate.decorate(params...);    // 这一句都相同，1、2步的顺序可互换
    }
}

/// 另一个装饰器
struct AnotherDecorator&lt;T: Decorate&gt; {
    delegate: T,
    ...
}

impl&lt;D: Decorate&gt; Decorate for AnotherDecorator&lt;D&gt; {
    fn decorate(&amp;mut self, params...) {
        // 1. AnotherDecorator itself do sth about params 
        self.do_sth_about_params(params...);
        // 2. then turn self.delegate
        self.delegate.decorate(params...);    // 这一句都相同
    }
}

/// 必要的终结型空装饰器
struct NullDecorator;

impl Decorator for NullDecorator { /*do nothing*/ }

/// 使用上
let d = SomeDecorator::new(AnotherDecorator::new(NullDecorator));
d.decorate();
</code></pre>
<p>SomeDecorator/AnoterDecorator是真正的装饰器，会有很多个，功能各异，每个Decorator所包含的相应的结构可能也不同。装饰器在使用上，就像链表一样，一个处理完之后，紧接着下一个节点再处理，它把链表结构包含进了装饰器的结构里面，并用接口/trait来统一类型。上述实现有重复代码，就是调用委托的装饰方法，还能继续改进：</p>
<pre><code>/// 装饰的其实是一个处理过程
trait Handle {
    fn handle(&amp;mut self, params...);
}

trait Decorate {
    fn decorate(&amp;mut self, params...);
}

/// 装饰器的终结
struct NullDecorator;

impl Decorate for NullDecorator {
    fn decorate(&amp;mut self, params...) {
        // do nothing
    }
}

/// 通用型装饰器，像是链表节点串联前后2个处理器节点
struct Decorator&lt;D: Decorate, H: Handler&gt; {
    delegate: D,
    handler: H,   // 这又是个干净的模板方法，将变化交给子类
}

/// 通用装饰器本身也得实现Decorate特质，可以作为另一个装饰器的D
impl&lt;D: Decorate, H: Handler&gt; Decorate for Decorator&lt;D, H&gt; {
    fn decorate(&amp;mut self, params...) {
        // 这两步可互换
        self.handler.handle(params);
        self.delegate.decorate(params);
    }
}

/// 下面的处理器只关注处理器自己的实现就好了
struct SomeHandler { ... };

impl Handler for SomeHandler { ... }

struct AnotherHandler { ... };

impl Handler for AnotherHandler { ... }

/// 使用上
let d = Decorator {
    delegate: Decorator {
        delegate: NullDecorator,
        handler: AnotherHandler,
    },
    handler: SomeHandler,
};
d.decorate(params...);
</code></pre>
<p>可以看出，装饰器很像链表，emm...大家都知道链表在Rust中较复杂，那链表有多复杂，装饰器就有多复杂。上面的静多态实现也是不行的，不同的装饰器组合，就会产生不同的类型，类型可能随着Handler类型数目增加呈其全排列阶乘级类型爆炸，忍不了，必须得换用指针。装饰器模式，Rust实现起来不如传统面向对象，面向对象天然动多态，且Decorator继承可以让D、H两部分合为一体，让H也成装饰类的一个虚函数，都在this指针访问范围内，简单一些。而Rust将装饰器拆解成了链表型，将装饰器的底层结构还原了出来，确实装饰器可以用链表串联起各个处理器一个接一个地调用，效果一样的。只是面向对象技巧隐藏了链表的细节。</p>
<p>不过Rust有个很牛逼的装饰器，就是迭代器的map、step_by、zip、take、skip这些函子，它们可以随意串联组合调用，本质就是装饰器，只不过仅限于用在迭代器场景。如果装饰器能这样实现，能惰性求值，也能够编译器內联优化，就太强了。不过，各个装饰器功能不同，恐怕不能像迭代器函子那样都有清晰的语义，因此没有统一的装饰器库。不过装饰器实现时，肯定可以借鉴迭代器的函子思路。这样一来的话，Rust的装饰器又丝毫不弱于传统面向对象的了。而且，高，实在是高，妙，实在是妙！</p>
<pre><code>/// 以下仅作摘选，让大家一窥迭代器函子的装饰器怎么玩的
pub trait Iterator {
    type Item;

    // Required method
    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;

    // Provided methods
    // 像下面这样的函数还有76个，每个函数都映射到一个具体的装饰器，它们都返回一个装饰函子impl Iterator&lt;Item = Self::Item&gt;
    // 装饰器函数基本都定义完了，未来无法扩展？还记得原型法吗，为所有实现了Iterator的类型实现IteratorExt
    // 仅挑选一个step_by作为案例
    #[inline]
    #[stable(feature = "iterator_step_by", since = "1.28.0")]
    #[rustc_do_not_const_check]
    fn step_by(self, step: usize) -&gt; StepBy&lt;Self&gt;
    where
        Self: Sized,
    {
        StepBy::new(self, step)
    }
}

/// StepBy装饰器，如第一种实现那样的写法
pub struct StepBy&lt;I&gt; {
    iter: I,    // 装饰器的delegate
    step: usize,
    first_take: bool,
}

/// 再为StepBy&lt;I&gt;实现Iterator
impl&lt;I&gt; Iterator for StepBy&lt;I&gt;
where
    I: Iterator,
{
    type Item = I::Item;

    #[inline]
    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {
        self.spec_next()
    }
}

// 使用上，有别于传统装饰器模式从构建上去串联，这是利用返回值链式串联，顿时清晰不少
vec![1, 2, 3].iter().skip(1).map(|v| v * 2);
</code></pre>
<h2>小结</h2>
<p>至此，模板方法的变化告一断落。之前，有人说Rust不支持面向对象，导致Rust不好推广，实际上并不是，哪个OO设计模式Rust实现不了，还更胜一筹。因此，并非Rust不支持面向对象！有些设计模式，Rust天生也有，如：</p>
<ul>
<li>单例模式：其实单例模式如果不是为了懒加载，跟使用全局变量没啥差别；如果为了懒加载，那<code>lazy_static</code>或者<code>once_cell</code>就够用。（补充：标准库已经标准化成<code>OnceLock</code>了）</li>
<li>代理模式：NewType模式作代理挺好；或者原型法“原地”扩展代理行为</li>
<li>迭代器模式：Rust的迭代器是我见过最NB的迭代器实现了</li>
<li>状态机模式：<a href="https://doc.rust-lang.org/stable/book/ch17-03-oo-design-patterns.html" rel="noopener noreferrer">Rust语言官方文档中的NewType+enum状态机模式</a>，这种静多态的状态机非常严格，使用上都不会出错，所有状态组合还可以用enum统一起来，比面向对象的状态机模式要好</li>
</ul>
<p>还有一些设计模式，跟其它模式很像，稍加变化：</p>
<ul>
<li>适配器模式：同代理模式差别不大，很可能得有自己的扩展结构，然后得有额外“兼容处理”逻辑来体现“适配”</li>
<li>桥接模式：就是在应用策略模式</li>
<li>过滤器模式：就是在应用装饰器模式</li>
</ul>
<p>还有一些设计模式，读者可自行用Rust轻松实现，如观察者模式之流。后续不会为这些设计模式单独成文了，除非它有点意思，访问者模式就还可以，只不过实际应用不咋多。有想用Rust实现哪个设计模式有疑问的，可留言交流。</p>
<p>罗列所有设计模式没啥意思，我也无力吐槽这么多设计模式，至今很多人仍区分不清某些设计模式的区别，因为设计模式在描述它们的时候，云里雾里的需求描述，关注点、应用场景不一样云云，什么模式都得来一句让“抽象部分”与“实现部分”分离，跟都整过容一样相似的描述，让人傻傻分不清。至今我再看各种设计模式，想去了解其间区别，都觉得无聊了，浪费时间！被大众广泛记住的设计模式就那么几个，因为基础的设计就那么几个，当你在使用接口、指针/引用、组合的时候，其实就在不知不觉中使用设计模式了。</p>
<p>上段是在批评设计模式没错，并不是说设计模式一无是处，能总结出模式作为编程界通用设计语言意义非凡。懂它肯定比不懂的强，要是都能区分清各类设计模式了，肯定是高手中的高手了，看懂这一系列文章不难。设计模式的套用，归根结底是为了代码复用，良好的可读性。大家看到相似模式的代码，一提那种设计模式就能明白。遗憾的是，即便是同一个设计模式，因为乱七八糟的类型、胡乱命名、粗糙的掺杂不少杂质的实现，为不停变化的需求弄的面目全非者，让人读起来，实在很难对的上有某种设计，这并非设计模式的锅，而是编程素质不专业、太自由发挥、总见多识少地自创概念/二流招式的毛病招致的。</p>
<p>在这方面，Rust的解决方案 <strong>极具</strong> 吸引力。后续对比着面向对象，讲讲Rusty那味，味道不错但更难掌握，属于基础易懂，逻辑一多就复杂(废话)！</p>
2024-03-11T22:51:08.296088861+08:00 - 文章标题：N-API的JS堆对象生命周期管理
2024-03-11T22:51:08.296245880+08:00 - 文章内容：<h1><code>N-API</code>的<code>JS</code>堆对象生命周期管理</h1>
<p><code>N-API</code>是<code>Node API</code>的简写，同时也是<code>nodejs</code>的<code>JS VM</code>（链）接入原生模块<code>.node</code>文件的<strong>应用程序二进制接口</strong><code>(i.e. ABI)</code>。借助<code>N-API</code>引入的抽象隔离，升级<code>nodejs</code>运行时（虚拟机）</p>
<ul>
<li>【编译】不要求对原生扩展模块<strong>重新编译</strong> — 为<code>nodejs</code>的不同版本分别准备不同的原生模块<code>build</code>真的好麻烦。</li>
<li>【运行】不导致原生模块<strong>程序崩溃</strong> — 精读每一版<code>changelogs</code>清单和微调原生模块源码更耗时费力。</li>
</ul>
<p><code>N-API</code>开放接口在<code>nodejs 10+</code>后才逐步稳定，和成为<code>nodejs c-addon</code>的主流编程标准。</p>
<p>不久前，我有机会在工程实践中独立完成“给<code>node-webkit</code>容器编写原生扩展模块的”程序开发任务。虽然扩展模块自身的业务处理逻辑很简单 — 馁馁的“胶水”代码，但其涉及到了跨越多个<code>FFI</code>接口调用的<code>JS</code>对象<strong>缓存</strong>处理。初版程序<strong>缓存不住</strong><code>JS</code>堆内存中的变量值，因为<code>JS VM</code>的<code>GC</code>总是在<code>FFI</code>接口调用的<strong>间隙</strong>回收由原生模块缓存的<code>JS</code>对象和导致程序崩溃。由此，我特意“死磕”<a href="https://nodejs.org/api/n-api.html" rel="noopener noreferrer">C/C++ addons with Node-API</a>厂方文档，在解决工程难题的同时汇总实践收获写下此文。</p>
<p>文章以名词解释统一术语理解开篇，以对比不同版本<code>ABI</code>标准引题，以技术细节展开讨论为依据，最后向读者图文并茂地描述我个人创新的实践方案。</p>
<h2>名词解释</h2>
<h3><code>nodejs c-addon</code></h3>
<p><code>nodejs</code><strong>原生</strong>扩展模块。所谓“原生”是相对<code>JS</code>模块而言的。它必须由【系统编程语言<code>C / Cpp / Rust</code>】编写，并经由<code>nodejs</code>开放接口<code>N-API</code>，</p>
<ol>
<li>接入<code>nodejs</code>的<code>JS VM</code>，并</li>
<li>与<code>nodejs</code>交换数据·互操作。</li>
</ol>
<p>为了文字简练，下文也将其记作为<code>addon</code>。</p>
<p><code>nodejs c-addon</code>与<code>Commonjs Module</code>在科技树上处于相同的生态位，和对“上游”调用端的<code>JS</code>业务代码呈现一致的调用方式。</p>
<h3><code>JS</code>堆对象</h3>
<p>它既包括由<code>JS</code>程序自身构造的对象实例，也包含由系统程序从<code>addon</code>内调用<code>N-API</code>接口（比如，<a href="https://nodejs.org/api/n-api.html#napi_create_object" rel="noopener noreferrer">napi_create_object()</a>）实例化的<code>JS</code>对象。它们都</p>
<ol>
<li>被保存在<code>JS VM</code>的<strong>堆</strong>内存中，和</li>
<li>被<code>Rust</code><strong>栈</strong>内存中的<a href="https://nodejs.org/api/n-api.html#napi_value" rel="noopener noreferrer">napi_value</a>可修改<strong>原始指针</strong>引用。</li>
</ol>
<h3><code>N-API</code>引用计数</h3>
<p>它是指向<code>JS</code>堆对象的“<code>FFI</code>引用计数”智能指针（后文有图，应该会更直观些）。其</p>
<ol>
<li>被保存于<code>JS VM</code>的<strong>堆</strong>内存中，和</li>
<li>被<code>Rust</code><strong>栈</strong>内存中的<a href="https://nodejs.org/api/n-api.html#napi_ref" rel="noopener noreferrer">napi_ref</a>可修改<strong>原始指针</strong>引用。即，<code>addon</code>端<code>Rust</code>程序拿到的是指向了“智能指针”的“指针”。</li>
<li>被用于<strong>阻止</strong><code>JS VM</code>的<code>GC</code><strong>回收</strong>正活跃于<code>addon</code>端的<code>JS</code>堆对象。这就赋予了 @Rustacean 从<code>JS VM</code>外部干预<code>JS</code>对象生命周期的能力。<code>React Native</code>可都做不到这一点。</li>
</ol>
<h3><code>WASM</code>垫片程序</h3>
<p>它既包括由<code>wasm-bindgen-cli</code>生成的<code>JS</code>垫片程序文件，也包含由<code>wasm-bindgen crate</code>导出的<code>Rust</code>开发框架。正是<code>js &lt;-&gt; Rust</code>两端垫片程序的协同配合，<code>JS</code>堆对象才几乎被“投影为”<code>Rust</code>所有权（栈）变量。比如，<code>JS</code>堆对象的<a href="https://docs.rs/wasm-bindgen/latest/wasm_bindgen/struct.JsValue.html" rel="noopener noreferrer">wasm_bindgen::JsValue</a>（<strong>似</strong>智能指针）<strong>结构体</strong>就比<a href="https://docs.rs/nj-sys/latest/nj_sys/type.napi_value.html" rel="noopener noreferrer">nj_sys::napi_value</a>可修改<strong>原始指针</strong>更能发挥<code>Rust</code>类型系统与<code>Borrow / Drop Checker</code>对程序正确性的保障力。没有“黑魔法”，满眼都是对垫片程序开发迭代的<strong>工作量</strong>。</p>
<h2><code>WASM vs. N-API</code>堆对象生命周期管理策略</h2>
<p>简单地讲，生命周期策略的差异取决于【垫片程序】的“薄/厚”。因为<code>WASM</code>应用场景多（包括但不限于：网页、<code>nodejs</code>，<code>wasm-runtime</code>独立虚拟机），社区关注度高，<code>wasm-bindgen</code>工具链迭代速度快，所以，<code>wasm &lt;-&gt; js</code>垫片程序就“厚”。<code>JS</code>堆对象向<code>Rust</code>的“投影”就更像【智能指针】，而不是“裸奔的”原始指针。<code>WebAssembly</code>工作组甚至规划将垫片程序逐步“固化”至<code>wasm-runtime</code>内（比如，<a href="https://github.com/tc39/proposal-weakrefs" rel="noopener noreferrer">TC39弱引用提案</a>与<a href="https://github.com/WebAssembly/reference-types/blob/master/proposals/reference-types/Overview.md" rel="noopener noreferrer">引用类型提案</a>等）以完备核心功能。工作量到位自然对接平滑！这不是黑魔法，而是真金白银的血汗努力。</p>
<p>相反，<code>nodejs c-addon</code>的应用场景就要少得多了。所以，技术社区鲜有热情面向<code>N-API</code>开放接口编写功能丰富的<code>addon &lt;-&gt; js</code>垫片程序。于是，@Rustacean 不得不直面</p>
<ol>
<li>“裸奔的”原始指针</li>
<li>简陋的<a href="https://docs.rs/nj-sys/4.0.0/nj_sys/" rel="noopener noreferrer">Rust Bindings</a> —  与<code>C</code>头文件概念对等的<code>Rust</code>语言项</li>
<li>“安慰剂”式的<strong>宏</strong>编程工具。因为缺乏了<code>js</code>垫片程序的协同呼应，几个<code>Rust</code>宏也只是杯水车薪，能“糖”的内容很少。</li>
<li>转移更多精力从【业务逻辑实现】至【<code>FFI</code>编程】，并与各种<code>FFI</code>技术细节做“斗争”。赶快补课<a href="https://rustcc.cn/article?id=98adb067-30c8-4ce9-a4df-bfa5b6122c2e" rel="noopener noreferrer">内存布局理论知识</a>去吧！</li>
</ol>
<p>具体地讲，在<code>Rust - WASM</code>程序上下文中，披上了“智能指针”马甲的<code>JS</code>堆对象几乎完全“锈化”了。@Rustacean 可忽视<code>JS VM</code>垃圾收集器的干扰和：</p>
<ol>
<li><code>static</code>全局缓存<code>JS</code>堆对象。而不必担心<strong>仅</strong>活跃于<code>addon</code>的<code>JS</code>堆对象会被<code>JS VM</code>的<code>GC</code>回收。
<ul>
<li>相对<code>FFI</code>函数的<strong>单次</strong>调用执行周期，<strong>延长</strong><code>JS</code>堆对象的生命周期。</li>
</ul>
</li>
<li><code>{ .. }</code>块作用域限定<code>JS</code>堆对象，<strong>按需</strong>释放不再访问的变量值，提高内存利用效率。就有<strong>多</strong>局部变量的<strong>大</strong>函数而言，这可明显地降低<code>JS</code>堆内存占用的瞬时峰值。
<ul>
<li>相对<code>FFI</code>函数的<strong>单次</strong>调用执行周期，<strong>缩短</strong><code>JS</code>堆对象的生命周期</li>
</ul>
</li>
</ol>
<p>另一方面，<code>N-API</code>没有功能面面俱到的垫片程序。所以，@Rustacean 做不到仅凭<code>Rust</code>基本语法项就对<code>FFI</code>另一端的<code>JS</code>堆对象执行【全局缓存】或【块作用域】按需回收的程序处理。甚至（重点来了），即便<code>JS</code>端代码<strong>刻意</strong>保留了已<code>FFI</code>导出堆对象的引用，<code>addon</code>端（栈内存）所持有的原始指针依旧会，在<code>FFI</code>函数执行之后，丢失其原本指向的值和成为“野”指针。我怀疑<code>JS VM</code>就算没有回收也至少挪动了被导出<code>JS</code>堆对象的内存位置。由此，@Rustacean 需要在<code>addon</code>业务代码中额外实现部分本该由垫片程序完成的“公共服务”功能，包括但不限于：</p>
<ol>
<li>徒手维护<code>N-API</code>引用计数智能指针，以“锁住”<code>JS</code>堆对象不被<code>JS VM</code>的<code>GC</code>回收 — <strong>延长</strong><code>JS</code>堆对象的生命周期。</li>
<li>调用<code>N-API</code>程序接口构造可层叠嵌套的作用域【块】 — <strong>缩短</strong><code>JS</code>堆对象的生命周期。</li>
</ol>
<p>这的确是一次接触底层“自己动手丰衣足食”的机会，但绝对不是什么令人愉快的开发体验。千言万语汇聚一张图（左侧<code>WASM</code>，右侧<code>nodejs c-addon</code>）促成读者思绪的豁然开朗：</p>
<p><img src="https://github.com/stuartZhang/my_rs_ideas_playground/assets/13935927/f18ae535-1ae4-473d-b143-9df2eb09f46c" alt="生命周期策略对比"></p>
<h2><code>N-API JS</code>堆对象生命周期管理的技术细节</h2>
<p><code>addon</code>对<code>JS</code>堆对象生命周期的管理分为如下三种情况（看图吧，一图抵千词）：</p>
<p><img src="https://github.com/stuartZhang/my_rs_ideas_playground/assets/13935927/932b381d-a653-47b0-9fec-d9bba587b606" alt="技术细节"></p>
<p>由上图可见，真实数据被保存于<code>JS</code>端（堆）内存中。<code>Rust</code>端（栈）内存仅持有随时可能失效的原始指针。所以，@Rustacean 需要调用特定的<code>N-API</code>接口，远程操控<code>JS</code>堆对象的活跃周期。但是，<code>N-API</code>接口并不易用。这表现为...</p>
<h3><code>N-API</code>引用计数智能指针不智能</h3>
<ol>
<li>
<p>没有<a href="https://rust-unofficial.github.io/patterns/patterns/behavioural/RAII.html" rel="noopener noreferrer">RAII Guard</a>对活跃引用数量的<strong>自动</strong>跟踪。@Rustacean 还需书面编写<code>N-API</code>接口调用和<strong>人工</strong>增减引用个数跟踪引用复本数量 — 这是传统的缺陷产出“大户”。</p>
</li>
<li>
<p><strong>零</strong>引用数量<strong>不</strong>意味着<code>GC</code>回收。@Rustacean 还需显式地析构掉<code>N-API</code>【引用计数】智能指针实例，才能促使被“持久化于内存”的<code>JS</code>堆对象接受<code>GC</code>回收。否则，内存泄漏！具体作法请参见如下伪码</p>
<pre><code>use ::nj_sys::{napi_delete_reference, napi_reference_unref};
use ::node_bindgen::core::napi_call_result;
let result = Box::into_raw(Box::new(u32::MAX));
// 1. 将引用计数值减一
napi_call_result!(napi_reference_unref(
    &lt;N-API 调用上下文&gt;,
    &lt;N-API 引用计数·智能指针&gt;,
    result // 引用计数减一之后的结果数值
)).unwrap();
let result = unsafe { Box::from_raw(result) };
// 2. 判断减一后的最新引用计数值是否已经归零。
if *result == 0 { // 当且仅当不再有任何 N-API 引用复本还指向该 JS 堆对象时，
    // 3. 显式地释放引用计数智能指针实例。
    napi_call_result!(napi_delete_reference( // 这一步是必须的。要不然，内存就漏了！
        &lt;N-API 调用上下文&gt;,
        &lt;N-API 引用计数·智能指针&gt;
    )).unwrap();
}
</code></pre>
</li>
<li>
<p>只有四类<code>JS</code>堆对象支持<code>N-API</code>引用计数。它们分别是</p>
<ul>
<li><code>napi_object</code> — <code>ECMAScript</code>规范中的<code>Object</code></li>
<li><code>napi_function</code> — <code>ECMAScript</code>规范中的<code>Function</code></li>
<li><code>napi_symbol</code> — <code>ECMAScript</code>规范中的<code>Symbol</code></li>
<li><code>napi_external</code> — 类似于<code>ECMAScript</code>中的<code>Blob</code>，专门引用<strong>进程外</strong>的某种“黑盒<code>opaque</code>”资源。</li>
</ul>
</li>
<li>
<p>若多个<code>N-API</code>引用计数指针实例（注：不是引用复本）都指向同一个<code>JS</code>堆对象，那么只有当全部<code>N-API</code>引用计数指针实例都被<code>napi_delete_reference()</code>处理后，“持久化于内存”的<code>JS</code>堆对象才被允许<code>GC</code>回收。</p>
</li>
</ol>
<h3>可逃逸作用域与作用域提升不实用</h3>
<p>在上图中的（普通）作用域<code>napi_handle_scope</code>禁止其内部的<code>JS</code>堆对象溢出作用域，和向外传值。即，普通作用域是“多入无出”的。</p>
<p>【可<strong>逃逸</strong>作用域<code>napi_escapable_handle_scope</code>】有限松绑了这条限制。它允许作用域像<strong>函数</strong>一样向外输出一个且仅一个值，而输出形式不是<code>Rust</code>块表达式【返回值】，而是<code>JS</code>堆对象【作用域·提升<code>handle promoting</code>】。类比<code>JS</code>动态语言的【变量提升<code>variable hoisting</code>】,</p>
<ul>
<li>相同点：块内声明的变量可从块外引用和访问</li>
<li>不同点：【可逃逸作用域】有且只有一个块内声明的变量可从块外被访问。否则，程序崩溃。</li>
</ul>
<p>所以，可逃逸作用域是“多入单出”的面向实用有限放开。再看图吧，一图抵千词！</p>
<p><img src="https://github.com/stuartZhang/my_rs_ideas_playground/assets/13935927/449a1c82-b037-4370-8d13-dbc7fd773305" alt="可逃逸作用域"></p>
<p>在作用域层叠嵌套的场景下，这绝对是“盛产”缺陷的泥沼。@Rustacean 需要从程序设计之初就努力避免从<code>Rust</code>端远程管理<code>JS</code>变量的作用域。最好从产品架构上，<strong>多用<code>addon</code>构建【业务组件】，少封装【功能模块】，从根本上规避<code>Rust &lt;-&gt; JS</code>复杂互操作出现</strong>。</p>
<h2>智能化<code>N-API</code>引用计数 — “二段式”引用计数优化法</h2>
<p>相比于最低也需要【过程宏】作为抽象工具才能描述清楚的<code>JS</code>堆对象<strong>作用域</strong>，<code>N-API</code>引用计数智能化改造还是有捷径可走的。</p>
<p>简单地讲，将对引用复本数量变化的跟踪任务委托给遵循<code>RAII with Guard</code>设计模式的智能指针<code>std::rc::Rc&lt;napi_ref&gt;</code>处理。然后，<code>addon</code>业务实现代码仅需负责</p>
<ol>
<li>【始】调用<code>napi_create_reference()</code> 接口，构造一个<strong>单复本</strong>引用计数指针实例，锁住<code>JS</code>堆对象不被<code>GC</code>回收。</li>
<li>【末】调用<code>napi_reference_unref()</code>与<code>napi_delete_reference()</code>接口，清空引用复本与析构唯一的引用计数指针实例，解锁<code>GC</code>回收<code>JS</code>堆对象。</li>
</ol>
<p>接着看图，依旧一图抵千词！</p>
<p><img src="https://github.com/stuartZhang/my_rs_ideas_playground/assets/13935927/2b78ea18-225b-4d96-b97c-ba91947df619" alt="二段式引用计数优化法"></p>
<p>于是，整个设计方案的“难点”就聚焦于：</p>
<ol>
<li><strong>监听</strong>智能指针<code>std::rc::Rc&lt;napi_ref&gt;</code>的引用复本清空<strong>事件</strong>，并</li>
<li>在事件处理函数内，调用<code>napi_reference_unref()</code>与<code>napi_delete_reference()</code>接口通知<code>VM GC</code>回收<code>JS</code>堆对象。</li>
</ol>
<p>难点不难，因为<a href="https://rustcc.cn/article?id=a9198cb9-f16c-4e2b-b30e-6c63eed1cd52" rel="noopener noreferrer">Newtypes</a>设计模式允许 @Rustacean</p>
<ol>
<li>对<code>std::rc::Rc&lt;napi_ref&gt;</code>做<code>AOP</code>编程。以</li>
<li>“拦截+重写”<code>std::rc::Rc&lt;napi_ref&gt;</code>的析构函数<code>&lt;Rc as Drop&gt;::drop(&amp;mut self)</code>。于是，</li>
<li>在每个引用复本的析构处理后，都<strong>重新统计</strong>剩余引用复本的数量。最后，</li>
<li>若<strong>没有</strong>剩余引用复本了，就立即调用<code>N-API</code>接口<code>napi_reference_unref()</code>与<code>napi_delete_reference()</code>。</li>
</ol>
<p>文章写得再自恰也不如呈现一段既注释丰富又可独立运行的参考实现[<a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=ae0cb8d0a99d1f729d5b9dba3458f009" rel="noopener noreferrer">例程</a>]来得清晰明白。整个例程由四个部分组成：</p>
<ol>
<li>模块<code>nj_sys</code>模拟<a href="https://crates.io/crates/nj-sys" rel="noopener noreferrer">nj_sys crate</a>的部分导出项，因为<code>nj_sys crate</code>并没有入选<code>playground.org</code>的<code>top 100</code>热门依赖包<a href="https://github.com/rust-lang/rust-playground/blob/main/compiler/base/Cargo.toml" rel="noopener noreferrer">榜单</a>。</li>
<li>模块<code>napi_rc</code>包含了对智能指针<code>std::rc::Rc&lt;napi_ref&gt;</code>的<code>AOP</code>封装。</li>
<li>函数<code>napi_export_method()</code>模仿<code>nodejs c-addon</code>的<code>FFI</code>导出函数。</li>
<li>入口函数<code>main()</code>模仿<code>JS</code>程序调用<code>Rust-FFI</code>函数<code>napi_export_method()</code>。</li>
</ol>
<h3>“二段式”引用计数优化方案的裨益</h3>
<ol>
<li>【程序性能】将<code>FFI</code>调用次数减少至一个常量<code>3</code>。</li>
<li>【代码健壮性】将引用复本的数量跟踪任务从易错的人工完成转为机器自动完成。<code>addon</code>业务代码仅需关注引用复本的<strong>个数归零</strong>事件。</li>
</ol>
<h2>结束语</h2>
<p>关于<code>nodejs c-addon</code>技术方向，我这次仅准备了上述偏【编程】内容与大家分享。其实，交叉编译与动态库链接也是一项可以聊出些许深度的话题。比如，如何做到“从一个工程，一个分支，一套<code>Rust</code>程序同时编译出三版<code>.node</code>链接库文件，以分别适用于<code>nodejs / nwjs / electron</code>三款应用程序容器”的呢？。哎！无处不是“黑科技” — 从条件编译，至编译时修改链接目标。在我输出下一篇相关主题的文章前，感兴趣的读者不防率先品鉴我的另一个<code>github</code>工程<a href="https://githubfast.com/stuartZhang/request-window-attention" rel="noopener noreferrer">request-window-attention</a>寻找答案，和给我的工程点个<code>star</code>！</p>
<p>创作不易，值得（文章）点赞，（<code>github</code>工程）点<code>star</code>，和（两者都）转发。</p>
2024-03-11T22:51:08.296381566+08:00 - 文章标题：Rust与面向对象（三）
2024-03-11T22:51:08.296457473+08:00 - 文章内容：<h2>策略模式</h2>
<p>上节说到，模板方法变化一下就能成策略模式，怎么变化的？且看策略模式典型案例：</p>
<pre><code>pub trait Fly {
    fn fly(&amp;self);
}

pub trait Quack {
    fn quack($self);
}

/// 先以静多态的方式实现
/// 似 trait Fly + Quack就是Duck，只是Fly和Quack独立地变化
struct Duck&lt;F, Q&gt; 
where
    F: Fly,
    Q: Quack,
{
    fly_behabior: F,      // 单看这个成员，与模版方法如出一辙
    quack_behavior: Q,    // 一样，将不同的算法部分交给子类去实现
}

impl&lt;F, Q&gt; Duck&lt;F, Q&gt; 
where
    F: Fly,
    Q: Quack,
{
    pub fn new(fly_behavior: F, quack_behavior: Q) {
        Self { fly_behavior, quack_behavior }
    }
}

/// 实现不同的Fly、Quack策略，参考下图，省略...
/// 下图引用自 Oreilly.Head First Design Pattern
</code></pre>
<p><img src="https://pic.imgdb.cn/item/6586c5e3c458853aef85789f.jpg" alt="Duck UML设计图"></p>
<p>以上是策略模式的简单案例，策略模式可以说是模板方法的衍生变化。还记得上一章中第一种模板方法的实现方式不，单看Fly就是模板方法：模板方法里子类完全不依赖父类，干净地完成算法策略，那子类就能够依赖注入到父类中；最好这种子类不止一个，比如不仅有Fly还有Quack，就是纯正的策略组合模式了。了解这种变化可以帮助区分二者，比那说不清道不明的优缺点、适用场景描述能让你更清晰、透彻地认识到两者的差别与联系。</p>
<p>策略模式，公认的妙。上面是静多态实现的策略模式，会遇到类型爆炸的问题，比如有2种飞行方式、3种呱呱叫方式，那总共有2*3=6种复合类型，体现了组合是类型系统中的积类型。在嵌入式上，因为内存环境限制，类型爆炸导致程序大小变大成了问题，不得不改用动多态，以减少类爆炸带来的影响。</p>
<pre><code>/// 动多态，类型统一了，类型也不会爆炸了
struct DynamicDuck {
    fly_behavior: Box&lt;dyn Fly&gt;,
    quack_behavior: Box&lt;dyn Quack&gt;,
}
</code></pre>
<p>面向对象语言，都是动多态，Java对象皆引用，当引用没地方用了就垃圾回收；C++没有指针则玩不转面向对象，只可能将子类指针赋值给父类指针来多态，无法将子类对象赋值给父类对象来多态吧！所以面向对象的策略模式是动多态，天然无类型爆炸问题。</p>
<p>那类型爆炸一定差吗，类型统一就肯定好吗？先讨论下类型爆炸合理不。自然界生物划分“界门纲目科属种”，动物界有那么多动物，比如都是猫科动物，难道老虎和狮子还不配拥有个自己的类型吗，只能共用猫类型吗？要是想为老虎这个类型单独实现点东西，但不想为狮子也实现这个东西，共用猫类型就不行了！这样看起来，接受类型爆炸挺好，类型完整，也没几个类型，程序大小允许就可以，相比于动不动就异步的task、协程，只要不是大规模类型爆炸，可以忍。而类型统一就会造成一种“类型丢失”，它的不良影响发生在后续为Duck添加其它行为时，这些行为并非所有Duck都需要的时候。比如为绿头鸭实现捕猎，为橡皮鸭实现电动，它们不再是所有鸭子都应有的行为，已有点不再适合使用新策略扩展（可不是所有扩展的行为都是鸭子通用型的Swim、Display，策略模式只拣好的说），但动多态却因“类型丢失”而不知所措，这其实是个难处理的点，本质是为了减少类型爆炸而采用动多态统一类型的牺牲。</p>
<pre><code>/// 静多态可以直接别名
type MallardDuck = Duck&lt;...&gt;;
type RubberDuck = Duck&lt;...&gt;;
type DecoyDuck = Duck&lt;...&gt;;


/// 动多态因“类型丢失”，只能使用NewType，并在NewType中约束DynamicDuck。
/// 那这样，类型还是难免爆炸了啊！
struct MallardDuck(DynamicDuck);
struct RubberDuck(DynamicDuck);
struct DecoyDuck(DynamicDuck);

/// 仅为绿头鸭MallardDuck实现捕猎
impl MallardDuck {
    fn hunt(&amp;self) {
        ...
    }
}
</code></pre>
<p>动多态策略模式再往下写很可能就开始坏味道了。为了解决这个问题，各种奇招就来了，如不管三七二十一，先把捕猎行为塞进Duck中，管其它鸭子会不会错用呢；或者，为橡皮鸭RubberDuck、木头鸭WoodDuck也实现个假的捕猎，这样“捕猎”就又符合新的策略了，又能使用策略模式了；又或者，再来次继承把绿头鸭子类化吧，然后单独给绿头鸭实现捕猎。。然而新类型MallardDuck一方面与动多态复合类型的Duck意义有冲突，不得不在文档中留下一句提醒使用者：“如果想用MallardDuck，请勿使用DynamicDuck构建，而是使用更具体的MallardDuck！”；另一方面，其它类型的Duck也需要子类化吗，若是的话岂不是又免不了类型爆炸了！策略模式这时正失去优雅的光环，它还是那个妙不可言的“策略模式”吗？</p>
<p>Rust语言，则可以静多态一路走到黑，<code>Duck&lt;F, Q&gt;</code>类型当参数时一直泛型约束使用下去。这样看起来，静多态是一种挺好的应对策略模式后续变化的解决方案。Rust还有一种方式，可以终止这种“一直”，就是将有限的静多态类型通过enum和类型统一起来，然后再使用时就不必继续用泛型了，用这个enum和类型就好了。这是个好方法，但也有个弊端，enum和类型终止了模块之外的“扩展性”！在模块之外，再也无法为模块内的enum和类型扩展其它Duck实现，而动多态和一直泛型约束的静多态，则仍不失模块外的扩展性。</p>
<p>策略模式还有个问题，值得探讨，Duck也会飞，也会呱呱叫了，那有没有必要为Duck也实现Fly、Quack特型呢？</p>
<pre><code>/// 有没有必要为Duck实现Fly/Quack trait？
impl&lt;F, Q&gt; Fly for Duck&lt;F, Q&gt; 
where
    F: Fly,
    Q: Quack,
{
    fn fly(&amp;self) {
        self.fly_behavior.fly();
    }
}

impl&lt;F, Q&gt; Quack for Duck&lt;F, Q&gt;
where
    F: Fly,
    Q: Quack,
{
    fn quack(&amp;self) {
        self.quack_behavior.quack();
    }
}
</code></pre>
<p>这是个令人迷惑的选项，个人很讨厌这种“都可以”的选项，让人迟迟下不了决策。很多人从“应该不应该”的角度出发，会得到“应该”的答案，Duck应该会飞，所以为Duck实现了Fly特型，后面就可以用Fly来特型约束了。其实，若实现了，就像是另外一个设计模式——装饰器模式了。但我不建议普通的策略模式这样实现，将Fly和Quack组合起来的Duck，不再是飞行策略实现的一种变体，要是RubberDuck也能因满足Fly特型约束，再次充当Duck自己的“翅膀”F，组合成一个新Duck，那这是什么Duck？闹笑话了，一向以“严格”著称的Rust可不喜欢这样做。看起来Duck会飞，和飞行策略的Fly特型有所不同，读者可自行感受，那如何约束Duck，让别人知道Duck也是可飞行的一个类型呢？可以使用AsRef，让鸭子实现<code>AsRef&lt;F: Fly&gt;</code>，意为“Duck拥有飞行的策略”，鸭子自然也会飞，能做所有会飞的类型可以做的事情。</p>
<pre><code>fn fly_to_do_sth&lt;T, F&gt;(fly_animal: &amp;mut T) 
where
    T: AsRef&lt;F&gt;,
    F: Fly,
{
    // Duck也可以作为fly_animal来执行此函数了
}
</code></pre>
<p>注意，这里AsRef跟Deref的区别。AsRef可以实现多次，到不同类型的借用转换，比如Duck同时AsRef&lt;F: Fly&gt;和AsRef&lt;Q: Quack&gt;；而Deref只能实现一次到一个主Target的类型转换，而Fly和Quack无论哪个行为，明显都不足以让Duck为其实现Deref，它的父类动物结构，才值得Duck使用Deref。</p>
<h2>小结</h2>
<p>初识策略模式时，觉得妙不可言，但它其实没提策略模式那逐渐不可控的后续演化，源于为策略模式的复合类型Duck扩展行为时，并非所有Duck都该有这些扩展行为了，它们很可能是某些鸭子独有的，主要原因是动多态造成了“类型丢失”，而解决办法还没法令人满意！因此，策略模式适合后续不再演化的场景。能应对后续演化的，还得是类型完整的静多态思路。</p>
<p>编程的一大挑战就是为了应对变化，开发者知道的招式变化越多，应对的就越从容，使用看起来正确实际上却会逐渐失控的招式，只会味道越来越坏。变化就是“可扩展性”，谈到“可扩展性”，面向对象说这个我熟，“可扩展性”就是面向对象的目标之一啊！先别轻信，完美应对变化可不容易，即便资深的面向对象专家，都不敢说他写的每个东西都真能满足“单一职责”。。单一职责的足够“原子化”吗？面向对象思想有个老毛病，就是不够具体，让人抓不到，又让人以为抓到了，实际上是面向对象规定的东西，包括它的评论、解释大都泛泛而谈，没有一个度，很难意见统一。</p>
<p>（强调一下：因每个人理解层次不同，这一系列文章无意引战，也不想批评C++，只要C++想，就能实现Rust一样的效果，毕竟现代C++无所不能的。面向对象有些问题值得指出、批评，但个人还是认可面向对象的结构之美。这些文章，仅供大家友好交流Rust和面向对象技术，若有迁移一个面向对象项目到Rust重新实现的需求，那可能会有帮助，欢迎大家友好讨论！）</p>
<p>（原创不易，请在征得作者同意后再搬运，并注明出处！）</p>
2024-03-11T22:51:08.305482243+08:00 - Atom
2024-03-11T22:51:08.305533211+08:00 - 文章标题：How Tokio schedule tasks: A hard Lesson learnt
2024-03-11T22:51:08.305711591+08:00 - 文章内容：<p><code>Future</code>s, representing an asynchronous computation task, are the basis for implementing asynchronous tasks in Rust. Unlike other languages, the computation does not automatically execute in the background, it needs to actively call its <code>poll</code> method. Tokio is the most widely used asynchronous runtime in the community. It uses various tips internally to ensure that <code>Future</code>s are scheduled and executed fairly and timely. However, since the execution of a <code>Future</code> is cooperative, starvation can inevitably occur in some scenarios.</p>
<p>This article will analyze a problem I encountered while developing CeresDB and discuss issues that may arise with Tokio scheduling. Please point out any inadequacies as my knowledge is limited.</p>
<h1 id="background" class="toc-item group scroll-mt-20">
    Background
    <a href="#background" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><a href="https://github.com/CeresDB/ceresdb">CeresDB</a> is a high-performance time series database designed for cloud-native. The storage engine uses an LSM-like architecture where data is first written to memtable, and when some threshold is reached, it is flushed to the underlying storage(e.g. S3). To prevent too many small files, there is also a background thread that does compaction.</p>
<p>In production, I found a strange problem. Whenever compaction requests increased for a table, the flush time would spike even though flush and compaction run in different thread pools and have no direct relationship. Why did they affect each other?</p>
<h1 id="analysis" class="toc-item group scroll-mt-20">
    Analysis
    <a href="#analysis" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>To investigate the root cause, we need to understand Tokio’s task scheduling mechanism. Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications, users submit tasks via <code>spawn</code>, then Tokio’s scheduler decides how to execute them, most of time using a multi-threaded scheduler.</p>
<p>Multi-threaded scheduler dispatches tasks to a fixed thread pool, each worker thread has a local run queue to save pending tasks. When starts, each worker thread will enter a loop to sequentially fetch and execute tasks in its run queue. Without a strategy, this scheduling can easily become imbalanced. Tokio uses work stealing to address this - when a worker’s run queue is empty, it tries to “steal” tasks from other workers’ queues to execute.</p>
<p>In the above, a task is the minimum scheduling unit, corresponding to <code>await</code> in our code. Tokio can only reschedule on reaching an await, since future execution is a state machine like below:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">async </span><span style="color:#fa6e32;">move </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">  fut_one</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">  fut_two</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>This async block is transformed to something below when get executed:</p>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;">// The `Future` type generated by our `async { ... }` block
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">AsyncFuture </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    fut_one</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FutOne,
</span><span style="color:#61676c;">    fut_two</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FutTwo,
</span><span style="color:#61676c;">    state</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> State,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="font-style:italic;color:#abb0b6;">// List of states our `async` block can be in
</span><span style="color:#fa6e32;">enum </span><span style="color:#399ee6;">State </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    AwaitingFutOne</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    AwaitingFutTwo</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    Done</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Future </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">AsyncFuture </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">type </span><span style="color:#399ee6;">Output </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">poll</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">: Pin&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut Self</span><span style="color:#61676c;">&gt;, </span><span style="color:#ff8f40;">cx</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">Context&lt;&#39;</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Poll&lt;()&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">loop </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">state {
</span><span style="color:#61676c;">                State</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">AwaitingFutOne </span><span style="color:#ed9366;">=&gt; </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">fut_one</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">poll</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">..</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">                    Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ready(()) </span><span style="color:#ed9366;">=&gt; </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">state </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">State</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">AwaitingFutTwo</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">                    Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Pending </span><span style="color:#ed9366;">=&gt; </span><span style="color:#fa6e32;">return </span><span style="color:#61676c;">Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Pending</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">                }
</span><span style="color:#61676c;">                State</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">AwaitingFutTwo </span><span style="color:#ed9366;">=&gt; </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">fut_two</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">poll</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">..</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">                    Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ready(()) </span><span style="color:#ed9366;">=&gt; </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">state </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">State</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Done</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">                    Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Pending </span><span style="color:#ed9366;">=&gt; </span><span style="color:#fa6e32;">return </span><span style="color:#61676c;">Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Pending</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">                }
</span><span style="color:#61676c;">                State</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Done </span><span style="color:#ed9366;">=&gt; </span><span style="color:#fa6e32;">return </span><span style="color:#61676c;">Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ready(())</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>When we call <code>AsyncFuture.await</code>, <code>AsyncFuture::poll</code> get executed. We can see that control flow returns to the worker thread only on state transitions (Pending or Ready). If <code>fut_one.poll()</code> contains blocking API, the worker thread will be stuck on that task. Tasks on that worker’s run queue are likely to not be scheduled timely despite work stealing. Let me explain this in more details:</p>
<p><img src="/static/issue-4/ceresdb-task1.png" alt="Figure 1" title="" loading="lazy">
<img src="/static/issue-4/ceresdb-task2.png" alt="Figure 2" title="" loading="lazy"></p>
<p>In the above figure, there are four tasks:</p>
<ul>
<li>Task0, Task1 are hybrid, which contain both IO and CPU work</li>
<li>Task2 and Task3 are purely CPU-bound tasks</li>
</ul>
<p>The different execution strategy will lead to different time consumptions of the tasks.</p>
<ul>
<li>In Figure 1, CPU and IO tasks are mixed in one thread, Task0 and Task1 will take 35ms in the worst case.</li>
<li>In Figure 2, CPU and IO tasks are separated and executed in two runtimes, in this case, Task0 and Task1 both take 20ms.</li>
</ul>
<p>Therefore, it is generally recommended to use <code>spawn_blocking</code> to execute tasks that may take a long time to execute in Tokio, so that the worker thread can gain control as quickly as possible.</p>
<p>With the above knowledge in mind, let’s try to analyze the question posed at the beginning of this article. The specifics of the flush and merge operations can be expressed in the following pseudo-code:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">flush</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">  </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> input </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> memtable</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">scan</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">  </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> processed </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">expensive_cpu_task</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">  </span><span style="color:#f07171;">write_to_s3</span><span style="color:#61676c;">(processed)</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">compact</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">  </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> input </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">read_from_s3</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">  </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> processed </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">expensive_cpu_task</span><span style="color:#61676c;">(input)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">  </span><span style="color:#f07171;">write_to_s3</span><span style="color:#61676c;">(processed)</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">runtime1</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">block_on</span><span style="color:#61676c;">(flush)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">runtime2</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">block_on</span><span style="color:#61676c;">(compact)</span><span style="color:#61676ccc;">;
</span></pre>
<p>As we can see, both flush and compact have the above issue - <code>expensive_cpu_task</code> can block the worker thread, affecting s3 read/write times. The s3 client uses <a href="https://docs.rs/object_store/latest/object_store/">object_store</a> which uses <a href="https://docs.rs/reqwest/latest/reqwest/">reqwest</a> for HTTP.</p>
<p>If flush and compact run in the same runtime, there is no further explanation needed. But how do they affect each other when running in different runtimes? I wrote a <a href="https://github.com/jiacai2050/tokio-debug">minimal program</a> to reproduce this.</p>
<p>This program has two runtimes, one for IO and one for CPU scenarios. All requests should take only 50ms but actual time is longer due to blocking API used in the CPU scenario. IO has no blocking so should cost around 50ms, but some tasks, especially <code>io-5</code> and <code>io-6</code>, their cost are roughly 1s:</p>
<pre style="background-color:#fafafa;">
<span style="color:#f29718;">[2023-08-06T02:58:49.679Z</span><span style="color:#61676c;"> INFO  foo] io-5 begin
</span><span style="color:#f29718;">[2023-08-06T02:58:49.871Z</span><span style="color:#61676c;"> TRACE reqwest::connect::verbose] 93ec0822 write (vectored)</span><span style="color:#f07171;">:</span><span style="color:#61676c;"> b</span><span style="color:#86b300;">&quot;GET /io-5 HTTP/1.1\r\naccept: */*\r\nhost: 127.0.0.1:8080\r\n\r\n&quot;
</span><span style="color:#f29718;">[2023-08-06T02:58:50.694Z</span><span style="color:#61676c;"> TRACE reqwest::connect::verbose] 93ec0822 read: b</span><span style="color:#86b300;">&quot;HTTP/1.1 200 OK\r\nDate: Sun, 06 Aug 2023 02:58:49 GMT\r\nContent-Length: 14\r\nContent-Type: text/plain; charset=utf-8\r\n\r\nHello, </span><span style="color:#4cbf99;">\&quot;</span><span style="color:#86b300;">/io-5</span><span style="color:#4cbf99;">\&quot;</span><span style="color:#86b300;">&quot;
</span><span style="color:#f29718;">[2023-08-06T02:58:50.694Z</span><span style="color:#61676c;"> INFO  foo] io-5 cost:1.015695346s
</span></pre>
<p>The above log shows <code>io-5</code> already took 192ms before the HTTP request, and cost 823ms from request to response, which should only be 50ms. It seems like the connection pool in <code>reqwest</code> have some weird issues, that’s the IO thread is waiting for connections held by the CPU thread, increasing cost of IO task. Setting <code>pool_max_idle_per_host</code> to 0 to disable connection reuse solve the problem.</p>
<p>I filed this issue <a href="https://github.com/seanmonstar/reqwest/discussions/1935">here</a>, but haven’t get any answers yet, so the root cause here is still unclear. However I gain better understand how Tokio schedule tasks, it’s kind of like Node.js, we should never block schedule thread. In CeresDB we fix it by adding a dedicated runtime to isolate CPU and IO tasks instead of disabling the pool, see <a href="https://github.com/CeresDB/ceresdb/pull/907/files">here</a> if curious.</p>
<h1 id="summary" class="toc-item group scroll-mt-20">
    Summary
    <a href="#summary" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Through a CeresDB production issue, this post explains Tokio scheduling in simple terms. Real situations are of course more complex, users need to analyze carefully how async code gets scheduled before finding a solution. Also, Tokio makes many detailed optimizations for lowest possible latency, interested readers can learn more from links below:</p>
<ul>
<li><a href="https://tokio.rs/blog/2019-10-scheduler">Making the Tokio scheduler 10x faster</a></li>
<li><a href="https://github.com/tokio-rs/tokio/issues/4730">One bad task can halt all executor progress forever #4730</a></li>
<li><a href="https://www.influxdata.com/blog/using-rustlangs-async-tokio-runtime-for-cpu-bound-tasks/">Using Rustlang’s Async Tokio Runtime for CPU-Bound Tasks</a></li>
</ul>
<p>Finally, I hope readers can realize potential issues when using Tokio. As a rule of thumb, try to isolate blocking tasks to minimize impact on IO tasks.</p>
2024-03-11T22:51:08.305761800+08:00 - 文章标题：A Brief Discussion on Invariants in Rust: Essential Properties to Uphold
2024-03-11T22:51:08.315441908+08:00 - 文章内容：<p>Whenever we discuss “unsafe” in Rust, the concept of “invariant” is never far behind. In the context of Rust, it generally refers to the properties that need to be upheld. For instance:</p>
<ul>
<li>Given a <code>x: bool</code>, there is an invariant: <code>x</code> can only be <code>true</code> or <code>false</code>.</li>
<li>Given a <code>p: Pin&lt;Box&lt;T&gt;&gt;</code>, one of the invariants is that the memory pointed to by <code>p</code> will not move (where <code>T: !Unpin</code>).</li>
<li><code>unsafe fn read&lt;T&gt;(src: *const T) -&gt; T</code>, one of the invariants here is that <code>src</code> points to a fully initialized value.</li>
</ul>
<p>Rust contains various types of invariants, with most of them being upheld by the type checker, while some require manual verification to ensure.</p>
<h1 id="classification-of-invariants" class="toc-item group scroll-mt-20">
    Classification of Invariants
    <a href="#classification-of-invariants" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>We can roughly categorize the invariants in Rust into two types: <strong>language-level invariants</strong> and <strong>library-level invariants</strong>.</p>
<h2 id="language-level-invariants" class="toc-item group scroll-mt-20">
    Language-level invariants
    <a href="#language-level-invariants" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p><strong>Language-level invariants, also known as validity</strong>, play a crucial role in Rust. These invariants guide the compiler to generate correct code and optimize it effectively. One typical example of optimization using invariants is niche optimization. For instance, the size of <code>Option&lt;&amp;T&gt;</code> is optimized to be the size of a pointer. This optimization relies on the invariant that <code>&amp;T</code> is non-null. This allows representing <code>None</code> using a null value, thus compressing the type’s size. It’s worth noting that additional optimizations can be performed here. When <code>T</code> doesn’t contain <code>UnsafeCell</code>, an invariant of <code>&amp;T</code> is that the value it points to is immutable. Therefore, we can inform LLVM that the <code>&amp;T</code> pointer is readonly, enabling LLVM to optimize based on this information.</p>
<p>However, violating language-level invariants leads to <strong>fatal</strong> consequences known as Undefined Behavior (UB). The compiler no longer guarantees any behavior of the program (or even that the output will be an executable file). For example, as mentioned earlier, forcibly casting values other than <code>true</code> and <code>false</code>, like <code>2</code>, to a <code>bool</code> will result in undefined behavior. Similarly, reading an uninitialized value also constitutes undefined behavior. <a href="https://doc.rust-lang.org/stable/reference/behavior-considered-undefined.html#behavior-considered-undefined">Here</a> is a list of some clearly defined instances of UB. Violating language invariants can lead to these UB scenarios (but not limited to this list). These invariants are <strong>mandatory</strong> to adhere to.</p>
<p>However, due to compiler errors, there can also be instances where these invariants are unintentionally violated, causing the failure of business logic that depends on them. This falls into the category of compiler bugs.</p>
<h2 id="library-level-invariants" class="toc-item group scroll-mt-20">
    Library-level invariants
    <a href="#library-level-invariants" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p><strong>Library/Interface-level invariants, also known as safety</strong>, are usually defined by the authors of libraries. For example, specifying an invariant that values of the <code>struct Even(u64)</code> must be even numbers allows the use of this property directly in business logic.</p>
<p>For the author of <code>Even</code>, they can provide an interface like this (assuming this library only offers these few interfaces):</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl </span><span style="color:#399ee6;">Even </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Returns Some when n is even
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Returns None when n is not even
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">new</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">n</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">u64</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if</span><span style="color:#61676c;"> n </span><span style="color:#ed9366;">% </span><span style="color:#ff8f40;">2 </span><span style="color:#ed9366;">== </span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">(n))
</span><span style="color:#61676c;">        } </span><span style="color:#fa6e32;">else </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">None
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// n must be even
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">unchecked_new</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">n</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">u64</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">(n)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Returns a value that is even
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">as_u64</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">u64 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">&amp;</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>For the interface <code>Even::new</code>, the invariant is guaranteed by the author of <code>Even</code>; for <code>Even::unchecked_new</code>, the invariant is guaranteed by the caller. Compared to language-level invariants, this invariant is much more “gentle” - breaking this invariant will not necessarily result in UB <em>within this library</em> (but still lead to unexpected behavior in the program).</p>
<p>The invariant of <code>Pin</code> is also a very typical library-level invariant. Generally, the “non-movable” invariant of <code>Pin&lt;P&gt;</code> is guaranteed by the author of <code>Pin&lt;P&gt;</code>. For example, all the interfaces provided by <code>Pin&lt;Box&lt;T&gt;&gt;</code> prevent moving the value it points to, and users don’t need to worry about accidentally breaking this invariant with incorrect operations (assuming it’s within safe Rust and guaranteed by the type system). However, breaking the <code>Pin</code> invariant might not immediately result in UB; instead, UB might occur in subsequent usage (e.g., accessing memory that a reference within a self-referential structure still points to after the structure has been moved).</p>
<p>In Rust, the majority of invariants are library/interface-level invariants. Examples include “a <code>str</code> must be encoded in UTF-8,” “Send and Sync” constraints, and various IO-safety properties introduced later on, all falling under this category of invariants.</p>
<h1 id="typed-proofs-of-invariants" class="toc-item group scroll-mt-20">
    Typed Proofs of Invariants
    <a href="#typed-proofs-of-invariants" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Humans are prone to making mistakes, and we can’t rely solely on humans to ensure that invariants aren’t violated. So, do we have a solution for automatically checking whether invariants are violated? Yes, Rust provides a powerful type system that can enforce various kinds of invariants based on its type rules.</p>
<p>For example, according to the borrowing rules of the type system, the scope of a reference’s borrowing must be within the scope of the original value. This ensures that <code>&amp;T</code> references are always valid:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> p</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> s </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from(</span><span style="color:#86b300;">&quot;123&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    p </span><span style="color:#ed9366;">= &amp;</span><span style="color:#61676c;">s</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="font-style:italic;color:#abb0b6;">// Compilation error because the lifetime of `p` outlives the scope of `s`
</span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{p:?}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span></pre>
<p>During compilation, type checks are performed, and when code doesn’t satisfy the type rules, the compiler treats it as an illegal program and disallows compilation. Using type rules to ensure various invariants in programs is the part of Rust that is known as “safe Rust.”</p>
<p>Rust adheres to a crucial principle: <strong>Under safe Rust, the invariants of all publicly exposed interfaces in a library are not violated.</strong> This principle is known as soundness. For instance, the earlier example of <code>Even</code> is not sound because it provides the <code>Even::unchecked_new</code> interface, which can break the invariant of <code>Even</code> under type checking. However, without providing this interface, the library becomes sound, as you cannot construct a non-even <code>Even</code> value due to the support of the type system, thereby maintaining the invariant.</p>
<p>Of course, some libraries strictly adhere to this principle, like the standard library. In fact, if we use only the std library, we can go a step further and say that <strong>under safe Rust, Undefined Behavior (UB) won’t occur</strong>. Many languages have type systems, but not all of them offer such strong guarantees. For instance, in C++, a small mistake like writing an infinite loop can result in UB.</p>
<p><img src="/static/issue-4/cpp-loop-ub.jpg" alt="cpp loop ub" title="" loading="lazy"></p>
<p>Moreover, invariants are not just the responsibility of the programmer; they are a collective effort that all parties must strive to uphold. Whoever violates an invariant is at fault, and it’s crucial to determine who bears the responsibility. Rust’s module system, also known as crates, plays a crucial role in this regard by <strong>preventing external parties from undermining the invariants guaranteed within a library</strong>.</p>
<p>This rule is known as the <strong>coherence rules</strong>, which <strong>forbid implementing third-party traits for third-party types</strong>. For example, let’s consider a library that implements a pointer type <code>Ptr&lt;T&gt;</code> with the following methods:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Deref </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">Ptr</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">type </span><span style="color:#399ee6;">Target </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> T</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// ...
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Ptr</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Since `DerefMut` is not implemented, `Pin&lt;Ptr&lt;T&gt;&gt;` has no method to move `T`
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">pin</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">t</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> T) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Pin&lt;Ptr&lt;T&gt;&gt; { </span><span style="color:#ed9366;">... </span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">new</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">t</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> T) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Ptr&lt;T&gt; { </span><span style="color:#ed9366;">... </span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Can access `&amp;mut T` before being `Pin`ned
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">borrow_mut</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> T { </span><span style="color:#ed9366;">... </span><span style="color:#61676c;">}
</span><span style="color:#61676c;">}
</span></pre>
<p>Without coherence rules, we could implement <code>DerefMut</code> for <code>Ptr</code> and break the invariant of <code>Pin</code> (which was initially guaranteed within the library):</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl </span><span style="color:#61676c;">DerefMut </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">Ptr</span><span style="color:#61676c;">&lt;Unmovable&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">deref_mut</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> Unmovable {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> tmp </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(Unmovable)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// Moved Unmovable out
</span><span style="color:#61676c;">        </span><span style="color:#f07171;">swap</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">borrow_mut</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> tmp)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">leak(tmp)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> unmovable </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Unmovable</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new()</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> ptr</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Pin&lt;Ptr&lt;Unmovable&gt;&gt; </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Ptr</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">pin(unmovable)</span><span style="color:#61676ccc;">;
</span><span style="font-style:italic;color:#abb0b6;">// Calling Pin::as_mut() invokes Ptr::deref_mut(), moving unmovable
</span><span style="font-style:italic;color:#abb0b6;">// Breaking the `Pin` invariant, unsoundness!
</span><span style="font-style:italic;color:#abb0b6;">// This vulnerability could lead to UB.
</span><span style="color:#61676c;">ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_mut</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span></pre>
<p>In fact, a similar issue with <code>Pin</code> once occurred in the standard library… (<code>&amp;T</code>, <code>&amp;mut T</code>, <code>Box&lt;T&gt;</code>, <code>Pin&lt;P&gt;</code> can all violate coherence rules, enabling the creation of such vulnerabilities, <del>but this has been addressed in subsequent fixes</del> <a href="https://github.com/rust-lang/rust/issues/85099">NOT YET</a>).</p>
<p>Due to the coherence rules, you cannot do this anymore. If your invariant is guaranteed locally, third parties cannot undermine it. As a result, in Rust, responsibility can be strictly divided: if a bug arises from normal usage, it’s the library author’s fault, as normal usage should not be able to break the library’s internal invariants.</p>
<p>(However, I’m curious about how languages like Haskell and Swift, which allow implementing third-party type classes or protocols for third-party libraries, ensure that their libraries aren’t affected by downstream or other third-party libraries.)</p>
<h1 id="relationship-between-invariants-and-unsafe" class="toc-item group scroll-mt-20">
    Relationship between Invariants and <code>unsafe</code>
    <a href="#relationship-between-invariants-and-unsafe" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>However, Rust’s type system is not all-powerful. There are some invariants that cannot be proven by the type system, and this includes certain forms of validity (language-level invariants). These invariants need to be guaranteed by the programmers themselves. While other invariant violations might lead to minor consequences, validity issues are much more critical; they can cause catastrophic failures. To address these situations, Rust introduced the <code>unsafe</code> keyword to deal with matters related to validity.</p>
<ul>
<li><code>unsafe fn</code>: Indicates that an interface has certain invariants that, if not upheld by the caller, might break validity and result in Undefined Behavior (UB). These invariants can be treated as <strong>axioms</strong> directly used in the implementation of the interface.</li>
<li><code>unsafe {}</code>: Asserts that the internal invariants have been adhered to. Rust <strong>completely</strong> trusts the promises made by the programmer.</li>
<li><code>unsafe trait</code>/<code>unsafe impl</code> are similar.</li>
</ul>
<p>Thus, Rust is divided into two parts by <code>unsafe</code>: safe Rust, where the type system proves guarantees (and compiler takes responsibility for any issues), and unsafe Rust, where programmers need to prove safety themselves (and they take responsibility for any issues).</p>
<p>Determining which interfaces (<code>fn</code> and <code>trait</code>) should be marked as <code>unsafe</code> is quite restrained in Rust; not all invariants that the type system cannot prove should be marked as such. <strong>Only invariants related to validity and FFI should be marked as unsafe</strong>, and marking them should be done sparingly. For instance, <code>UnwindSafe</code> is not marked as unsafe because within the standard library, nothing can cause UB due to lack of unwinding, and when using the standard library without any unsafe constructs, UB does not arise.</p>
<p>FFI is a peculiar case. It differs from validity in that its correctness cannot be ensured by Rust’s compiler because Rust lacks information about the other side of the FFI boundary. However, the other side of FFI can do anything, so theoretically, performing FFI is never safe. In such cases, programmers must understand the consequences of FFI, and <code>unsafe { call_ffi() }</code> implies, “I am aware of the consequences of invoking FFI and am willing to accept all the impacts it brings.”</p>
<p>Apart from what should be marked as <code>unsafe</code>, strict review of the contents of <code>unsafe</code> is also essential.</p>
<p>Firstly, check the invariants corresponding to <code>unsafe</code> on the interfaces. For instance, are the invariants sufficient (do they guarantee safety)? Are there any conflicting invariants (e.g., <code>x: u64</code> but also requiring <code>x &lt; 0</code>, which cannot be achieved)?</p>
<p>Then, rigorously verify if the conditions within <code>unsafe {}</code>/<code>unsafe impl</code> are met. Some things cannot be relied upon, those invariants that haven’t been proven and aren’t marked as <code>unsafe</code>, such as:</p>
<ul>
<li>The previous example of <code>Even</code>, which claims to represent even numbers</li>
<li>What an unknown <code>T: UnwindSafe</code> “claims” about being unwindsafe</li>
<li>What an unknown <code>T: Ord</code> “claims” about total ordering</li>
</ul>
<p>These can all be violated under safe conditions, but we can’t hold anyone accountable under safe conditions. (Again, I feel that these should be called hints rather than invariants, as nobody is responsible for them; just like the earlier definition of <code>Even</code>.)</p>
<p>A general rule for safe usage is to rely on:</p>
<ul>
<li>Properties of <strong>concrete types</strong>. For example, <code>u64: Ord</code> ensures total ordering, which you can guarantee. Here, concrete types act as a white box, and you know all their properties.</li>
<li>Invariants declared through <code>unsafe</code>.</li>
</ul>
<p>Humans are fallible. So, how can we check if we violate validity? There are tools available, although they are limited. Currently, you can use MIRI (a Rust interpreter, essentially representing standard Rust behavior) to run your Rust programs (limited to pure Rust code). MIRI maintains the state of all correct Rust behaviors. When your program triggers UB, MIRI reports an error. However, there are limitations; MIRI can only tell you that UB occurred, not which invariant was violated to cause the UB. Moreover, MIRI cannot exhaustively cover all scenarios, and even if it does, it cannot prove that the provided interfaces are sound. (Similar to testing.)</p>
<p>There are also some limited formal verification tools available, such as <a href="https://flux-rs.github.io/flux/index.html">flux</a>, but I won’t delve into that here.</p>
<p><code>unsafe</code> is a distinctive feature of Rust. Without <code>unsafe</code>, achieving complete safety leads to these scenarios:</p>
<ol>
<li>All validity could be proven using types - requiring an incredibly powerful type system (even for simple tasks), leading to an overly complex type system with heavy cognitive load for users and challenges in proving the reliability of the type system. Additionally, it might hit theoretical limits where some things are undecidable.</li>
<li>All validity could be checked dynamically at runtime, or UB could be eliminated at runtime - introducing inevitable overhead in various places, making it hard to achieve optimal performance. It might even limit users from performing low-level operations, requiring explicit checks every time (similar to Haskell’s inability to define arrays using the language’s own syntax, relying on runtime or FFI).</li>
</ol>
<h1 id="a-few-more-points-to-add" class="toc-item group scroll-mt-20">
    A Few More Points to Add
    <a href="#a-few-more-points-to-add" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<ol>
<li>Rust’s type system has not yet been proven to be entirely reliable. This implies that there might be <a href="https://github.com/rust-lang/rust/issues/25860">inconsistencies</a> and contradictions in certain rules. Consequently, at this stage, proofs of invariants might not always be dependable.</li>
<li>The soundness of Rust’s standard library has also not been fully established. This means that certain interface invariants within the standard library might still be susceptible to violation.</li>
<li>The vast majority of third-party libraries in Rust have not been verified for soundness, especially those that internally employ <code>unsafe</code> constructs.</li>
<li>Rust’s compiler is also capable of inadvertently breaking invariants through incorrect optimizations, potentially allowing us to create a <a href="https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2021&amp;gist=2179a4f4567edd276818c7869aac7e60">Segmentation fault</a> in safe Rust.</li>
<li>The platform on which a Rust program runs can also undermine invariants. For example, <code>proc/self/mem</code> can disrupt memory-exclusive invariants by altering memory. However, from a practical standpoint, Rust accommodates such corner cases.</li>
</ol>
<p>In the future, points 1 and 2 might see resolution, but 3, 4, and 5 appear to be inevitable challenges. This indicates that Rust’s safety has limitations; critical aspects still rely on human judgment, although humans remain fallible. This reminds me of Linus Torvalds’ quote about safety:</p>
<blockquote>
<p>So?</p>
<p>You had a bug. Shit happens.“</p>
</blockquote>
<p>However, even with that said, Rust’s emphasis on safety still holds statistical significance in its favor. Moreover, the clear allocation of responsibility when problems arise adds meaningful accountability to the equation.</p>
<h1 id="references" class="toc-item group scroll-mt-20">
    References
    <a href="#references" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<ul>
<li><a href="https://github.com/rust-lang/unsafe-code-guidelines/issues/428">https://github.com/rust-lang/unsafe-code-guidelines/issues/428</a></li>
<li><a href="https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html">https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html</a></li>
<li><a href="https://doc.rust-lang.org/stable/std/os/unix/io/index.html#procselfmem-and-similar-os-features">https://doc.rust-lang.org/stable/std/os/unix/io/index.html#procselfmem-and-similar-os-features</a></li>
</ul>
2024-03-11T22:51:08.315560750+08:00 - 文章标题：Interview with @jhpratt
2024-03-11T22:51:08.315730548+08:00 - 文章内容：<p>Today, we are glad to announce our latest interview with <strong>Jacob Pratt</strong>, the core maintainer of the <a href="https://crates.io/crates/time">time</a> crate and a contributor to the Rust compiler and standard library. We are grateful for Jacob’s time and expertise, and we look forward to sharing his insights with you and hope you enjoy our interview with <strong>Jacob Pratt</strong>.</p>
<h1 id="introduction" class="toc-item group scroll-mt-20">
    Introduction
    <a href="#introduction" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>Introduce yourself and share a bit about your background with Rust. When did you start learning Rust, and what inspired you to do so?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/jhpratt.png"/>
            <div class="text-lg font-bold">Jacob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Hello! For those that don’t know me, I am <strong>Jacob Pratt</strong> (GitHub <a href="https://github.com/jhpratt">@jhpratt</a>). I’ve been maintaining the <code>time</code> crate and contributing to <code>rustc</code> and <code>std</code> for a few years now. To the best of my recollection, I’ve been using Rust since October 2016, though I had played around with it somewhat before then. At that time, I was working on a backend for a website in JavaScript, but could not convince myself that a non-admin user would not be able to access the admin endpoints. This is because JavaScript is weakly typed, so any effort to verify this would have taken significant work. I had heard of this relatively new language “Rust”, and decided to check it out. As Rust is strongly typed, my concerns were immediately alleviated, as I could simply require an instance of an admin user as a parameter. As a nice bonus, the backend got significantly faster in the rewrite!</p>
<p>In the nearly seven years since I started using Rust, I have written an immense amount of code in it. A large part of this is maintenance of <code>time</code> and contributing to the Rust compiler and standard library.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="time-crate" class="toc-item group scroll-mt-20">
    <code>time</code> crate
    <a href="#time-crate" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>How did you get involved with the <code>time</code> crate, and what has your experience been like as a core maintainer?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/jhpratt.png"/>
            <div class="text-lg font-bold">Jacob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Odd as it may seem for such a popular crate, I just asked. <code>time</code> was officially deprecated when I took it over, so the people with publishing permission and GitHub access were willing to hand it over once I had written sufficient code (so as to avoid malicious intent).</p>
<p>My experience as a maintainer has been largely positive. Of course it’s impossible to please everyone, but I believe that on the whole I have written a solid crate that is widely used without much issue.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>What are the differences between <code>chrono</code> and <code>time</code> crate? Can you offer any advice to help users choose which crate to use for their specific needs?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/jhpratt.png"/>
            <div class="text-lg font-bold">Jacob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Overall, <a href="https://crates.io/crates/time"><code>time</code></a> and <a href="https://crates.io/crates/chrono"><code>chrono</code></a> provide a generally similar API. For the best comparison, I honestly suggest that people just try them to see which one they like more. However, I’ll try to give a relatively simple overview.</p>
<p><code>time</code> has three core types: <a href="https://docs.rs/time/latest/time/struct.Date.html"><code>Date</code></a>, <a href="https://docs.rs/time/latest/time/struct.Time.html"><code>Time</code></a>, and <a href="https://docs.rs/time/latest/time/struct.UtcOffset.html"><code>UtcOffset</code></a>. These can be combined to form a <a href="https://docs.rs/time/latest/time/struct.PrimitiveDateTime.html"><code>PrimitiveDateTime</code></a> (consisting of a <code>Date</code> and <code>Time</code>) or an <a href="https://docs.rs/time/latest/time/struct.OffsetDateTime.html"><code>OffsetDateTime</code></a> (consisting of all three). <code>chrono</code> is similar in having <a href="https://docs.rs/chrono/latest/chrono/naive/struct.NaiveDate.html"><code>NaiveDate</code></a>, <a href="https://docs.rs/chrono/latest/chrono/naive/struct.NaiveTime.html"><code>NaiveTime</code></a>, <a href="https://docs.rs/chrono/latest/chrono/offset/struct.FixedOffset.html"><code>FixedOffset</code></a>, <a href="https://docs.rs/chrono/latest/chrono/naive/struct.NaiveDateTime.html"><code>NaiveDateTime</code></a>, and <a href="https://docs.rs/chrono/latest/chrono/struct.DateTime.html"><code>DateTime</code></a>, respectively. A quick check shows that the sizes of all types are the same, with the exception of <code>UtcOffset</code>, which is three bytes to four for <code>FixedOffset</code>. With that said, <code>time</code> supports niche value optimization! So if you have <code>Option&lt;T&gt;</code>, your types won’t be any larger if at all possible. <code>chrono</code> does not do this.</p>
<p>Perhaps the largest difference between <code>time</code> and <code>chrono</code> is the choice of formatting. <code>time</code> prefers more powerful, readable descriptions (e.g. <code>[weekday], [month repr:long] [day padding:none]</code>), while <code>chrono</code> prefers a more limited description that is compatible with C (e.g. <code>%A, %B %-d, %Y</code>). I made this change out of frustration with the existing description, as it’s not clear what is actually being written. Even those familiar with the format must admit that it’s difficult to remember that <code>%A</code> corresponds to “Sunday” and <code>%B</code> “July”, for example. An unexpected advantage of the change is that I was able to implement many modifiers, such as case sensitivity. Format descriptions in <code>time</code> can also be constructed via a macro, which statically verifies the format and eliminates all runtime overhead of parsing it, leading to it being faster the last time I benchmarked it.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>Has the time crate fixed the <code>localtime</code> soundness issue? If not, why? Have you considered using <code>tz-rs</code> to address the issue?</strong></p>
<blockquote>
<p><strong>Editor:</strong></p>
<ul>
<li><code>localtime</code> soundness issue was reported by <a href="https://github.com/quininer">@quininer</a> in 2020, both <code>time</code> and <code>chrono</code> have been affected. See <a href="https://github.com/time-rs/time/issues/293">time#294</a> and <a href="https://github.com/chronotope/chrono/issues/499">chrono#499</a> respectively.</li>
<li><a href="https://crates.io/crates/tz-rs"><code>tz-rs</code></a> is an emerging crate reimplementation of <code>libc</code> functions <code>localtime</code>, <code>gmtime</code> and <code>mktime</code>.</li>
</ul>
</blockquote>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/jhpratt.png"/>
            <div class="text-lg font-bold">Jacob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>“Fixed” is a relative term, unfortunately. It is fixed in the sense that there is no unsoundness (unless explicitly opted into via an <code>unsafe</code> method call), but the issue still remains in that Unix-based operating systems without thread-safe environments are unable to soundly get the local UTC offset. For that reason any method calls that require doing that return the error value.</p>
<p>With regard to <code>tz-rs</code>, I considered it when it was first released. Using that crate would be extremely costly, as it would require parsing the entire time zone database on every invocation to avoid returning incorrect values. For this reason I decided not to use it.</p>
<p>One solution that I hope will eventually be picked back up is <code>#[deprecated_safe]</code>, which should be applied to <code>std::env::set_var</code>. <em>Ultimately</em> I would love for every operating system to have thread-safe environments, but that’s an issue dating back to the very introduction of environment variables in 1979.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="contribution-to-rust" class="toc-item group scroll-mt-20">
    Contribution to Rust
    <a href="#contribution-to-rust" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>In addition to maintaining the <code>time</code> crate, what other contributions have you made to the Rust community? For example, I know you are the author of RFC and the implementation of <a href="https://rust-lang.github.io/rfcs/3107-derive-default-enum.html"><code>derive_default_enum</code></a>.</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/jhpratt.png"/>
            <div class="text-lg font-bold">Jacob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p><code>time</code> is definitely the largest. Aside from that, I maintain <a href="https://github.com/jhpratt/deranged">deranged</a> — a proof of concept for ranged integers — and <a href="https://github.com/jhpratt/num_threads">num_threads</a> — to get the number of threads the process is currently using. I previously maintained <a href="https://github.com/jhpratt/standback">standback</a>, which backports new features from the standard library to older compilers, but stopped maintaining it because no one used it.</p>
<p>As you mentioned, I also (somewhat) wrote the RFC for <code>#[derive(Default)]</code> on <code>enum</code>s in addition to implementing and stabilizing it. More recently, I wrote the now-accepted RFC for restrictions, which will permit sealed traits at a compiler-level, rather than (ab)using visibility and accessibility. There is a pull request open to implement this, so it’ll hit nightly relatively soon. By the time this is live, it may already be on nightly!</p>
<p>Beyond the two RFCs, I’ve stabilized a large number of standard library items and language features, largely allowing new behavior in <code>const</code> contexts. Aside from <code>const</code> things, I implemented proper stability checks for <code>impl const Trait</code>, improved stability checks within <code>std</code>, and reduced the frequency of merge conflicts for PRs to the Rust repository. Something I’ve been looking into more recently is reducing the special-casing of the standard library, which will have significant benefits to the Rust ecosystem as a whole. <strong>I’ll actually be talking about this at <a href="https://rustconf.com/schedule/the-standard-library-is-special-let-s-change-that-">RustConf</a> in September!</strong></p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>What are the most rewarding part and biggest challenges that you have faced as a maintainer of <code>time</code> crate and contributor of rust?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/jhpratt.png"/>
            <div class="text-lg font-bold">Jacob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Probably the most rewarding part is knowing that millions of people use code that I write on a daily basis. When I get a feature request, I know it’s because someone thinks the crate is useful and wants to see it improved, even if in a small way. The biggest challenge is unfortunately finding time to work on things. Funding is also far from ideal, but that’s the case for everyone. As far as technical challenges, I tend to push the boundaries of what’s possible with the compiler, leading me to occasionally run into barriers.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="vision" class="toc-item group scroll-mt-20">
    Vision
    <a href="#vision" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>What is your vision for the future of the <code>time</code> crate and Rust as a whole?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/jhpratt.png"/>
            <div class="text-lg font-bold">Jacob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>I have <em>a lot</em> planned, to say the least.</p>
<p>In <code>time</code>, I started work on integrating the time zone database in April. That would mean full support for actual time zones, including daylight saving time adjustments, rather than only fixed UTC offsets. This is a large undertaking that will consume a significant amount of time to complete. Another thing I have been working on is having a generic <code>DateTime</code> type that supports a variety of offsets: statically known, dynamic (equivalent to <code>OffsetDateTime</code>), a time zone, or no offset at all (equivalent to <code>PrimitiveDateTime</code>). To that effect, both <code>PrimitiveDateTime</code> and <code>OffsetDateTime</code> are actually simple wrappers around this currently-internal type. I hope to eventually make it public, but there are some language features that I want to land on stable before that happens.</p>
<p>With Rust as a language, there are tons of things that I want to work on. I have an RFC that needs to be rewritten that would permit certain fields of <code>struct</code>s/<code>enum</code>s to have default values, such that they can be omitted when constructing them, with the values also being used by <code>#[derive(Default)]</code>. Other RFCs that I have planned, in some form or another, are <code>unsafe</code> fields and significant expansion of <code>#[derive]</code> capabilities, plus a couple more that I’m deliberately keeping the details of private. Rust is already a great language, but there is always room to improve. I intend to do my part in moving that forward.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="end-question" class="toc-item group scroll-mt-20">
    End question
    <a href="#end-question" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>When you’re not working on Rust projects, what do you like to do in your free time? Do you have any hobbies or interests that you’re particularly passionate about?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/jhpratt.png"/>
            <div class="text-lg font-bold">Jacob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>While I do not train any more, I trained for nearly ten years in <a href="https://en.wikipedia.org/wiki/American_Kenpo">American Kenpo</a>, specializing in self-defense and achieving the rank of third degree black belt. In that time, I taught others for a number of years. Another thing I do on occasion is solving Rubik’s cubes, though like the martial arts I don’t do this as much as I used to. Something I do quite often nowadays is watch various sports.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><img src="/static/issue-4/jacob-in-training.jpg" alt="" title="" loading="lazy"></p>
<blockquote>
<p>Jacob is in training for American Kenpo</p>
</blockquote>
2024-03-11T22:51:08.315775788+08:00 - 文章标题：Show Magazine #1
2024-03-11T22:51:08.315805193+08:00 - 文章内容：<p>We are excited to announce a new topic in Rust Magazine called <a href="/topic/show-magazine">#show-magazine</a>. This is a dedicated space for Rustaceans to showcase their projects and crates to the larger Rust community. Similar to <a href="https://news.ycombinator.com/shownew">Show HN</a> or <a href="https://www.google.com.hk/search?q=site%3Areddit.com+show+%2Fr%2Frust">Show /r/rust</a>, <strong>#show-magazine</strong> is an opportunity for developers to share their works-in-progress, completed projects, and upcoming Rust-related events with the community. It is the perfect platform to receive feedback, connect with other Rust enthusiasts, and celebrate the diverse range of projects being developed in the Rust ecosystem.</p>
<p>We encourage everyone to participate in <strong>#show-magazine</strong> by submitting their projects and crates to Rust Magazine.</p>
<h1 id="duo" class="toc-item group scroll-mt-20">
    Duo
    <a href="#duo" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<blockquote>
<p>Author: <a class="author-code" href="/@folyd">
<img src="/static/avatar/folyd.jpeg" alt="avatar" loading="lazy">
<span>Folyd</span>
</a>
</p>
</blockquote>
<p><strong>Duo</strong> is an easy-to-use observability solution that provides both logging and tracing capabilities for Rust applications. While traditional observability solutions are powerful (such as <a href="https://elastic.co">ELK</a>, <a href="https://jaegertracing.io">jaegertracing</a>, etc), it is also complex to deploy and maintain. Duo aimed to provide a less-powerful but complete set of observability features, with extremely simple deployment and maintenance.</p>
<p>Here is the tracing demo:</p>
<p><img src="https://github.com/duo-rs/duo/raw/master/duo-ui.png" alt="" title="" loading="lazy"></p>
<h1 id="more-to-coming" class="toc-item group scroll-mt-20">
    More to coming
    <a href="#more-to-coming" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Feel free to submit yours!</p>
2024-03-11T22:51:08.315820352+08:00 - 文章标题：Issue 3
2024-03-11T22:51:08.315838396+08:00 - 文章内容：<p>Dear Rustaceans,</p>
<p>We are excited to announce the release of Issue 3 of Rust Magazine! This issue features a diverse range of articles that explore various aspects of Rust programming, from performance optimization to memory statistics and everything in between.</p>
<p>In this edition, we have the pleasure of speaking with robjtede, the core maintainer of Actix Web and <a href="https://deps.rs">deps.rs</a>, who shares his insights on the development of Actix Web and the challenges of managing a large open-source project.</p>
<p>We also have articles on how Rust Search Extension indexes the top 20k crates to provide a instant search experience, and the pursuit of performance in building a JavaScript compiler.</p>
<p>Additionally, we delve into the comprehensive understanding of unsafe Rust and compare it to Zig’s safety features in a thought-provoking article.</p>
<p><strong>Another important news is that we opened an <a href="https://opencollective.com/rustmagazine">OpenCollective</a> account for Rust Magazine to receive donations from the community so that we can pay our contributors for incentivizing them to write more high-quality articles. We are also looking for sponsors to help us pay for the domain and email newsletter costs. If you are interested in helping us, please contact us on <a href="https://discord.gg/DdwgBuReJe">Discord</a> or email us at <a href="mailto://opencollective@rustmagazine.org">opencollective@rustmagazine.org</a>.</strong></p>
<p>We hope that this issue of Rust Magazine provides valuable insights and inspiration to Rustaceans of all levels. Thank you for your continued support, and we look forward to bringing you more exciting content in future issues!</p>
<p>Best regards,</p>
<p>The Rust Magazine Team.</p>
2024-03-11T22:51:08.315853602+08:00 - 文章标题：TaskStatsAlloc: Fine-grained memory statistics in Rust
2024-03-11T22:51:08.327047518+08:00 - 文章内容：<p>We often require detailed memory statistics per module or query of a large project. Generally, there are two approaches to fine-grained memory statistics:</p>
<ol>
<li>Using <code>allocator_api</code> throughout, as most of the collections from the <code>std</code> library in C++ or Rust support it.</li>
<li>For larger blocks (e.g. buffer pools or chunks), manually tracking memory allocation and deallocation.</li>
</ol>
<p>Both approaches can achieve the goal, but introduce too much complexity to the project.</p>
<p>Meanwhile, in Rust, the <code>allocator_api</code> feature is still unstable. During testing, we found some APIs that could lead to memory leaks and could not be used in production. Thus, we are searching for a fast, stable, and less complex way to maintain statistics.</p>
<h1 id="globalalloc-+-task_local" class="toc-item group scroll-mt-20">
    <code>GlobalAlloc</code> + <code>task_local</code>
    <a href="#globalalloc-+-task_local" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><a href="https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html"><code>GlobalAlloc</code></a> was introduced in Rust 1.28. It is an abstraction layer that introduces the concept of a global allocator. <code>GlobalAlloc</code> should be thread-safe and can be used for memory statistics management without introducing a lot of complexity.</p>
<p>However, <code>GlobalAlloc</code> does not provide per-task memory management, which is essential for our use case. To address this, we found <a href="https://docs.rs/tokio/latest/tokio/macro.task_local.html"><code>tokio::task_local</code></a>.</p>
<p><code>tokio::task_local</code> is a similar method to <a href="https://doc.rust-lang.org/std/macro.thread_local.html"><code>thread_local</code></a> that is managed by the <code>tokio</code> runtime. The combination of <code>GlobalAlloc</code> and <code>task_local</code> provides a powerful and efficient solution for managing memory statistics. We can create a simple wrapper, <code>TaskStatsAlloc</code>, over any underlying allocator. It is safe, lightweight, and user-friendly.</p>
<p>The <code>GlobalAlloc</code> trait has four methods. For the sake of simplicity, we will only consider the <code>alloc</code> and <code>dealloc</code> methods here.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub unsafe trait </span><span style="color:#399ee6;">GlobalAlloc </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">alloc</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">layout</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Layout) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">*mut u8</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">dealloc</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">ptr</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">*mut u8</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">layout</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Layout)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<h1 id="intuitive-implementation" class="toc-item group scroll-mt-20">
    Intuitive implementation
    <a href="#intuitive-implementation" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The most straightforward idea is to record the allocation count of memory in <code>task_local</code>.</p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">task_local! </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">static </span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> AtomicUsize</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">TaskStatsAlloc</span><span style="color:#61676c;">&lt;A&gt;(A)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">unsafe impl</span><span style="color:#61676c;">&lt;A</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> GlobalAlloc&gt; GlobalAlloc </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">TaskStatsAlloc</span><span style="color:#61676c;">&lt;A&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">alloc</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">layout</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">alloc</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Layout) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">*mut u8 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let </span><span style="color:#ed9366;">_ = </span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">try_with</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">allocated</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            allocated</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_add</span><span style="color:#61676c;">(layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">size</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">sync</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">atomic</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">alloc</span><span style="color:#61676c;">(layout)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">dealloc</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">ptr</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">*mut u8</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">layout</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">alloc</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Layout) {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let </span><span style="color:#ed9366;">_ = </span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">try_with</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">allocated</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            allocated</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_sub</span><span style="color:#61676c;">(layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">size</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">sync</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">atomic</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">dealloc</span><span style="color:#61676c;">(ptr</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> layout)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>And we can test the code with a simple program:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">global_allocator</span><span style="color:#61676c;">]
</span><span style="color:#fa6e32;">static </span><span style="color:#ff8f40;">GLOBAL</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">TaskStatsAlloc&lt;System&gt; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> TaskStatsAlloc(System)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">tokio</span><span style="color:#61676c;">::</span><span style="color:#f29718;">main</span><span style="color:#61676c;">]
</span><span style="color:#61676c;">async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> task1 </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">tokio</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">spawn(</span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">scope</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">into</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> async {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> _v </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[</span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">2</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">3</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">4</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">5</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">6</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">with</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">v</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Allocated </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> v</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">load</span><span style="color:#61676c;">(std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">sync</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">atomic</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> task2 </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">tokio</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">spawn(</span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">scope</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">into</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> async {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> _v </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[</span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">2</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">with</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">v</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Allocated </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> v</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">load</span><span style="color:#61676c;">(std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">sync</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">atomic</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let </span><span style="color:#ed9366;">_ = </span><span style="color:#61676c;">futures</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">join</span><span style="color:#ed9366;">!</span><span style="color:#61676c;">(task1</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> task2)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>If you run the program on a 64-bit machine, you will get <code>Allocated 24</code> and <code>Allocated 12</code> in your output in any order.</p>
<p>However, something went wrong if you try to move memory between different scopes.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">tokio</span><span style="color:#61676c;">::</span><span style="color:#f29718;">main</span><span style="color:#61676c;">]
</span><span style="color:#61676c;">async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let </span><span style="color:#61676c;">(tx</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> rx) </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">oneshot</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">channel()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> task1 </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">tokio</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">spawn(</span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">scope</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">into</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> async {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> data </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[</span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">2</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">3</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">4</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">5</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">6</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        tx</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">send</span><span style="color:#61676c;">(data)
</span><span style="color:#61676c;">    }))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> task2 </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">tokio</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">spawn(</span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">scope</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">into</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> async {
</span><span style="color:#61676c;">        { </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> _data </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> rx</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">; </span><span style="color:#61676c;">}
</span><span style="color:#61676c;">        </span><span style="color:#ff8f40;">ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">with</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">v</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Allocated </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> v</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">load</span><span style="color:#61676c;">(std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">sync</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">atomic</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let </span><span style="color:#ed9366;">_ = </span><span style="color:#61676c;">futures</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">join</span><span style="color:#ed9366;">!</span><span style="color:#61676c;">(task1</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> task2)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>There is an undefined behavior (UB) here, but it’s very likely that on your 64-bit machine, the output will be <code>Allocated 18446744073709551512</code>. Obviously, <code>data</code> was allocated in <code>task1</code>, moved to <code>task2</code>, and then deallocated in <code>task2</code>, causing <code>task2</code> to destruct the 24 bytes it never allocated, resulting in an unsigned integer underflow.</p>
<p>Memory movement is one of the most important features of Rust, but it can lead to significant biases in our memory statistics. Many tasks may destruct memory from other tasks, leading to undercounted memory. Conversely, other tasks may have virtual inflated results due to the memory being moved.</p>
<h1 id="introduce-scope-meta" class="toc-item group scroll-mt-20">
    Introduce scope meta
    <a href="#introduce-scope-meta" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The core issue with the previous approach is that, memory movement effectively leaks the memory from its original scope statistics, but move itself is <strong>inevitable and cannot be hooked</strong>. Instead, we could take a classic approach: allocate a metadata block for each scope and add an extra pointer to the metadata block to every pointer, which is similar to a vtable. When we allocate memory, we record the metadata pointer of the current scope. When we deallocate memory, we operate on the scope that was allocated, rather than the current scope.</p>
<p><img src="/static/issue-3/task-stats-alloc/scope-meta.png" alt="" title="" loading="lazy"></p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">static </span><span style="color:#ff8f40;">GLOBAL_ALLOC</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> System </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> System</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">repr</span><span style="color:#61676c;">(transparent)]
</span><span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">TaskLocalBytesAllocated</span><span style="color:#61676c;">(NonNull&lt;AtomicUsize&gt;)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Default </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">TaskLocalBytesAllocated </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">default</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            TaskLocalBytesAllocated(NonNull</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new_unchecked(</span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">leak(</span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(
</span><span style="color:#61676c;">                AtomicUsize</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            ))))
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">unsafe impl </span><span style="color:#61676c;">Send </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">TaskLocalBytesAllocated </span><span style="color:#61676c;">{}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#399ee6;">TaskLocalBytesAllocated </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">val</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">usize </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{ </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">as_ref</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">load</span><span style="color:#61676c;">(Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed) }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#f07171;">task_local! </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub static </span><span style="color:#ff8f40;">BYTES_ALLOCATED</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> TaskLocalBytesAllocated</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">TaskLocalAlloc</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">unsafe impl </span><span style="color:#61676c;">GlobalAlloc </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">TaskLocalAlloc </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">alloc</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">layout</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">alloc</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Layout) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">*mut u8 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// Add extra 8 bytes at the layout header.
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> new_layout </span><span style="color:#ed9366;">=
</span><span style="color:#61676c;">            Layout</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_size_align_unchecked(layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">size</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#fa6e32;">usize</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">BITS </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">align</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#ff8f40;">BYTES_ALLOCATED
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">try_with</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">bytes</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// Add the allocation to scope statistics.
</span><span style="color:#61676c;">                bytes</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">as_ref</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_add</span><span style="color:#61676c;">(layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">size</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// Allocate the layout from the original allocator.
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> ptr </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">GLOBAL_ALLOC</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">alloc</span><span style="color:#61676c;">(new_layout)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// Assign scope meta address to the first 8 bytes.
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">*</span><span style="color:#61676c;">(ptr </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">*mut usize</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> bytes</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">as_ptr</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// We should return the user the pointer with 8 bytes offset.
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> ptr </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">add</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">usize</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">BITS </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                ptr
</span><span style="color:#61676c;">            })
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap_or_else</span><span style="color:#61676c;">(|_| {
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> ptr </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">GLOBAL_ALLOC</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">alloc</span><span style="color:#61676c;">(new_layout)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// If the allocation doesn&#39;t happen in any scope,
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// assign the meta scope ptr to 0.
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">*</span><span style="color:#61676c;">(ptr </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">*mut usize</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">0</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> ptr </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">add</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">usize</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">BITS </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                ptr
</span><span style="color:#61676c;">            })
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">dealloc</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">ptr</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">*mut u8</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">layout</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">alloc</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Layout) {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// Calculate the new_layout using the same rule in `alloc`.
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> new_layout </span><span style="color:#ed9366;">=
</span><span style="color:#61676c;">            Layout</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_size_align_unchecked(layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">size</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#fa6e32;">usize</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">BITS </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">align</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// Get the meta scope ptr.
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> ptr </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">sub</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">usize</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">BITS </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> bytes </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">(</span><span style="color:#ed9366;">*</span><span style="color:#61676c;">(ptr </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">*const usize</span><span style="color:#61676c;">)) </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">*const</span><span style="color:#61676c;"> AtomicUsize</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(bytes) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> bytes</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_ref</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// Subtract the allocation from scope statistics.
</span><span style="color:#61676c;">            bytes</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_sub</span><span style="color:#61676c;">(layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">size</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">        </span><span style="color:#ff8f40;">GLOBAL_ALLOC</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">dealloc</span><span style="color:#61676c;">(ptr</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> new_layout)
</span><span style="color:#61676c;">    }
</span></pre>
<p>In this implementation, we allocate a <code>TaskLocalBytesAllocated</code> for each tokio task scope (See <code>TaskLocalBytesAllocated::default</code>. This is a wrapper around an <code>*AtomicUsize</code> that records the amount of memory allocated by that particular scope. Since the address of this allocation is saved within the pointers that are allocated in this scope, deallocation will still decrement the corresponding <code>TaskLocalBytesAllocated</code>.</p>
<h1 id="fix-the-memory-leak-in-tasklocalbytesallocated" class="toc-item group scroll-mt-20">
    Fix the memory leak in TaskLocalBytesAllocated
    <a href="#fix-the-memory-leak-in-tasklocalbytesallocated" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>We have noticed that when creating <code>TaskLocalBytesAllocated</code>, we use <code>Box::leak</code> to create the <code>AtomicUsize</code> metadata, but we never deallocate it. This can lead to an 8-byte memory leak for each scope. This unlimited leakage is unacceptable for programs that continuously create new task scopes.</p>
<p>However, we cannot reclaim this metadata when the scope exits because the memory allocated by this scope may be referenced by other scopes or global variables. If we were to recycle this metadata at this point, it would result in a dangling pointer, and accessing a dangling pointer during deallocation is undefined behavior (UB).</p>
<p>The current situation is similar to the one that can be managed by <code>Arc</code>. Indeed, we can use <code>Arc</code> to easily solve it. However, since this approach has critical performance requirements, we can employ some clever techniques to deal with the issue.</p>
<p>The lifecycle of <code>TaskLocalBytesAllocated</code> has two stages, which are marked by the exit of the scope. In the first stage, the scope allocates and deallocates memory. In the second stage, since the scope has completely exited, no new allocation will occur, and only the remaining memory will be freed. Therefore, the end of the second lifecycle is indicated by the <code>TaskLocalBytesAllocated</code> value dropping to 0 after the scope has exited.</p>
<p>To simplify implementation, we can create a 1-byte guard at the beginning of the scope and release it when the scope exits. This ensures that the value is never 0 in the first stage. As a result, when the value drops to 0, the metadata itself also needs to be reclaimed. This is equivalent to a thin <code>Arc</code> where the value is also the reference count. In this case, only one atomic variable needs protection. Therefore, <code>Relaxed</code> Order can be used without adding an <code>Acquire</code>/<code>Release</code> fence, unlike <code>Arc</code>.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">repr</span><span style="color:#61676c;">(transparent)]
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">derive</span><span style="color:#61676c;">(Clone</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> Copy</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> Debug)]
</span><span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">TaskLocalBytesAllocated</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;"> AtomicUsize&gt;)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Default </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">TaskLocalBytesAllocated </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">default</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">leak(</span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new_in(</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">into</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> System))))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#399ee6;">TaskLocalBytesAllocated </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">new</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">Self</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">default()
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Create an invalid counter.
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub const fn </span><span style="color:#f29718;">invalid</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">None</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Adds to the current counter.
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">inline</span><span style="color:#61676c;">(always)]
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">add</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">val</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(bytes) </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            bytes</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_add</span><span style="color:#61676c;">(val</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Adds to the current counter without validity check.
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">///
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// # Safety
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// The caller must ensure that `self` is valid.
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">inline</span><span style="color:#61676c;">(always)]
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">add_unchecked</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">val</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">unwrap_unchecked</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_add</span><span style="color:#61676c;">(val</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Subtracts from the counter value, and `drop` the counter while the count reaches zero.
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">inline</span><span style="color:#61676c;">(always)]
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">sub</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">val</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(bytes) </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// Use `Relaxed` order as we don&#39;t need to sync read/write with other memory addresses.
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// Accesses to the counter itself are serialized by atomic operations.
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> old_bytes </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> bytes</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_sub</span><span style="color:#61676c;">(val</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// If the counter reaches zero, delete the counter. Note that we&#39;ve ensured there&#39;s no
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// zero deltas in `wrap_layout`, so there&#39;ll be no more uses of the counter.
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">if</span><span style="color:#61676c;"> old_bytes </span><span style="color:#ed9366;">==</span><span style="color:#61676c;"> val {
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// No fence here, this is different from ref counter impl in https://www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html#boost_atomic.usage_examples.example_reference_counters.
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// As here, T is the exactly Counter and they have same memory address, so there
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// should not happen out-of-order commit.
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{ </span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_raw_in(bytes</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_mut_ptr</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> System) }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">inline</span><span style="color:#61676c;">(always)]
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">val</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">usize </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_ref</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">expect</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;bytes is invalid&quot;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">load</span><span style="color:#61676c;">(Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Relaxed)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>And <code>dealloc</code> just call <code>sub</code>directly.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">dealloc</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">ptr</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">*mut u8</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">layout</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Layout) {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> new_layout </span><span style="color:#ed9366;">=
</span><span style="color:#61676c;">        Layout</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_size_align_unchecked(layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">size</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#fa6e32;">usize</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">BITS </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">align</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Get the meta scope ptr.
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> ptr </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">sub</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">usize</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">BITS </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> bytes</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> TaskLocalBytesAllocated </span><span style="color:#ed9366;">= *</span><span style="color:#61676c;">ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">cast</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    bytes</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">sub</span><span style="color:#61676c;">(layout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">size</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#ff8f40;">GLOBAL_ALLOC</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">dealloc</span><span style="color:#61676c;">(ptr</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> wrapped_layout)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>We also create a simple wrapper for caller to create the guard and monitor the metrics value:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub</span><span style="color:#61676c;"> async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">allocation_stat</span><span style="color:#61676c;">&lt;Fut, T, F&gt;(</span><span style="color:#ff8f40;">future</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Fut, </span><span style="color:#ff8f40;">interval</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Duration, </span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">report</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> T
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    Fut</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Future&lt;Output = T&gt;,
</span><span style="color:#61676c;">    F</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FnMut(</span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">),
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#ff8f40;">BYTES_ALLOCATED
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">scope</span><span style="color:#61676c;">(TaskLocalBytesAllocated</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> async </span><span style="color:#fa6e32;">move </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// The guard has the same lifetime as the counter so that the counter will keep positive
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// in the whole scope. When the scope exits, the guard is released, so the counter can
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// reach zero eventually and then `drop` itself.
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> _guard </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> monitor </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> async </span><span style="color:#fa6e32;">move </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> interval </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">tokio</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">time</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">interval(interval)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">loop </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">                    interval</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">tick</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                    </span><span style="color:#ff8f40;">BYTES_ALLOCATED</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">with</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">bytes</span><span style="color:#61676c;">| </span><span style="color:#f07171;">report</span><span style="color:#61676c;">(bytes</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">val</span><span style="color:#61676c;">()))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                }
</span><span style="color:#61676c;">            }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> output </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">tokio</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">select</span><span style="color:#ed9366;">! </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">                biased</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">_ =</span><span style="color:#61676c;"> monitor </span><span style="color:#ed9366;">=&gt; </span><span style="color:#f07171;">unreachable!</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">                output </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> future </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> output</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            output
</span><span style="color:#61676c;">        })
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await
</span><span style="color:#61676c;">}
</span></pre>
<h1 id="pros-and-cons" class="toc-item group scroll-mt-20">
    Pros and Cons
    <a href="#pros-and-cons" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>This implementation still has many drawbacks:</p>
<ul>
<li>Memory overhead: Small objects on the heap usually have a size of about 60-70 bytes, and allocating an additional 8 bytes of metadata incurs a non-negligible cost.</li>
<li>Atomic instruction overhead: Although we have optimized to a simple RELAXED atomic instruction, there is still a certain performance cost due to the critical path. There is room for further optimization, such as separately counting the current task and other tasks for the total value, and modifying the current task value without using atomic instructions.</li>
<li>Long-lived memory: Some allocated memory may live for a long time, which will also prevent the associated task metadata from being reclaimed, such as creating a connection in a task and moving it to the connection pool. However, long-lived memory is usually bounded, so adding an additional 8 bytes is acceptable. This can also cause some statistical errors.</li>
</ul>
<p>However, the benefits are also very obvious. <strong>This implementation has zero invasion on the application code, and all complexity is covered in the allocator.</strong></p>
<h1 id="further-plan" class="toc-item group scroll-mt-20">
    Further plan
    <a href="#further-plan" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>I have tested this approach in our application and it performed well. We were able to obtain detailed memory statistics for each module or query without significantly impacting the speed of the application. The impact was approximately 10% in high-concurrent workloads, such as sysbench, and almost no influence for long-running workloads.</p>
<p>The current implementation has not been published on <a href="http://crates.io/">crates.io</a> so far, as I am contemplating the manner in which statistical values monitoring can be presented to the user in a more convenient way. At the same time, I am also exploring whether there are better ways to address some of the drawbacks mentioned above.</p>
2024-03-11T22:51:08.327174928+08:00 - 文章标题：Optimizing Compilation for Databend
2024-03-11T22:51:08.327303310+08:00 - 文章内容：<p><img src="/static/issue-3/optimizing-compilation-for-databend/1.png" alt="" title="" loading="lazy"></p>
<h1 id="background" class="toc-item group scroll-mt-20">
    Background
    <a href="#background" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Compiling a medium to large Rust program is not a breeze due to the accumulation of complex project dependencies and boilerplate code. As noted in <a href="https://www.pingcap.com/blog/rust-compilation-model-calamity/">an article by Brian Anderson</a>, “But Rust compile times are so, so bad.” To maintain the stability of the build pipeline, it is necessary to introduce some techniques, but there is no “one-size-fits-all” solution. As the complexity of the workflow increases, it can become a loop.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/3.png" alt="" title="" loading="lazy"></p>
<p>The Databend team encountered similar challenges in compiling the product from hundreds of thousands of lines of code and in developing Docker-based build tools to enhance the developers/CI workflow. This article outlines the measures taken by the team to address the compilation challenges. If you’re interested, check out these earlier posts to get a general idea of how we compile Databend:</p>
<ul>
<li><a href="%E2%80%8Bhttps://databend.rs/doc/contributing/building-from-source">Building Databend</a></li>
<li><a href="https://databend.rs/blog/profile-guided-optimization">Optimizing Databend Binary Builds with Profile-guided Optimization</a></li>
</ul>
<h1 id="observability" class="toc-item group scroll-mt-20">
    Observability
    <a href="#observability" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>While observability may not directly optimize compilation, it can aid in identifying where the bottleneck in the compilation process lies. This knowledge can help us determine the appropriate remedy to address the issue.</p>
<h2 id="compilation-process" class="toc-item group scroll-mt-20">
    Compilation Process
    <a href="#compilation-process" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>This command visualizes the compilation process of Databend.</p>
<p>In Rust version 1.59 or earlier, you can use <code>cargo +nightly build -Ztimings</code>.</p>
<p>When opened in a web browser, the resulting HTML file shows a Gantt chart displaying the dependency relationships between crates in the program, the degree of parallelism in compilation, and the order of magnitude of code generation.</p>
<p>Based on the chart, we can decide whether to increase the number of code generation units for a particular module, or whether to further decompose to optimize the overall build process.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/4.png" alt="" title="" loading="lazy"></p>
<h2 id="dependent-relationships" class="toc-item group scroll-mt-20">
    Dependent Relationships
    <a href="#dependent-relationships" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Although not commonly utilized, <a href="https://crates.io/crates/cargo-depgraph">cargo-depgraph</a> can be employed to analyze dependent relationships. It helps to find potential optimization points, especially when you need to replace some similar dependencies or optimize the organization level of crates.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/5.png" alt="" title="" loading="lazy"></p>
<h1 id="painless-optimization-with-configuration-adjustments" class="toc-item group scroll-mt-20">
    Painless Optimization with Configuration Adjustments
    <a href="#painless-optimization-with-configuration-adjustments" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The first step to improving the compilation experience does not involve directly altering the code. In many cases, only a few configuration adjustments are necessary to achieve significant improvement.</p>
<h2 id="always-bump-&-upstream-first" class="toc-item group scroll-mt-20">
    Always Bump &amp; Upstream First
    <a href="#always-bump-&-upstream-first" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>As mentioned earlier, members of the Rust team were also early on aware that compile times are currently suboptimal. Therefore, the Databend team has plans to continually optimize for this issue. Improvements to compilation can often be found listed in the version update notes.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">[</span><span style="color:#399ee6;">toolchain</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">channel </span><span style="color:#61676c;">= </span><span style="color:#86b300;">&quot;nightly-2023-03-10&quot;
</span><span style="color:#399ee6;">components </span><span style="color:#61676c;">= [</span><span style="color:#86b300;">&quot;rustfmt&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;clippy&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;rust-src&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;miri&quot;</span><span style="color:#61676c;">]
</span></pre>
<p>In addition, upstream projects may also improve unreasonable designs over time, and many of these improvements will ultimately be reflected in the impact on compilation.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/6.png" alt="" title="" loading="lazy"></p>
<p>One of the simplest ways to improve compile time is to always keep up with upstream changes and participate in ecosystem building with the philosophy of “upstream first”. Databend has been a loyal follower of Rust nightly from the very beginning and provided <a href="https://databend.rs/doc/contributing/routine-maintenance">concise guidance</a> for updating the toolchain and dependency relationships.</p>
<h2 id="caching" class="toc-item group scroll-mt-20">
    Caching
    <a href="#caching" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Caching is a common compilation optimization technique. The idea is simple: store pre-built artifacts and reuse them the next time you build.</p>
<p>Initially, Databend employed the rust-cache action in CI to improve caching and achieved promising results. However, we had to manually update the key frequently to clear the cache and prevent misjudgment during the build.</p>
<p>Moreover, Rust’s early support for incremental builds was terrible. For a while, we had to consider how to configure the pipeline to make some trade-offs.</p>
<p>Things have now changed.</p>
<p><a href="https://github.com/mozilla/sccache">Sccache</a> was revitalized and <a href="https://github.com/apache/incubator-opendal">OpenDAL</a> was successfully integrated into it, becoming a crucial component that supports the Rust compilation cache ecosystem. Although it may not fully showcase its potential when building locally, it can still deliver great results in CI.</p>
<p>Another important change is that the Rust community realized that incremental compilation did not work well for CI.</p>
<blockquote>
<p>CI builds often are closer to from-scratch builds, as changes are typically much bigger than from a local edit-compile cycle. For from-scratch builds, incremental adds an extra dependency-tracking overhead. It also significantly increases the amount of IO and the size of ./target, which make caching less effective. (<a href="https://matklad.github.io/2021/09/04/fast-rust-builds.html">Fast Rust Builds</a>)</p>
</blockquote>
<h1 id="remove-unused-dependencies" class="toc-item group scroll-mt-20">
    Remove Unused Dependencies
    <a href="#remove-unused-dependencies" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>There is an interesting project in the Rust ecosystem known as <a href="https://github.com/mTvare6/hello-world.rs">mTvare6/hello-world.rs</a>, which demonstrates how to create a Rust project that is as poorly written as possible.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/8.png" alt="" title="" loading="lazy"></p>
<p>In particular:</p>
<blockquote>
<p>in a few lines of code with few(1092) dependencies</p>
</blockquote>
<p>Rust itself is not very good at automatically handling dependencies. It always downloads and compiles all dependencies in one go. Therefore, avoiding unnecessary introduction of dependencies becomes essential.</p>
<p>At first, Databend introduced <a href="https://crates.io/crates/cargo-udeps">cargo-udeps</a> to check for unused dependencies. Most of the time it worked well. However, the major drawback was that every time dependencies were checked, it was equivalent to recompiling, which was undoubtedly inefficient in a CI environment.</p>
<p><a href="https://github.com/sundy-li">sundy-li</a> found another fast and easy to use tool called <a href="https://crates.io/crates/cargo-machete">cargo-machete</a>.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/9.png" alt="" title="" loading="lazy"></p>
<p>One significant benefit is that <strong>machete</strong> is fast as it only requires simple regular expressions to handle everything. Additionally, it supports automatic fixes, eliminating the need to search through files one by one and make manual edits.</p>
<p>However, <strong>machete</strong> is not a flawless tool. Due to its reliance on simple regular expression processing, it may not accurately identify some situations, but it is acceptable to ignore these instances.</p>
<h2 id="sparse-index" class="toc-item group scroll-mt-20">
    Sparse Index
    <a href="#sparse-index" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>In order to determine which crates exist on <a href="https://crates.io/">crates.io</a>, Cargo needs to download and read the crates.io-index, which is located in a git repository hosted on GitHub and lists all versions of all crates.</p>
<p>However, as the index has grown significantly over time, the initial acquisition and updates have become painfully slow.</p>
<p><a href="https://rust-lang.github.io/rfcs/2789-sparse-index.html">RFC 2789</a> introduced a sparse index to improve Cargo’s access to the index and is hosted at <a href="https://index.crates.io/">https://index.crates.io/</a>.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">[</span><span style="color:#399ee6;">registries</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">crates-io</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">protocol </span><span style="color:#61676c;">= </span><span style="color:#86b300;">&quot;sparse&quot;
</span></pre>
<h2 id="linker" class="toc-item group scroll-mt-20">
    Linker
    <a href="#linker" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>If a project is relatively large and has many dependencies, it may waste a lot of time on linking. Few code changes may lead to a long compile time.</p>
<p>The simplest solution is to choose a faster linker than the default one.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/10.png" alt="" title="" loading="lazy"></p>
<p>Both <a href="https://github.com/llvm/llvm-project/tree/main/lld">lld</a> and <a href="https://github.com/rui314/mold">mold</a> can improve link time. Databend eventually chose to use <strong>mold</strong>. In fact, the difference between the two linkers is not obvious for Databend. However, using <strong>mold</strong> has a potential benefit of saving some memory consumption during compilation.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">[</span><span style="color:#399ee6;">target</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">x86_64-unknown-linux-gnu</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">linker </span><span style="color:#61676c;">= </span><span style="color:#86b300;">&quot;clang&quot;
</span><span style="color:#399ee6;">rustflags </span><span style="color:#61676c;">= [</span><span style="color:#86b300;">&quot;-C&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;link-arg=-fuse-ld=/path/to/mold&quot;</span><span style="color:#61676c;">]
</span></pre>
<h2 id="compile-related-profile" class="toc-item group scroll-mt-20">
    Compile-related Profile
    <a href="#compile-related-profile" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>First look at a common setting: <a href="https://doc.rust-lang.org/rustc/codegen-options/index.html#split-debuginfo">split-debuginfo</a>.</p>
<p>On macOS, rustc runs a tool called <a href="https://llvm.org/docs/CommandGuide/dsymutil.html">dsymutil</a> which analyzes the binary and then builds a debug information directory. Configuring <code>split-debuginfo</code> skips <strong>dsymutil</strong> and speeds up the build.</p>
<pre style="background-color:#fafafa;">
<span style="color:#399ee6;">split-debuginfo </span><span style="color:#61676c;">= </span><span style="color:#86b300;">&quot;unpacked&quot;
</span></pre>
<p>Another example is <a href="https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units">codegen-units</a>.</p>
<p>Databend uses <code>codegen-units = 1</code> during compilation to enhance optimization and restrain the size of binaries. However, considering that some dependencies have particularly long code generation time during compilation (due to heavy macro dependencies), it is necessary to loosen some restrictions specifically.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">release</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">package</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">arrow2 </span><span style="color:#61676c;">= { </span><span style="color:#399ee6;">codegen-units </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">4 </span><span style="color:#61676c;">}
</span><span style="color:#399ee6;">common-functions </span><span style="color:#61676c;">= { </span><span style="color:#399ee6;">codegen-units </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">16 </span><span style="color:#61676c;">}
</span><span style="color:#399ee6;">databend-query </span><span style="color:#61676c;">= { </span><span style="color:#399ee6;">codegen-units </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">4 </span><span style="color:#61676c;">}
</span><span style="color:#399ee6;">databend-binaries </span><span style="color:#61676c;">= { </span><span style="color:#399ee6;">codegen-units </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">4 </span><span style="color:#61676c;">}
</span></pre>
<h1 id="more-reasonable-code-structures" class="toc-item group scroll-mt-20">
    More Reasonable Code Structures
    <a href="#more-reasonable-code-structures" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The above are some configuration adjustments. Next, we will explore the impact of refactoring on compile time.</p>
<h2 id="split-into-more-reasonable-crate-sizes" class="toc-item group scroll-mt-20">
    Split into More Reasonable Crate Sizes
    <a href="#split-into-more-reasonable-crate-sizes" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Refactoring a large all-in-one crate into smaller ones can be a highly beneficial strategy. It can not only improve parallelism, but also help Rust process code compilation faster by decoupling cross dependencies and circular dependencies.</p>
<p>Splitting crates also makes the boundaries of the code more apparent, which can result in easier maintenance.</p>
<h2 id="the-boundary-between-unit-testing-and-integration-testing" class="toc-item group scroll-mt-20">
    The Boundary between Unit Testing and Integration Testing
    <a href="#the-boundary-between-unit-testing-and-integration-testing" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Common forms of unit test organization include maintaining <code>tests</code> mod in <code>src</code> and maintaining corresponding test code in the <code>tests</code> directory.</p>
<p>Following the recommendation of <a href="https://matklad.github.io/2021/02/27/delete-cargo-integration-tests.html">Delete Cargo Integration Tests</a>, Databend has stripped all unit tests from the code very early and organized them in a similar form:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">tests/
</span><span style="color:#61676c;">  it/
</span><span style="color:#61676c;">    main.rs
</span><span style="color:#61676c;">    foo.rs
</span><span style="color:#61676c;">    bar.rs
</span></pre>
<p>This form avoids compiling each file under <code>tests/</code> into some separate binary files, thereby reducing the impact on compile time.</p>
<p>In addition, Rust spends a lot of time processing tests mod and docs tests during compilation, especially docs tests which require building additional targets. After adopting the above organization form, they can be turned off in the configuration.</p>
<p>However, this form is not elegant enough for us. All contents that need to be tested have to be set as public, which easily breaks the modular organization of the code. In-depth evaluation is recommended before use.</p>
<h2 id="more-elegant-testing-methods" class="toc-item group scroll-mt-20">
    More Elegant Testing Methods
    <a href="#more-elegant-testing-methods" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>We all know that the more code that needs to be compiled for unit tests, the slower the compilation time will be.</p>
<p>In addition, for Databend, a considerable part of the tests are end-to-end tests of input and output. If these tests are hardcoded in unit tests, much more format-related work needs to be added, which also requires substantially more effort to maintain.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/12.png" alt="" title="" loading="lazy"></p>
<p>The use of golden file testing and SQL logic testing in Databend replaces a large number of SQL query tests and output result checks embedded in unit tests, which further improves compile time.</p>
<h1 id="cargo-snubs" class="toc-item group scroll-mt-20">
    Cargo Snubs
    <a href="#cargo-snubs" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1><h2 id="cargo-nextest" class="toc-item group scroll-mt-20">
    cargo-nextest
    <a href="#cargo-nextest" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p><a href="https://nexte.st/">cargo nextest</a> makes testing as fast as lightning and provides finer statistics and elegant views. Many projects in the Rust community have greatly improved test pipeline time by introducing cargo nextest.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/13.png" alt="" title="" loading="lazy"></p>
<p>However, Databend is currently unable to switch to this tool for two reasons. Firstly, configuration-related tests are not currently supported, so if you need to run cargo test separately, you have to recompile. Secondly, some tests related to timeouts are set to a specific execution time and must wait for completion.</p>
<h2 id="cargo-hakari" class="toc-item group scroll-mt-20">
    cargo-hakari
    <a href="#cargo-hakari" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>One typical example of improving the compilation of dependencies is workspace-hack, which places important public dependencies in a directory, avoiding the need to repeatedly recompile these dependencies. <a href="https://crates.io/crates/cargo-hakari">cargo-hakari</a> can be used to automatically manage workspace-hack.</p>
<p><img src="/static/issue-3/optimizing-compilation-for-databend/14.png" alt="" title="" loading="lazy"></p>
<p>Databend has a large number of common components, and the main binary programs are built on common components, implicitly in line with this optimization idea. In addition, with the support of dependencies inheritance in the workspace, the maintenance pressure has also been reduced.</p>
2024-03-11T22:51:08.327326803+08:00 - 文章标题：Is Zig safer than Unsafe Rust?
2024-03-11T22:51:08.327408118+08:00 - 文章内容：<p>Recently, a hotly debated post trending on Reddit: <a href="https://www.reddit.com/r/rust/comments/11l6ehj/when_zig_is_safer_and_faster_than_unsafe_rust/">When Zig is safer and faster than Rust</a>. Although the title says <code>Rust</code>, it’s actually comparing with <code>Unsafe Rust</code>. Based on that post, I’d like to discuss which language is safer when writing Unsafe code: Is Zig safer than Unsafe Rust?</p>
<h1 id="zig-language-introduction" class="toc-item group scroll-mt-20">
    Zig Language Introduction
    <a href="#zig-language-introduction" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Zig is a modern, high-performance systems programming language aimed at simplifying some of the complexities of C while providing greater safety and ease of use. Zig was initiated by Andrew Kelley in 2016 and has received support from an active open-source community. Zig is suitable for various scenarios, such as operating system development, embedded systems, game development, high-performance computing, etc. Although the Zig language is relatively new, it has attracted the attention of many developers and has been applied in actual projects. With the development of the community and ecosystem, Zig is expected to become an important choice in the field of systems programming.</p>
<table><thead><tr><th>Feature</th><th>Zig</th><th>Rust</th></tr></thead><tbody>
<tr><td>Design Goals</td><td>Simplicity, high-performance, ease of use, C compatibility</td><td>Safety, concurrency, high-performance, memory safety</td></tr>
<tr><td>Syntax</td><td>Closer to C language, simpler</td><td>Closer to ML series languages, expressive type system</td></tr>
<tr><td>Memory Safety</td><td>Compile-time checks, no borrow checker and ownership system</td><td>Borrow checker and ownership system, compile-time guaranteed memory safety</td></tr>
<tr><td>Performance</td><td>High performance, close to C language</td><td>High performance, comparable to C++</td></tr>
<tr><td>Line-by-Line Compilation</td><td>Supports line-by-line compilation, allows compile-time execution of code</td><td>Supports const generics, limited compile-time execution capabilities</td></tr>
<tr><td>Error Handling</td><td>Error return values and error union types, no exceptions</td><td>Result and Option types, no exceptions</td></tr>
<tr><td>FFI</td><td>Excellent C language compatibility, easy to interoperate with existing C code</td><td>Good FFI support, requires additional bindings creation</td></tr>
<tr><td>Package Management</td><td>Built-in package manager</td><td>Cargo package manager</td></tr>
<tr><td>Runtime</td><td>No runtime overhead</td><td>Minimal runtime, can run without std</td></tr>
<tr><td>Community and Ecosystem</td><td>Relatively new, community in development</td><td>Mature community and rich ecosystem</td></tr>
</tbody></table>
<p>Please note that while this table summarizes the main differences, each language has its unique features in practice, so you may need to delve deeper into the characteristics of each language before making a choice.</p>
<p>Zig language is designed with a focus on memory safety, but unlike Rust, it does not have a ownership system and borrow checker. Nevertheless, Zig enhances memory safety through some compile-time checks and language features. Here are some ways Zig language implements memory safety:</p>
<ol>
<li><strong>Compile-time checks</strong>: The Zig compiler performs many checks during compilation to catch potential memory errors, such as array out-of-bounds access, null pointer dereference, etc. When the Zig compiler detects these errors, it stops the compilation and reports the error.</li>
<li><strong>Error handling</strong>: Zig improves code robustness through explicit error handling. Zig does not have exceptions; instead, it uses error return values and error union types to handle errors. This forces developers to explicitly handle potential errors, helping to reduce memory safety issues caused by unhandled errors.</li>
<li><strong>Optional types</strong>: Zig provides optional types (Optionals) to represent values that may be null. By using optional types, null value cases can be explicitly handled, reducing the risk of null pointer dereferences.</li>
<li><strong>Defined behavior</strong>: Zig designs defined behavior for many memory-related operations to avoid security risks posed by undefined behavior. For example, when dereferencing a null pointer, Zig ensures that a clearly defined error occurs, rather than producing undefined behavior.</li>
<li><strong>Memory management</strong>: Zig offers flexible memory management options, including manual memory management, built-in allocators, and the use of user-defined allocators. Through explicit memory management, developers can better control memory usage, reducing the risks of memory leaks and memory errors.</li>
</ol>
<p>In summary, the Zig language, like C, entrusts memory management to humans, placing full trust in human development. Zig then provides some memory safety checks to ensure memory safety. However, it still lacks the strict compile-time guarantees of Rust’s ownership system and borrow checker. Therefore, when writing Zig code, developers need to pay more attention to potential memory safety issues and ensure that errors and exceptional situations are handled correctly.</p>
<h1 id="is-zig-really-safer-than-unsafe-rust?" class="toc-item group scroll-mt-20">
    Is Zig really safer than Unsafe Rust?
    <a href="#is-zig-really-safer-than-unsafe-rust?" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Compared to Safe Rust, the Zig language gives developers more freedom but is less safe than Safe Rust. However, is Zig safer than Unsafe Rust?</p>
<p>Let’s go back to the Reddit article <a href="https://www.reddit.com/r/rust/comments/11l6ehj/when_zig_is_safer_and_faster_than_unsafe_rust/">When Zig is safer and faster than Rust</a>.</p>
<p><strong>1. The author says that using Unsafe Rust is difficult and relies entirely on Miri’s checks.</strong> This statement seems correct, but not entirely correct.</p>
<blockquote>
<p>Miri is a MIR interpreter with many functions. One of them is UB checking in Unsafe Rust.</p>
</blockquote>
<p>First, Unsafe Rust is indeed challenging. After understanding the content about Unsafe Rust safety abstractions mentioned in the <a href="/issue-3/understand-unsafe-rust">previous article</a>, this difficulty should be reduced by half for Rust developers. At least, the usage of Unsafe Rust is not as confusing, and there is a correct direction.</p>
<p>UB issues also exist in the Zig language, and Zig will also face the problems of Unsafe code. When writing Unsafe code in Zig, memory safety guarantees mainly depend on the developer’s experience and coding practices. Although the Zig compiler provides some compile-time checks, in Unsafe code, these checks may not be enough to capture all potential memory errors. To ensure memory safety when writing Unsafe code, developers can follow these practices:</p>
<ol>
<li><strong>Reduce the use of Unsafe code</strong>: Try to minimize the use of Unsafe code without compromising performance and functionality. Limit Unsafe code to the smallest possible scope, making it easier to review and maintain.</li>
<li><strong>Use the type system</strong>: Make the most of Zig’s type system to represent different types of data and constraints. The type system can help developers capture potential errors at compile-time, reducing the risk of memory errors.</li>
<li><strong>Explicit error handling</strong>: Ensure that potential errors are explicitly handled in Unsafe code, using error return values and error union types to represent possible error situations. This helps improve code robustness and reduce memory safety issues caused by unhandled errors.</li>
<li><strong>Proper encapsulation and abstraction</strong>: For parts that require the use of Unsafe code, consider encapsulating them into safe abstractions, isolating Unsafe code. This ensures that other parts of the code do not touch potential memory errors when called.</li>
<li><strong>Code review</strong>: Conduct a detailed code review for parts involving Unsafe code, ensuring that developers understand potential memory risks and take appropriate measures to prevent errors.</li>
<li><strong>Testing</strong>: Write test cases for Unsafe code, ensuring that it works correctly under different scenarios. Testing can help discover potential memory errors and verify the effectiveness of fixes.</li>
</ol>
<p>When writing Unsafe code in Zig, it is also necessary to perform safety abstractions like Unsafe Rust and pay attention to maintaining safety invariants and validity invariants.</p>
<p><strong>2. The author provides two examples to illustrate the difficulty of using Unsafe Rust</strong></p>
<p>Firstly, using <code>*mut T</code> and <code>*const T</code> already loses the compiler’s safety guarantees, and even in C, using pointers requires developers to ensure safety themselves. <strong>In Zig, the usage of pointers is similar to that of C, so there is no particular safety advantage for Zig in this regard.</strong></p>
<p>The author also <a href="https://zackoverflow.dev/writing/unsafe-rust-vs-zig/#the-most-challenging-part-aliasing-rules">states</a> that in Unsafe Rust, using pointers leads to scattered code, such as <code>(*ptr).field</code>, since pointers cannot call methods. However, there is a better and safer solution in Unsafe Rust:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl </span><span style="color:#399ee6;">Foo </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">	</span><span style="font-style:italic;color:#abb0b6;">/// # Safety
</span><span style="color:#61676c;">	</span><span style="font-style:italic;color:#abb0b6;">/// When calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:
</span><span style="color:#61676c;">	</span><span style="font-style:italic;color:#abb0b6;">/// -  The pointer must be properly aligned.
</span><span style="color:#61676c;">	</span><span style="font-style:italic;color:#abb0b6;">/// -   The pointer must point to an initialized instance of `T`.
</span><span style="color:#61676c;">	</span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">as_ref</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;(</span><span style="color:#ff8f40;">ptr</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">*const</span><span style="color:#61676c;"> Foo) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;"> Foo {
</span><span style="color:#61676c;">		</span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">		    </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(foo) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_ref</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">		        </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;We got back the value: </span><span style="color:#ff8f40;">{foo}</span><span style="color:#86b300;">!&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">		        foo
</span><span style="color:#61676c;">		    }
</span><span style="color:#61676c;">		}
</span><span style="color:#61676c;">	}
</span><span style="color:#61676c;">	</span><span style="font-style:italic;color:#abb0b6;">/// # Safety
</span><span style="color:#61676c;">	</span><span style="font-style:italic;color:#abb0b6;">/// When calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:
</span><span style="color:#61676c;">	</span><span style="font-style:italic;color:#abb0b6;">/// -  The pointer must be properly aligned.
</span><span style="color:#61676c;">	</span><span style="font-style:italic;color:#abb0b6;">/// -   The pointer must point to an initialized instance of `T`.
</span><span style="color:#61676c;">	</span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">as_mut</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;(</span><span style="color:#ff8f40;">ptr</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">*mut</span><span style="color:#61676c;"> Foo) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a mut</span><span style="color:#61676c;"> Foo {
</span><span style="color:#61676c;">		</span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">		    </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(foo) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_mut</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">		        </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;We got back the value: </span><span style="color:#ff8f40;">{foo}</span><span style="color:#86b300;">!&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">		        foo
</span><span style="color:#61676c;">		    }
</span><span style="color:#61676c;">		}
</span><span style="color:#61676c;">	}
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span></pre>
<p>The standard library provides <code>as_ref</code> and <code>as_mut</code> methods for raw pointers to convert them into immutable and mutable references. By implementing these two methods for <code>Foo</code>, safety conditions can be fully considered, and it becomes more convenient to call methods on instances of <code>Foo</code> without the need for <code>(*ptr).field</code>-like code.</p>
<p>Regarding the author’s point about arrays, I have provided an improved version of their example:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">derive</span><span style="color:#61676c;">(Debug)]
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Value</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">unsafe fn </span><span style="color:#f29718;">do_stuff_with_array</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">values</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">*mut</span><span style="color:#61676c;"> Value, </span><span style="color:#ff8f40;">len</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> values</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">[Value] </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">slice</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_raw_parts_mut(values</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> len)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// I can use the ergonomics of iterators!
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">for</span><span style="color:#61676c;"> val </span><span style="color:#ed9366;">in</span><span style="color:#61676c;"> values</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">iter_mut</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// ...
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// Perform actions on each `val` of type &amp;mut Value
</span><span style="color:#61676c;">        val</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0 </span><span style="color:#ed9366;">+= </span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Example usage of `do_stuff_with_array`
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> values </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[Value(</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> Value(</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> Value(</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">)]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{ </span><span style="color:#f07171;">do_stuff_with_array</span><span style="color:#61676c;">(values</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_mut_ptr</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> values</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">()) }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{values:?}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>I don’t see any problem with this code. Perhaps I missed the author’s point. At least I don’t agree with their suggestion of avoiding the use of references as a solution to this issue.</p>
<p>The author refers to these issues as “dark arts” in Rust, but I have reason to believe that they may not fully understand Rust’s safety philosophy regarding Unsafe Rust.</p>
<p><strong>3. The Author Favors Zig’s Built-in Safety Strategy</strong></p>
<p>The built-in safety strategies in Zig that the author favors include:</p>
<ul>
<li>An explicit allocation policy and a special allocator that detects memory errors.</li>
<li>Pointers are non-null by default, but their nullability can be expressed with <code>?*Value</code>.</li>
<li>The dot operator is used for pointer dereferencing and distinguishing between single and array value pointers.</li>
</ul>
<p>From this perspective, Zig’s safety measures for pointers are similar to Rust’s references. Zig may be more flexible to use, like C, without having to consider as many safety factors. It appears that Zig may be safer than Unsafe Rust.</p>
<p>Although Unsafe Rust’s pointers are no different from those in C, their incorrect usage can lead to safety issues just like with C. However, Unsafe Rust’s safety philosophy allows developers to fully consider the safety issues related to raw pointers. The standard library also provides some methods to assist developers in using pointers more safely. Developers can completely transform pointers into references or use <code>NonNull&lt;T&gt;</code> to make pointers non-null. Additionally, there are safety checking tools like Miri or <a href="https://model-checking.github.io/kani/">kani</a> that perform safety checks on pointer-related issues.</p>
<p>Unsafe Rust has higher requirements for developers, and its safety may be better because the <code>unsafe</code> keyword in Unsafe Rust can propagate. For developers and reviewers, abstracting safety from Unsafe Rust requires more effort. However, these efforts are worthwhile.</p>
<p>Zig’s safety strategies are not 100% safe and still require developers to consider safety factors. For example, explicit memory management allows developers to explicitly allocate and release memory, thus more clearly controlling the memory’s lifecycle, but also means that developers have to assume more responsibility to ensure that memory errors do not occur.</p>
<p><strong>Therefore, there is no such thing as who is safer than whom.</strong> However, Zig’s performance is better than Unsafe Rust, at least according to the author’s <a href="https://zackoverflow.dev/writing/unsafe-rust-vs-zig/#benchmark-results">benchmark tests</a>.</p>
<h1 id="conclusion" class="toc-item group scroll-mt-20">
    Conclusion
    <a href="#conclusion" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>This article attempts to compare Zig and Unsafe Rust on who is safer, which has recently been discussed on Reddit. Two pieces is not enough to cover all the various details of Unsafe Rust’s safety abstractions. I’ll write subsequent articles for the <a href="/topic/unsafe-rust">#unsafe-rust</a> topic, please stay tuned!</p>
<p>Finally, it is worth noting that this article’s creation was also aided by GPT4.</p>
<p>Thank you for reading.</p>
2024-03-11T22:51:08.327436212+08:00 - 文章标题：Comprehensive Understanding of Unsafe Rust
2024-03-11T22:51:08.337699438+08:00 - 文章内容：<h1 id="introduction" class="toc-item group scroll-mt-20">
    Introduction
    <a href="#introduction" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>As is well known, the Rust language consists of two major parts: Safe Rust and Unsafe Rust. Unsafe Rust is a superset of Safe Rust. This means that all code written in Safe Rust can also work normally in Unsafe Rust, but Unsafe Rust provides additional features and operations that cannot be used directly in Safe Rust.</p>
<p>However, one of the most frequently asked questions in the community is: <strong>Why is Rust considered a safe language when a large amount of Unsafe Rust is used in the standard library?</strong></p>
<p>Moreover, some people in the community even develop PTSD towards Unsafe Rust, deeming anything involving Unsafe as unsafe. Admittedly, we should minimize the use of Unsafe, but when faced with situations where Unsafe is indispensable, we should know how to use Unsafe safely, know how to review Unsafe code, and thus not be so afraid and resistant when seeing Unsafe.</p>
<p>So, the goal of this article is to guide readers through a systematic understanding of Unsafe Rust, truly grasping the ingenious uses of Unsafe Rust.</p>
<h1 id="why-unsafe-rust-is-needed" class="toc-item group scroll-mt-20">
    Why Unsafe Rust is Needed
    <a href="#why-unsafe-rust-is-needed" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>In general, Safe Rust is abstracted from Unsafe Rust. The world itself is Unsafe, so Unsafe comes first, followed by Safe. This is the basic worldview of the Rust language.</strong></p>
<p>This worldview is actually very consistent with the objective world and is very easy for people to understand. The universe is Unsafe, so we need Safe spaceships and spacesuits to explore it; the Earth is Unsafe, so we humans use science and civilization to continuously create Safe homes.</p>
<p>From a language design perspective, the reasons for needing Unsafe Rust are as follows:</p>
<ul>
<li><strong>Providing low-level support for high-level abstractions</strong>: Rust provides some high-level abstractions, such as reference counting, smart pointers, synchronization primitives, etc. These abstractions require Unsafe operations at the lower level, such as raw pointer operations and memory management. Through Unsafe Rust, library developers can implement these low-level operations and encapsulate them in safe interfaces.</li>
<li><strong>High-performance optimization</strong>: To ensure memory safety, the Rust compiler automatically inserts some runtime checks, such as array boundary checks. In some performance-critical scenarios, these checks can become performance bottlenecks. Unsafe Rust allows developers to bypass these checks while ensuring safety, to achieve higher performance.</li>
<li><strong>System-level programming</strong>: As a systems programming language, Rust needs to handle low-level operations, such as operating systems or embedded systems, or driver development. Unsafe Rust provides this flexibility, making Rust suitable for these tasks.</li>
<li><strong>Interoperability with other languages</strong>: In real-world projects, Rust code may need to interact with code written in other languages (such as C/C++). Since these languages may use different memory management and type systems, Rust needs to provide a way to safely communicate with this external code. Unsafe Rust provides such a mechanism, allowing the handling of raw pointers and type conversions in Rust, thus enabling interoperability with other languages.</li>
<li><strong>Language extensibility</strong>: Unsafe Rust provides possibilities for future language features and libraries. By allowing low-level operations, Unsafe Rust enables the Rust community to continually explore new ideas and integrate them into the language.</li>
</ul>
<p>In summary, from the perspective of Rust language design, Unsafe Rust is an intentional design compromise. It meets the needs of low-level operations, performance optimization, and interoperability while ensuring overall safety through strict restrictions and encapsulation.</p>
<h1 id="what-unsafe-rust-can-do" class="toc-item group scroll-mt-20">
    What Unsafe Rust Can Do
    <a href="#what-unsafe-rust-can-do" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>As mentioned earlier, Unsafe Rust is a superset of Safe Rust. Therefore, Unsafe Rust also includes all compiler safety checks in Safe Rust. However, Unsafe Rust also includes operations not found in Safe Rust, i.e., operations that can only be executed in Unsafe Rust:</p>
<ol>
<li><strong>Raw pointer operations</strong>: You can create, dereference, and manipulate raw pointers (<code>*const T</code> and <code>*mut T</code>). This allows you to directly access memory addresses, perform memory allocation, deallocation, and modification, etc.</li>
<li><strong>Calling Unsafe functions</strong>: Unsafe Rust can call functions marked as <code>unsafe</code>. These functions may lead to undefined behavior, so they need to be called within an <code>unsafe</code> code block. These functions are typically used to implement low-level operations, such as memory management, hardware access, etc.</li>
<li><strong>Implementing Unsafe traits</strong>: You can implement traits marked as <code>unsafe</code>. These traits may contain potentially risky operations, and they need to be explicitly marked as <code>unsafe</code> when implemented.</li>
<li><strong>Accessing and modifying mutable static variables</strong>: In Unsafe Rust, you can access and modify mutable static variables with a global lifetime. These variables remain active throughout the entire program execution and may lead to potential data race issues.</li>
<li><strong>Working with <code>Union</code> types</strong>: Since multiple fields share the same memory location, using <code>union</code> carries certain risks. When accessing a <code>union</code> field, the compiler cannot guarantee type safety because it cannot determine which field the currently stored value belongs to. To ensure safe access to <code>union</code> fields, you need to perform operations within an <code>unsafe</code> code block.</li>
<li><strong>Disabling runtime boundary checks</strong>: Unsafe Rust allows you to bypass array boundary checks. By using <code>get_unchecked</code> and <code>get_unchecked_mut</code> methods, you can access array and slice elements without performing boundary checks, thereby improving performance.</li>
<li><strong>Inline assembly</strong>: In Unsafe Rust, you can use inline assembly (the <code>asm!</code> macro) to write processor instructions directly. This allows you to implement platform-specific optimizations and operations.</li>
<li><strong>Foreign Function Interface (FFI)</strong>: Unsafe Rust allows you to interact with code written in other programming languages (such as C/C++). This usually involves native pointer operations, type conversions, and calling unsafe functions.</li>
</ol>
<p>It is important to note that caution is needed when using Unsafe Rust. Whenever possible, prefer using Safe Rust to write code. Although it provides powerful capabilities, it can also lead to undefined behavior and memory safety issues. Therefore, Rust’s official standard library source code implementation and the official <a href="https://rust-lang.github.io/unsafe-code-guidelines/">Unsafe Code Guideline</a> both contain the safety philosophy of Unsafe Rust to maintain its security.</p>
<h1 id="safety-philosophy-of-unsafe-rust" class="toc-item group scroll-mt-20">
    Safety Philosophy of Unsafe Rust
    <a href="#safety-philosophy-of-unsafe-rust" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The safety philosophy of Unsafe Rust is <strong>allowing developers to perform low-level operations and performance optimizations under restricted conditions while ensuring that the overall code remains safe</strong>.</p>
<h2 id="safety-abstraction:-maintaining-safety-invariants-and-validity-invariants" class="toc-item group scroll-mt-20">
    Safety Abstraction: Maintaining Safety Invariants and Validity Invariants
    <a href="#safety-abstraction:-maintaining-safety-invariants-and-validity-invariants" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>What does it mean for the overall code to remain safe? Unsafe Rust has a term called <strong>Safety Invariant</strong> specifically for defining this.</p>
<p>Safe Rust has compiler safety checks to ensure memory safety and concurrency safety, but for those specialized operation scenarios of Unsafe Rust, the Rust compiler cannot help, so developers themselves need to ensure the memory safety and concurrency safety of the code. Unsafe Rust is the developer’s safety commitment to the Rust compiler: “Leave safety to me to guard!”</p>
<p>In order to abide by this safety commitment when writing Unsafe Rust code, developers must always maintain safety invariants. <strong>Safety invariants refer to the conditions that must be maintained throughout the entire program execution process to ensure memory safety.</strong> These conditions usually include pointer validity, data structure integrity, data access synchronization, etc. Safety invariants primarily focus on the correct execution of the program and the avoidance of undefined behavior. When using Unsafe Rust, developers are responsible for ensuring that these safety invariants are met to avoid memory safety issues.</p>
<p>In the process of maintaining safety invariants, another concept to understand is the <strong>Validity Invariant</strong>. <strong>Validity invariants refer to the conditions that certain data types and structures must meet during their lifetime.</strong> Validity invariants mainly focus on the correctness of data types and structures. For example, for reference types, validity invariants include non-null pointers and valid memory being pointed to. When writing and using Unsafe Rust code, developers need to ensure that these validity invariants are maintained.</p>
<p>There is a certain degree of association between safety invariants and validity invariants because they both focus on the correctness and safety of the code. Maintaining validity invariants often helps ensure that safety invariants are met. For example, ensuring the validity of reference type pointers (validity invariant) can prevent null pointer dereferencing (safety invariant). Although they are related, the areas of focus for safety invariants and validity invariants are different. Safety invariants mainly focus on the memory safety of the entire program and the avoidance of undefined behavior, while validity invariants mainly focus on the correctness of specific data types and structures.</p>
<p>The relationship between them can be summarized in the following aspects:</p>
<ol>
<li><strong>Purpose</strong>: Safety invariants mainly focus on memory safety and data integrity to prevent undefined behavior. Validity invariants focus on the conditions that type instances must meet during their lifetime for correct use.</li>
<li><strong>Scope</strong>: Safety invariants typically involve the memory safety of the entire program or module, while validity invariants are specific to type constraints. To some extent, safety invariants can be regarded as global restrictions, while validity invariants are local restrictions.</li>
<li><strong>Hierarchy</strong>: Safety invariants and validity invariants can interact at different levels. Generally, maintaining validity invariants is the foundation for implementing safety invariants. In other words, the validity invariants of a type are often required for implementing higher-level safety invariants.</li>
<li><strong>Dependency</strong>: Safety invariants depend on validity invariants. When the validity invariants of a type are satisfied, it helps ensure the conditions required for implementing safety invariants. For example, in Rust, safe reference access depends on the underlying type’s validity invariants being satisfied.</li>
</ol>
<p>Therefore, when the Unsafe Rust code violates safety invariants or validity invariants, we say the code is <strong>unsound</strong>. Unsound code may lead to undefined behavior, memory leaks, data races, and other issues. Rust attempts to avoid unsound situations by ensuring memory safety for most code through the compiler and type system, especially avoiding undefined behavior.</p>
<blockquote>
<p>Read More: <a href="https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html">Two Kinds of Invariants: Safety and Validity</a></p>
</blockquote>
<p><strong>Undefined behavior</strong> refers to situations where the program’s execution result is unpredictable. This may be due to out-of-bounds memory access, null pointer dereferencing, data races, and other errors. When encountering undefined behavior, the program may crash, produce incorrect results, or exhibit other unexpected behavior.</p>
<blockquote>
<p>However, some people argue that <a href="https://matklad.github.io/2023/04/02/ub-might-be-the-wrong-term-for-newer-languages.html">using the term “undefined behavior” in newer languages like Zig and Rust may not be precise</a>.</p>
</blockquote>
<p>In Rust, pay special attention to situations that may lead to undefined behavior:</p>
<ol>
<li><strong>Data races</strong>: Data races occur when multiple threads access the same memory location simultaneously, and at least one thread is performing a write operation. Rust’s ownership system and borrow checker prevent most data races at compile time, but in Unsafe Rust, developers need to be extra careful to avoid data races.</li>
<li><strong>Invalid pointer dereferencing</strong>: Dereferencing an invalid pointer (e.g., a null pointer, a pointer to freed memory) leads to undefined behavior.</li>
<li><strong>Integer overflow</strong>: In some cases, integer overflow (e.g., integer addition, subtraction, multiplication, etc.) may cause unexpected program situations. Rust enables integer overflow checks by default in debug mode, <strong>but in Release mode, integer overflow behavior is defined</strong>, see <a href="https://rust-lang.github.io/rfcs/0560-integer-overflow.html">RFC 0560</a>.</li>
<li><strong>Accessing uninitialized memory</strong>: Accessing uninitialized memory leads to undefined behavior. This includes reading or writing uninitialized memory or passing uninitialized memory to external functions.</li>
<li><strong>Incorrect type casting</strong>: Forcing a pointer of one type to be converted to a pointer of another type and then dereferencing it may lead to undefined behavior. This usually occurs in Unsafe Rust code and requires special attention to ensure type conversion is safe.</li>
</ol>
<p>In summary, when using Unsafe Rust, developers need to pay special attention to maintaining safety invariants and validity invariants to avoid Unsound and undefined behavior. We call Unsafe Rust code that strictly follows these principles <strong>Unsafe safety abstractions</strong>. They can be considered Safe, allowing for low-level operations and performance optimization while maintaining overall safety.</p>
<h2 id="examples-from-the-standard-library" class="toc-item group scroll-mt-20">
    Examples from the standard library
    <a href="#examples-from-the-standard-library" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><h3 id="vec<t>" class="toc-item group scroll-mt-20">
    Vec&lt;T&gt;
    <a href="#vec<t>" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>The <code>push</code> method in the <code>Vec&lt;T&gt;</code> type in the standard library is a typical example of an Unsafe safety abstraction. The following code is a simplified implementation of this method:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Vec</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    ptr</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">*mut</span><span style="color:#61676c;"> T,
</span><span style="color:#61676c;">    len</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">    cap</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Vec</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">push</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">value</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> T) {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">len </span><span style="color:#ed9366;">== </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">cap {
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// Reallocate memory (detailed implementation omitted here)
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">reallocate</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// Ensure safety invariants and validity invariants are satisfied here
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> end </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">add</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">len)</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// end is a valid pointer because len &lt; cap
</span><span style="color:#61676c;">            std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">ptr</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">write(end</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> value)</span><span style="color:#61676ccc;">;      </span><span style="font-style:italic;color:#abb0b6;">// Write value to memory pointed to by end, assuming end is valid
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">len </span><span style="color:#ed9366;">+= </span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">;                    </span><span style="font-style:italic;color:#abb0b6;">// Update the length
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>In this simplified version of the <code>Vec&lt;T&gt;::push()</code> implementation. Now let’s analyze how safety invariants and validity invariants are satisfied:</p>
<ol>
<li><strong>Safety invariants</strong>:
<ul>
<li>Memory allocation and deallocation: The <code>push</code> method calls the <code>reallocate</code> method (detailed implementation omitted here) when the length equals the capacity, ensuring sufficient memory is allocated. This ensures that there will be no out-of-bounds memory access.</li>
<li>Data access synchronization: In this example, the <code>push</code> method is a mutable reference (<code>&amp;mut self</code>), ensuring that there are no other mutable or immutable references when called. This ensures that there is no data race.</li>
</ul>
</li>
<li><strong>Validity invariants</strong>:
<ul>
<li>Pointer validity: The <code>end</code> pointer is calculated using <code>self.ptr.add(self.len)</code>. Since <code>self.len &lt; self.cap</code> (after <code>reallocate</code>), we can ensure that the memory address pointed to by <code>end</code> is valid.</li>
<li>Data type correctness: <code>std::ptr::write(end, value)</code> writes <code>value</code> to the memory pointed to by <code>end</code>. Since we have already ensured the validity of <code>end</code>, this operation is safe and ensures data type correctness.</li>
</ul>
</li>
</ol>
<p>By maintaining safety invariants and validity invariants, the <code>Vec&lt;T&gt;</code> type in the Rust standard library can provide high-performance operations while ensuring memory safety. In this simplified version of the <code>push</code> method, Unsafe Rust is used to perform low-level memory operations, but throughout the process, developers ensure that safety invariants and validity invariants are satisfied.</p>
<p>In conclusion, the Rust standard library uses Unsafe Rust for low-level operations and optimizations while ensuring safety invariants and validity invariants are satisfied, achieving safe and high-performance abstractions. This approach is also applied in many other standard library types and methods, such as <code>String</code>, <code>HashMap</code>, etc. This allows developers to take advantage of low-level operations and performance optimizations while writing safe, high-level code.</p>
<h3 id="string" class="toc-item group scroll-mt-20">
    String
    <a href="#string" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>In the standard library’s <code>String</code> type, there is a pair of similar methods: <code>from_utf8</code> and <code>from_utf8_unchecked</code>. The difference is that the former is a Safe function, while the latter is an Unsafe function.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">from_utf8</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">vec</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">, FromUtf8Error&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// This is not the source code of the standard library but a demonstration
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> vec </span><span style="color:#ed9366;">= </span><span style="color:#fa6e32;">match </span><span style="color:#f07171;">run_utf8_validation</span><span style="color:#61676c;">(v) {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// SAFETY: validation succeeded.
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{ </span><span style="color:#f07171;">from_utf8_unchecked</span><span style="color:#61676c;">(v) })
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err) </span><span style="color:#ed9366;">=&gt; </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">String </span><span style="color:#61676c;">{ vec })
</span><span style="color:#61676c;">}
</span></pre>
<p>In the <code>from_utf8</code> code, the input byte sequence is checked for UTF8 encoding to ensure the data validity of the vec argument. Therefore, the entire function will not exhibit Unsound behavior when handling arbitrary byte sequences, especially without undefined behavior. At this point, we can consider it to maintain safety invariants. Then the function is safe.</p>
<p><code>from_utf8_unchecked</code> source code example:</p>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;">/// # Safety
</span><span style="font-style:italic;color:#abb0b6;">///
</span><span style="font-style:italic;color:#abb0b6;">/// This function is unsafe because it does not check that the bytes passed
</span><span style="font-style:italic;color:#abb0b6;">/// to it are valid UTF-8. If this constraint is violated, it may cause
</span><span style="font-style:italic;color:#abb0b6;">/// memory unsafety issues with future users of the `String`, as the rest of
</span><span style="font-style:italic;color:#abb0b6;">/// the standard library assumes that `String`s are valid UTF-8.
</span><span style="color:#fa6e32;">pub unsafe fn </span><span style="color:#f29718;">from_utf8_unchecked</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">bytes</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> String {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">String </span><span style="color:#61676c;">{ vec</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> bytes }
</span><span style="color:#61676c;">}
</span></pre>
<p>In this function, the input byte sequence is not checked for UTF8 encoding but is directly constructed as a String, which is risky. Since the data validity of the <code>bytes</code> argument cannot be guaranteed, the entire function is <code>unsafe</code>, so it needs to be marked as <code>unsafe fn</code>. A <code>Safety</code> documentation comment should also be added to inform developers using this function under what circumstances it is safe to use, that is, to let the caller maintain the safety invariants.</p>
<p>Some readers might wonder, <strong>why do we need a <code>from_utf8_unchecked</code> function when there is already a <code>from_utf8</code> function?</strong></p>
<p>This is a convention in Unsafe Rust practice, providing an <code>unsafe</code> function with an <code>_unchecked</code> name suffix as a performance outlet. For example, in some environments, the <code>bytes</code> argument of the <code>from_utf8_unchecked</code> function is validated for UTF8 encoding externally (e.g., in C interfaces), so there is no need to validate it twice here. For performance reasons, the <code>_unchecked</code> method can be used.</p>
<h2 id="example-from-ffi" class="toc-item group scroll-mt-20">
    Example from FFI
    <a href="#example-from-ffi" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>One common scenario for Unsafe Rust is to interact with various other languages through C-ABI, i.e., FFI (Foreign Function Interface) scenarios. In this situation, we need to consider many safety factors to achieve Unsafe safety abstraction. Let’s demonstrate how to achieve safety abstraction in FFI with an example.</p>
<p>Suppose we have a C language library (<code>my_c_lib.c</code>):</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">#include </span><span style="color:#86b300;">&lt;stdint.h&gt;
</span><span style="color:#61676c;">
</span><span style="font-style:italic;color:#55b4d4;">int32_t </span><span style="color:#f29718;">add</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">int32_t </span><span style="color:#ff8f40;">a</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">int32_t </span><span style="color:#ff8f40;">b</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">return</span><span style="color:#61676c;"> a </span><span style="color:#ed9366;">+</span><span style="color:#61676c;"> b</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span></pre>
<p>We need to write a Rust program to call this <code>add</code> function. First, we need to create an FFI binding in Rust:</p>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;">// my_c_lib.rs
</span><span style="color:#fa6e32;">extern </span><span style="color:#86b300;">&quot;C&quot; </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">add</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">b</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">i32</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>Now, we can create a safe Rust function that wraps this Unsafe FFI binding:</p>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;">// my_c_lib.rs
</span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">safe_add</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">b</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">i32 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// The developer is responsible for maintaining safety invariants and validity invariants
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// If a or b are not valid i32, return 0 (depending on the specific business choice)
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">if</span><span style="color:#61676c;"> a </span><span style="color:#ed9366;">&gt;= </span><span style="color:#fa6e32;">i32</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">MAX </span><span style="color:#ed9366;">||</span><span style="color:#61676c;"> b </span><span style="color:#ed9366;">&gt;= </span><span style="color:#fa6e32;">i32</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">MAX </span><span style="color:#ed9366;">|| </span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">i32</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">MAX </span><span style="color:#ed9366;">-</span><span style="color:#61676c;"> a </span><span style="color:#ed9366;">-</span><span style="color:#61676c;"> b) </span><span style="color:#ed9366;">&lt; </span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{</span><span style="color:#fa6e32;">return </span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">unsafe </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#f07171;">add</span><span style="color:#61676c;">(a</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> b)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>In this example, we wrapped the Unsafe FFI binding <code>add</code> function in a safe <code>safe_add</code> function. This way, when other Rust code calls <code>safe_add</code>, they don’t have to worry about potential safety issues (e.g., an integer overflow). Unsafe Rust code is limited to the internals of the <code>safe_add</code> function, and the developer is responsible for ensuring that safety invariants and validity invariants are satisfied.</p>
<p>Now we can use the <code>safe_add</code> function safely in Rust:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> result </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">my_c_lib</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">safe_add(</span><span style="color:#ff8f40;">5</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">7</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;5 + 7 = </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> result)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>In this FFI scenario, Unsafe Rust is used to call the <code>add</code> function implemented in C. By encapsulating Unsafe code in a safe API, we ensure the safety of Rust code when calling this API. In practice, developers need to pay attention to potential safety invariants and validity invariants issues and ensure they are satisfied when encapsulating Unsafe Rust.</p>
<h1 id="unsafe-rust-programming-guidelines" class="toc-item group scroll-mt-20">
    Unsafe Rust Programming Guidelines
    <a href="#unsafe-rust-programming-guidelines" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Following these guidelines in Unsafe Rust practices can effectively achieve Unsafe safety abstraction:</p>
<ol>
<li><strong>Minimize unsafe code</strong>: The use of Unsafe Rust should be limited and used only when necessary. Most features should be implemented using Safe Rust to ensure memory safety and avoid undefined behavior. When possible, Unsafe Rust code should be encapsulated in a safe API to provide users with a safe interface.</li>
<li><strong>Explicitly unsafe</strong>: Unsafe Rust must be explicitly marked as <code>unsafe</code> so that developers can clearly identify potential safety risks. When encountering the <code>unsafe</code> keyword, developers should pay special attention and carefully review the code to ensure proper handling of potential memory safety issues and undefined behavior. Developers need to carefully consider whether a function or trait should be marked <code>unsafe</code>, and should not intentionally remove or not use the unsafe mark where it should be marked as <code>unsafe</code>.</li>
<li><strong>Review and testing</strong>: Unsafe Rust code requires stricter review and testing to ensure its correctness. This includes testing low-level operations, memory allocation and release, and concurrent behavior. Ensuring the correctness of Unsafe Rust code is crucial, as errors can lead to serious memory safety issues and undefined behavior.</li>
<li><strong>Documentation and comments</strong>: Unsafe Rust code should be well documented and commented on so that other developers can understand its purpose, operation, and potential risks. This helps maintainers and other contributors follow correct safety practices when modifying the code.</li>
<li><strong>Reduce complexity</strong>: Unsafe Rust code should be as simple and straightforward as possible to facilitate understanding and maintenance. Complex Unsafe Rust code may lead to hard-to-find errors, increasing potential safety risks.</li>
</ol>
<p>By following these principles, Unsafe Rust’s safety philosophy aims to balance the need for low-level operations and performance optimization while ensuring that the overall code remains safe. Although the use of Unsafe Rust may lead to potential safety issues, the Rust language attempts to minimize these risks through explicit marking, limiting the scope of use, strict review, and thorough documentation.</p>
<h1 id="conclusion" class="toc-item group scroll-mt-20">
    Conclusion
    <a href="#conclusion" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>This article attempts to help readers understand the safety philosophy of Unsafe Rust. In the next article <a class="inline-link"
                    href="/issue-3/is-zig-safer-than-unsafe-rust"
                    data-title="Is Zig safer than Unsafe Rust?"
                    data-url="/issue-3/is-zig-safer-than-unsafe-rust"
                    data-image="/static/ferris/3.jpg">
                    Is Zig safer than Unsafe Rust?
            </a>
, I’ll attempt to compare Zig and Unsafe Rust on who is safer.</p>
<p>Thank you for reading.</p>
2024-03-11T22:51:08.337868598+08:00 - 文章标题：Pursuit of Performance on Building a JavaScript Compiler
2024-03-11T22:51:08.347903996+08:00 - 文章内容：<p>I am currently working on a personal project called the <a href="https://github.com/Boshen/oxc">JavaScript Oxidation Compiler</a>.
The compiler has a fast linter that can process around 1000 files per 100 milliseconds.
I am also in the process of developing a minifier. See the project README for more details.</p>
<h1 id="personal-background" class="toc-item group scroll-mt-20">
    Personal Background
    <a href="#personal-background" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>My journey with Rust began a few years back when <a href="https://github.com/Brooooooklyn">@Brooooooklyn</a> was still sitting beside me.
He was banging his head against the wall and kept mumbling about this new language called Rust which he could not understand.</p>
<p>Two years later at a different company, I was handed a crumbling node.js API server that was demanded with high throughput.
I decided to rewrite it in Rust and it succeeded. The server handled unimaginable throughput without any problems.</p>
<p>I was convinced after this experience. I told myself that I wanted to become a full-time Rust developer.</p>
<p>So eventually I started wandering around the internet looking for interesting open-source projects. The <a href="https://rome.tools">Rome project</a> caught my attention -
<a href="https://rome.tools/blog/2021/09/21/rome-will-be-rewritten-in-rust/">Rome will be written in Rust</a>.</p>
<p>Although I had previously looked at JavaScript tools as black boxes and never studied how they work, I decided to dive in and learn anyway.
I read everything about compilers and started participating in the Rome project.
But one day it hit me - “impostor syndrome”. I know nothing about parsers nor compilers or anything about Rust.</p>
<blockquote>
<p>For the things we have to learn before we can do them, we learn by doing them — Aristotle</p>
</blockquote>
<p>I started writing my own compiler in Rust to fully understand everything.</p>
<h2 id="on-performance" class="toc-item group scroll-mt-20">
    On Performance
    <a href="#on-performance" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>After two years of writing Rust, performance has become an ingrained discipline for me - it boils down to
<strong>allocate less memory</strong> and <strong>use fewer CPU cycles</strong>.</p>
<p>However, achieving optimal performance can be difficult without the knowledge of the problem domain or awareness of potential solutions.</p>
<p>I will take you on my journey of performance and optimization in the following sections.
My preferred method of learning is through a combination of research, trial, and error,
so the following sections will be organized as such.</p>
<h1 id="parsing" class="toc-item group scroll-mt-20">
    Parsing
    <a href="#parsing" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Oxc is a standard compiler that includes an abstract syntax tree (AST), a lexer, and a recursive descent parser.</p>
<h2 id="abstract-syntax-tree-(ast)" class="toc-item group scroll-mt-20">
    Abstract Syntax Tree (AST)
    <a href="#abstract-syntax-tree-(ast)" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>The first architectural design for a compiler is its AST.</p>
<p>All JavaScript tools work on the AST level, for example:</p>
<ul>
<li>A linter (e.g. ESLint) checks the AST for errors</li>
<li>A formatter (e.g.prettier) prints the AST back to JavaScript text</li>
<li>A minifier (e.g. terser) transforms the AST</li>
<li>A bundler connects all import and export statements between ASTs from different files</li>
</ul>
<p>It will be painful to build these tools if the AST is not user-friendly.</p>
<p>For JavaScript, the most used AST specification is <a href="https://github.com/estree/estree">estree</a>.
My first AST version replicates estree:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Program </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">node</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Node,
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">body</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;Statement&gt;,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">pub enum </span><span style="color:#399ee6;">Statement </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    VariableDeclarationStatement(VariableDeclaration)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">VariableDeclaration </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">node</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Node,
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">declarations</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;VariableDeclarator&gt;,
</span><span style="color:#61676c;">}
</span></pre>
<p>In Rust, declaring a tree is relatively straightforward, as it involves using structs and enums.</p>
<h3 id="memory-allocation" class="toc-item group scroll-mt-20">
    Memory Allocation
    <a href="#memory-allocation" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>I worked on this version of AST for a couple of months while writing the parser.
And one day I decided to profile it. The profiler showed the program was spending a lot of time calling <code>drop</code>.</p>
<p>💡 Nodes of the AST are allocated on the heap via <code>Box</code> or <code>Vec</code>, they are allocated individually so they are dropped in sequential order.</p>
<p>Is there a solution to mitigate this?</p>
<p>So while working on the parser I studied some of the other JavaScript parsers written in Rust,
mainly <a href="https://github.com/ratel-rust/ratel-core">ratel</a> and <a href="https://github.com/mozilla-spidermonkey/jsparagus">jsparagus</a>.</p>
<p>Both of these parsers declare their AST with a lifetime annotation,</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub enum </span><span style="color:#399ee6;">Statement</span><span style="color:#61676c;">&lt;&#39;ast&gt; {
</span><span style="color:#61676c;">    Expression(ExpressionNode&lt;</span><span style="color:#fa6e32;">&#39;ast</span><span style="color:#61676c;">&gt;)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">}
</span></pre>
<p>and they have an accompanying file called <code>arena.rs</code>.</p>
<p>I did not understand what it does so I neglected them until I started reading about their usage of memory arenas:
<a href="https://docs.rs/bumpalo/latest/bumpalo/">bumpalo</a> and <a href="https://docs.rs/toolshed/latest/toolshed/struct.Arena.html">toolshed</a>.</p>
<p>In summary, memory arena allocates memory upfront in chunks or pages and deallocate altogether when the arena is dropped.
The AST is allocated on the arena so dropping the AST is a fast operation.</p>
<p>Another nice side effect that comes with this is that,
the AST is constructed in a specific order, and tree traversal also follows the same order, resulting in linear memory access during the visitation process.
This access pattern will be efficient since all nearby memory will be read into the CPU cache in pages, resulting in faster access times.</p>
<p>Unfortunately it can be challenging for Rust beginners to use memory arenas because all data structures and relevant functions need to be parameterized by lifetime annotations.
It took me five attempts to allocate the AST inside <code>bumpalo</code>.</p>
<p>Changing to a memory arena for the AST resulted around 20% performance improvement.</p>
<h3 id="enum-sizes" class="toc-item group scroll-mt-20">
    Enum Sizes
    <a href="#enum-sizes" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>Due to the recursive nature of ASTs, we need to define the types in a way to avoid the “recursive without indirection” error:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">error[E0072]: recursive types `Enum` and `Variant` have infinite size
</span><span style="color:#61676c;"> --&gt; crates/oxc_linter/src/lib.rs:1:1
</span><span style="color:#61676c;">  |
</span><span style="color:#61676c;">1 | enum Enum {
</span><span style="color:#61676c;">  | ^^^^^^^^^
</span><span style="color:#61676c;">2 |     Variant(Variant),
</span><span style="color:#61676c;">  |             ------- recursive without indirection
</span><span style="color:#61676c;">3 | }
</span><span style="color:#61676c;">4 | struct Variant {
</span><span style="color:#61676c;">  | ^^^^^^^^^^^^^^
</span><span style="color:#61676c;">5 |     field: Enum,
</span><span style="color:#61676c;">  |            ---- recursive without indirection
</span><span style="color:#61676c;">  |
</span><span style="color:#61676c;">help: insert some indirection (e.g., a `Box`, `Rc`, or `&amp;`) to break the cycle
</span><span style="color:#61676c;">  |
</span><span style="color:#61676c;">2 ~     Variant(Box&lt;Variant&gt;),
</span><span style="color:#61676c;">3 | }
</span><span style="color:#61676c;">4 | struct Variant {
</span><span style="color:#61676c;">5 ~     field: Box&lt;Enum&gt;,
</span></pre>
<p>There are two ways to do this. Either box the enum in the enum variant or box the struct field.</p>
<p>I found the same question in the Rust forum back in 2017,
<a href="https://users.rust-lang.org/t/is-there-a-better-way-to-represent-an-abstract-syntax-tree/9549/4">Is there a better way to represent an abstract syntax tree?</a></p>
<p>Aleksey (matklad) told us to box the enum variants to keep the <code>Expression</code> enum small. But what does this mean?</p>
<p>As it turns out, the memory layout of a Rust enum is dependent on the sizes of all its variants, its total byte size dependents on the largest variant.
For example, the following enum will take up 56 bytes (1 byte for the tag, 48 bytes for the payload, and 8 bytes for alignment).</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">enum </span><span style="color:#399ee6;">Enum </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    A</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#abb0b6;">// 0 byte payload
</span><span style="color:#61676c;">    B(</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#abb0b6;">// 24 byte payload
</span><span style="color:#61676c;">    C { first</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> last</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">String </span><span style="color:#61676c;">}</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#abb0b6;">// 48 byte payload
</span><span style="color:#61676c;">}
</span></pre>
<p>In a typical JavaScript AST, the <code>Expression</code> enum holds 45 variants and the <code>Statement</code> enum holds 20 variants. They take up more than 200 bytes if not boxed by enum variants.
These 200 bytes have to be passed around, and also accessed every time we do a <code>matches!(expr, Expression::Variant(_))</code> check, which is not very cache friendly for performance.</p>
<p>So to make memory access efficient, it is best to box the enum variants.</p>
<p>The <a href="https://nnethercote.github.io/perf-book/type-sizes.html">perf-book</a> describes additional info on how to find large types.</p>
<p>I also copied the test for restricting small enum sizes.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">cfg</span><span style="color:#61676c;">(</span><span style="color:#f29718;">all</span><span style="color:#61676c;">(target_arch </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;x86_64&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> target_pointer_width </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;64&quot;</span><span style="color:#61676c;">))]
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">test</span><span style="color:#61676c;">]
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">no_bloat_enum_sizes</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">use </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">mem</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">size_of</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">use crate</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">ast</span><span style="color:#ed9366;">::*</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">assert_eq!</span><span style="color:#61676c;">(size_of</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;Statement&gt;()</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">16</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">assert_eq!</span><span style="color:#61676c;">(size_of</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;Expression&gt;()</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">16</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">assert_eq!</span><span style="color:#61676c;">(size_of</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;Declaration&gt;()</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">16</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>Boxing the enum variants resulted around 10% speed-up.</p>
<h3 id="span" class="toc-item group scroll-mt-20">
    Span
    <a href="#span" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>Occasionally, we may not realize that a smaller memory footprint is possible until we spend some extra time examining the data structures.</p>
<p>In this instance, the leaf of all AST nodes contains a small data structure called the “span”, which is used for storing the byte offset from the source text and comprises two <code>usize</code>s.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Node </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">start</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">end</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">}
</span></pre>
<p>It was <a href="https://github.com/Boshen/oxc/pull/4#pullrequestreview-1294538874">pointed out to me</a> that I can safely change <code>usize</code> to <code>u32</code>
to reduce peak memory because larger than <code>u32</code> is a 4GB file.</p>
<p>Changing to <code>u32</code> improved the performance <a href="https://github.com/Boshen/oxc/pull/31">up to 5% performance on large files</a>.</p>
<h3 id="strings-and-identifiers" class="toc-item group scroll-mt-20">
    Strings and Identifiers
    <a href="#strings-and-identifiers" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>Inside the AST, one may attempt to use a string reference to the source text for identifier names and string literals.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">StringLiteral</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">value</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Identifier</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">name</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">}
</span></pre>
<p>But unfortunately in JavaScript, strings and identifiers can have <a href="https://mathiasbynens.be/notes/javascript-escapes">escape sequences</a>,
i.e. <code>'\251'</code>, <code>'\xA9'</code> and <code>'©'</code> are the same for the copyright symbol.</p>
<p>This implies that we must compute the escaped values and allocate a new <code>String</code>.</p>
<h3 id="string-interning" class="toc-item group scroll-mt-20">
    String interning
    <a href="#string-interning" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>When there are lots of heap-allocated strings,
a technique called <a href="https://en.wikipedia.org/wiki/String_interning">string interning</a> can be used to reduce total memory by storing only one copy of each distinct string value.</p>
<p><a href="https://crates.io/crates/string_cache">string-cache</a> is a popular and widely used library published by the servo team.
Initially, I used the <code>string-cache</code> library for identifiers and strings in the AST.
The performance of the parser was fast in a single thread,
but when I started implementing the linter where there are multiples parser running parallel with rayon,
CPU utilization was at about 50% of all cores.</p>
<p>Upon profiling, a method called <code>parking_lot::raw_mutex::RawMutex::lock_slow</code> showed up on the top of the execution time.
I did not know much about locks and multi-core programming,
but a global lock was just strange to start with,
so I decided to remove the <code>string-cache</code> library to enable full CPU utilization.</p>
<p>Removing <code>string-cache</code> from the AST improved the performance of parallel parsing by about 30%.</p>
<h4 id="string-cache" class="toc-item group scroll-mt-20">
    string-cache
    <a href="#string-cache" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h4>
<p>Half a year later, while working on another performance-critical project,
the <code>string-cache</code> library resurfaced again. It was blocking all the threads during parallel text parsing.</p>
<p>I decided to study what <code>string-cache</code> does because I am
prepared this time after reading the book <a href="https://marabos.nl/atomics/">Rust Atomics and Locks</a> by Mara Bos.</p>
<p>Here are the
<a href="https://github.com/servo/string-cache/blob/6c044c91bb3d8212dae931152a7895f498574f71/src/dynamic_set.rs#L41-L42">relevant</a>
<a href="https://github.com/servo/string-cache/blob/6c044c91bb3d8212dae931152a7895f498574f71/src/atom.rs#L204">code</a>
around the lock. Please note that the code was written eight years ago in 2015.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">crate</span><span style="color:#61676c;">) </span><span style="color:#fa6e32;">static </span><span style="color:#ff8f40;">DYNAMIC_SET</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Lazy&lt;Mutex&lt;Set&gt;&gt; </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Lazy</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(|| {
</span><span style="color:#61676c;">    Mutex</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new({
</span><span style="color:#61676c;">
</span><span style="font-style:italic;color:#abb0b6;">// ... in another place
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> ptr</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">ptr</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">NonNull&lt;Entry&gt; </span><span style="color:#ed9366;">=
</span><span style="color:#61676c;">    </span><span style="color:#ff8f40;">DYNAMIC_SET</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">lock</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">insert</span><span style="color:#61676c;">(string_to_add</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> hash</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">g)</span><span style="color:#61676ccc;">;
</span></pre>
<p>So this is straightforward. It locks the data structure <code>Set</code> every time a string is being inserted.
As this routine is called frequently within a parser, its performance is impacted negatively by synchronization.</p>
<p>Now let’s take a look at the <a href="https://github.com/servo/string-cache/blob/6c044c91bb3d8212dae931152a7895f498574f71/src/dynamic_set.rs#L53-L86"><code>Set</code> data structure</a>
and see what it does:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">crate</span><span style="color:#61676c;">) </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">insert</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">string</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Cow&lt;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">&gt;, </span><span style="color:#ff8f40;">hash</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">u32</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">NonNull&lt;Entry&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> bucket_index </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">(hash </span><span style="color:#ed9366;">&amp; </span><span style="color:#ff8f40;">BUCKET_MASK</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">usize</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> ptr</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#61676c;">&lt;Entry&gt;&gt; </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">buckets[bucket_index]</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_mut</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">while let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(entry) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> ptr</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">take</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">if</span><span style="color:#61676c;"> entry</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">hash </span><span style="color:#ed9366;">==</span><span style="color:#61676c;"> hash </span><span style="color:#ed9366;">&amp;&amp; *</span><span style="color:#61676c;">entry</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">string </span><span style="color:#ed9366;">== *</span><span style="color:#61676c;">string {
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">if</span><span style="color:#61676c;"> entry</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">ref_count</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_add</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> SeqCst) </span><span style="color:#ed9366;">&gt; </span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">                    </span><span style="color:#fa6e32;">return </span><span style="color:#61676c;">NonNull</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ed9366;">**</span><span style="color:#61676c;">entry)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                }
</span><span style="color:#61676c;">                entry</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">ref_count</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fetch_sub</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> SeqCst)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">break</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">            ptr </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> entry</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">next_in_bucket</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_mut</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">debug_assert!</span><span style="color:#61676c;">(mem</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">align_of</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;Entry&gt;() </span><span style="color:#ed9366;">&gt;= </span><span style="color:#ff8f40;">ENTRY_ALIGNMENT</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> string </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> string</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_owned</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> entry </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(Entry {
</span><span style="color:#61676c;">        next_in_bucket</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">buckets[bucket_index]</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">take</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        hash</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        ref_count</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">AtomicIsize</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        string</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> string</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_boxed_str</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> ptr </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">NonNull</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ed9366;">*</span><span style="color:#61676c;">entry)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">buckets[bucket_index] </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(entry)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    ptr
</span><span style="color:#61676c;">}
</span></pre>
<p>It looks like it is looking for a bucket to store the string and it inserts the string if it is not in the bucket.</p>
<p>💡 Is this linear probing? If this is linear probing then this <code>Set</code> is just a <code>HashMap</code> without saying it is a <code>HashMap</code>.
💡 If this is a <code>HashMap</code>, then <code>Mutex&lt;HashMap&gt;</code> is a concurrent hashmap.</p>
<p>Although the solution may seem straightforward when we know what to look for, it took me a month to figure this out because I was unaware of the issue.
When it became evident that this is just a concurrent hashmap, applying the Mutex to the buckets instead of the entire hashmap was a clear and logical solution.
Within an hour of implementing this change, I submitted a pull request and was happy with the outcome 😃.</p>
<p>It is worth mentioning that string interning is a battlefield within the Rust community.
For the example shown in <a href="https://dev.to/cad97/string-interners-in-rust-797">this blog post</a>,
there are single-threaded libraries such <code>string-interner</code>, <code>lasso</code>, <code>lalrpop-intern</code>, <code>intaglio</code> and <code>strena</code>.</p>
<p>Since we are parsing files in parallel, an option is to utilize a multi-threaded string interner library such as <a href="https://crates.io/crates/ustr"><code>ustr</code></a>.
However, after profiling both <code>ustr</code> and the enhanced version of <code>string-cache</code>, it became apparent that the performance was still below expectations compared to the approach I am going to explain below.</p>
<p>Some preliminary guesses for the sub-par performance are:</p>
<ul>
<li>Hashing - the interners need to hash the string for deduplication</li>
<li>Indirection - we need to read the string value from a “far away” heap, which is not cache friendly</li>
</ul>
<h3 id="string-inlining" class="toc-item group scroll-mt-20">
    String Inlining
    <a href="#string-inlining" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>So we are back to the initial problem of having to allocate lots of strings.
Fortunately, there is a partial solution to this problem if we look at what kind of data we are dealing with:
short JavaScript variable names and some short strings.
There is a technique called string inlining,
where we store all of the bytes of a string on the stack.</p>
<p>In essence, we want the following enum to store our string.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">enum </span><span style="color:#399ee6;">Str </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    Static(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;static str</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    Inline(InlineReprensation)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    Heap(</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">}
</span></pre>
<p>To minimize the size of the enum, <code>InlineRepresentation</code> should have the same size as <code>String</code>.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">cfg</span><span style="color:#61676c;">(</span><span style="color:#f29718;">all</span><span style="color:#61676c;">(target_arch </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;x86_64&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> target_pointer_width </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;64&quot;</span><span style="color:#61676c;">))]
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">test</span><span style="color:#61676c;">]
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">test_size</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">use </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">mem</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">size_of</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">assert_eq!</span><span style="color:#61676c;">(size_of</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;()</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">size_of</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;InlineReprensation&gt;())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>Many crates in the Rust community aim to optimize memory usage. This is yet another battlefield within the community.
The most popular ones are</p>
<ul>
<li><a href="https://crates.io/crates/smol_str">smol_str</a></li>
<li><a href="https://crates.io/crates/smartstring">smartstring</a></li>
<li><a href="https://crates.io/crates/compact_str">compact_str</a></li>
<li><a href="https://crates.io/crates/flexstr">flexstr</a></li>
</ul>
<p>Each of these crates have unique characteristics and approaches to achieving memory optimization, leading to a variety of trade-offs and considerations when choosing which one to use.
For example <code>smol_str</code> and <code>flexstr</code> clones are O(1).
<code>flexstr</code> can store 22 bytes, <code>smol_str</code> and <code>smartstring</code> can store 23 bytes, and <code>compact_str</code> can store 24 bytes on 64-bit systems.</p>
<p><a href="https://fasterthanli.me">https://fasterthanli.me</a> has a <a href="https://fasterthanli.me/articles/small-strings-in-rust">deep dive</a> on this topic.</p>
<p>Changing <code>String</code> to <code>compact_str::CompactStr</code> reduced memory allocations by a large amount.</p>
<h2 id="lexer" class="toc-item group scroll-mt-20">
    Lexer
    <a href="#lexer" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2><h3 id="token" class="toc-item group scroll-mt-20">
    Token
    <a href="#token" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>The job of the lexer (also known as tokenizer) is to turn source text into structured data called a token.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Token </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">kind</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Kind,
</span><span style="color:#61676c;">}
</span></pre>
<p>To make it easier to work with, a token kind is typically defined as an enum in Rust. The variants of the enums hold the corresponding data for each token.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub enum </span><span style="color:#399ee6;">Kind </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Keywords
</span><span style="color:#61676c;">    For</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    While</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Literals
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    Num(</span><span style="color:#fa6e32;">f64</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">}
</span></pre>
<p>This enum currently uses 32 bytes, and a lexer often need to construct millions of this token <code>Kind</code>.
Every time it constructs a <code>Kind::For</code> or <code>Kind::While</code>, it has to allocate 32 bytes of memory on the stack.</p>
<p>A clever way to improve this is to break up the enum variant to keep <code>Kind</code> to a single byte and move the values into another enum,</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Token</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">kind</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Kind,
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">value</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> TokenValue
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">pub enum </span><span style="color:#399ee6;">TokenValue </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">None</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    Num(</span><span style="color:#fa6e32;">f64</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">}
</span></pre>
<p>Since we control all the parsing code, it is our job to keep this safe by always declaring the corresponding token value to its kind.</p>
<p>While a <code>TokenValue</code> of 32 bytes is already quite small, it may still have a negative impact on performance because it is allocated frequently.</p>
<p>Let’s take a look at the <code>String</code> type and see what we can find, by using the “go-to definition” in our code editors,
we’ll go through <code>String</code> -&gt; <code>Vec</code> -&gt; <code>RawVec</code>:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">String </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    vec</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">&gt;,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Vec </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    buf</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">RawVec&lt;T, A&gt;,
</span><span style="color:#61676c;">    len</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">RawVec </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    ptr</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Unique&lt;T&gt;,
</span><span style="color:#61676c;">    cap</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">    alloc</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> A,
</span><span style="color:#61676c;">}
</span></pre>
<p>As advertised, a <code>String</code> is just a <code>Vec</code> of <code>u8</code>s, and a <code>Vec</code> has a length and a capacity field.
Since we are never going to mutate this string, an optimization in terms of memory usage would be to drop the cap field and use a string slice (<code>&amp;str</code>) instead.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub enum </span><span style="color:#399ee6;">TokenValue</span><span style="color:#61676c;">&lt;&#39;a&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">None</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    Num(</span><span style="color:#fa6e32;">f64</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">}
</span></pre>
<p><code>TokenValue</code> becomes 24 bytes.</p>
<p>While using a string slice instead of String in <code>TokenValue</code> would reduce memory usage, it does come with the downside of adding a lifetime annotation.
This can lead to issues with the borrow checker and the lifetime annotation will propagate to the rest of the codebase, making our code somewhat difficult to manage.
I lost the borrow checking game 8 months ago but <a href="https://github.com/Boshen/oxc/pull/174">finally won</a> when I revisited this.</p>
<p>When it makes sense, we can always go for the owned version of the immutable data instead of using references.
For example <code>Box&lt;str&gt;</code> for <code>String</code> and <code>Box&lt;[u8]&gt;</code> for <code>Vec&lt;u8&gt;</code>.</p>
<p>In summary, we can always come up with tricks to keep our data structures small,
and it will sometimes reward us performance improvement.</p>
<h3 id="cow" class="toc-item group scroll-mt-20">
    Cow
    <a href="#cow" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>I first encountered the term <code>Cow</code> when I was studying jsparagus’s code,
it has an infrastructure called <a href="https://github.com/mozilla-spidermonkey/jsparagus/blob/212f6bdbc2cae909e7d5cfebf36284560c3c4ef4/crates/parser/src/lexer.rs#L2256"><code>AutoCow</code></a>.</p>
<p>I vaguely understood what the code was doing.
When a JavaScript string is being tokenized,
it allocates a new string when it encounters an escaped sequence or it returns the original string slice if it doesn’t:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">finish</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">lexer</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">Lexer&lt;</span><span style="color:#fa6e32;">&#39;alloc</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;alloc str </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">value</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">take</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(arena_string) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> arena_string</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_bump_str</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">None </span><span style="color:#ed9366;">=&gt; &amp;</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">start[</span><span style="color:#ed9366;">..</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">start</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">-</span><span style="color:#61676c;"> lexer</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">chars</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_str</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">()]</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>This is clever because 99.9% of the time it will not allocate a new string because escaped strings are rare.</p>
<p>But the term <code>Cow</code> or “clone-on-write smart pointer” never made sense to me.</p>
<blockquote>
<p>The type Cow is a smart pointer providing clone-on-write functionality: it can enclose and provide immutable access to borrowed data, and clone the data lazily when mutation or ownership is required. The type is designed to work with general borrowed data via the Borrow trait.</p>
</blockquote>
<p>If you are new to Rust (like I was), then this description just doesn’t help (I still don’t understand what it is talking about).</p>
<p>It was <a href="https://twitter.com/zack_overflow/status/1620387950264713216">pointed out to me</a> that <code>clone-on-write</code> is
just a use case of this data structure. A better name should be called <code>RefOrOwned</code> because it is a type that contains either
owned data or a reference.</p>
<h3 id="simd" class="toc-item group scroll-mt-20">
    SIMD
    <a href="#simd" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>When I was going through the old Rust blogs, the <a href="https://blog.rust-lang.org/inside-rust/2020/09/29/Portable-SIMD-PG.html">Announcing the Portable SIMD Project Group</a>
caught my attention.
I always wanted to play around with SIMD but never got the chance.
After some research, I found a use case that may apply to a parser:
<a href="https://lemire.me/blog/2017/01/20/how-quickly-can-you-remove-spaces-from-a-string">How quickly can you remove spaces from a string?</a> by Daniel Lemire.
So it turns out this has been done before, in a JSON parser called RapidJSON,
which <a href="https://rapidjson.org/md_doc_internals.html#SkipwhitespaceWithSIMD">uses SIMD to remove whitespaces</a>.</p>
<p>So eventually with the help of portable-SIMD and RapidJSON’s code,
not only did I manage to <a href="https://github.com/Boshen/oxc/pull/26">skip whitespaces</a>,
I also managed to <a href="https://github.com/Boshen/oxc/pull/23">skip multi-line comments</a> as well.</p>
<p>Both changes improved the performance by a few percent.</p>
<h3 id="keyword-match" class="toc-item group scroll-mt-20">
    Keyword match
    <a href="#keyword-match" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>At the top of the performance profile,
there is a hot code path that takes about 1 - 2% of the total execution time.</p>
<p>It tries to match a string to a JavaScript keyword:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">match_keyword</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">s</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">match</span><span style="color:#61676c;"> s {
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;as&quot; </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> As</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;do&quot; </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Do</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;if&quot; </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> If</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;constructor&quot; </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Constructor</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">_ =&gt;</span><span style="color:#61676c;"> Ident</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>With the addition of TypeScript, there are 84 strings for us to match from.
After some research, I found a blog from V8 <a href="https://v8.dev/blog/scanner">Blazingly fast parsing, part 1: optimizing the scanner</a>,
it describes its <a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/parsing/keywords-gen.h">keyword matching code</a> in detail.</p>
<blockquote>
<p>Since the list of keywords is static, we can compute a perfect hash function that for each identifier gives us at most one candidate keyword. V8 uses gperf to compute this function. The result computes a hash from the length and first two identifier characters to find the single candidate keyword. We only compare the identifier with the keyword if the length of that keyword matches the input identifier length.</p>
</blockquote>
<p>So a quick hash plus an integer comparison should be faster than 84 string comparisons.
But we tried <a href="https://github.com/Boshen/oxc/pull/140">again</a> and <a href="https://github.com/Boshen/oxc/pull/171">again</a> to no avail.</p>
<p>As it turns out, <a href="https://github.com/Boshen/oxc/issues/151#issuecomment-1464818336">LLVM already optimized our code</a>.
By using <code>--emit=llvm-ir</code> on <code>rustc</code>, we find the relevant code:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">  switch i64 %s.1, label %bb6 [
</span><span style="color:#61676c;">    i64 2, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit.i&quot;
</span><span style="color:#61676c;">    i64 3, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit280.i&quot;
</span><span style="color:#61676c;">    i64 4, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit325.i&quot;
</span><span style="color:#61676c;">    i64 5, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit380.i&quot;
</span><span style="color:#61676c;">    i64 6, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit450.i&quot;
</span><span style="color:#61676c;">    i64 7, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit540.i&quot;
</span><span style="color:#61676c;">    i64 8, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit590.i&quot;
</span><span style="color:#61676c;">    i64 9, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit625.i&quot;
</span><span style="color:#61676c;">    i64 10, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit655.i&quot;
</span><span style="color:#61676c;">    i64 11, label %&quot;_ZN4core5slice3cmp81_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$B$u5d$$GT$$u20$for$u20$$u5b$A$u5d$$GT$2eq17h46d405acb5da4997E.exit665.i&quot;
</span><span style="color:#61676c;">  ], !dbg !191362
</span></pre>
<p><code>%s</code> is the string, <code>%s.1</code> is its length … it is branching on the string length! The compiler is smarter than us 😃.</p>
<p>(Yes, we got so serious with this so we started looking at LLVM IR and assembly code.)</p>
<p>Later on, <a href="https://twitter.com/strager">@strager</a> posted a very educational YouTube video <a href="https://www.youtube.com/watch?v=DMQ_HcNSOAI">Faster than Rust and C++: the PERFECT hash table </a> on this topic.
The video taught us a systematic approach to reasoning about fine-tuning performance problems</p>
<p>In the end, we concluded that the simple keyword match is enough for us since it was only about 1 - 2% of the performance,
and the effort is not worth it after spending a few days on it - Rust does not have all the pieces we need to build this perfect hashmap.</p>
<h2 id="linter" class="toc-item group scroll-mt-20">
    Linter
    <a href="#linter" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>A linter is a program that analyzes the source code for problems.</p>
<p>The simplest linter visits each AST node and checks for rules.
<a href="https://rust-unofficial.github.io/patterns/patterns/behavioural/visitor.html">The visitor pattern</a> can be used:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub trait </span><span style="color:#399ee6;">Visit</span><span style="color:#61676c;">&lt;&#39;a&gt;: Sized {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// ... lots of visit functions
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">visit_debugger_statement</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">stmt</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;"> DebuggerStatement) {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// report error
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<h3 id="parent-pointing-tree" class="toc-item group scroll-mt-20">
    Parent Pointing Tree
    <a href="#parent-pointing-tree" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>It is easy to go down the AST by using visitors, but what if we want to go up the tree to collect some information?</p>
<p>This problem is particularly challenging to solve in Rust, because it is not possible to add a pointer to the nodes of the AST.</p>
<p>Let’s forget about ASTs for a second and focus on generic trees with the property of a node having a pointer to its parent.
To build a generic tree, each tree node needs to be the same type <code>Node</code>, we can reference their parent by using <code>Rc</code>:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Node </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    parent</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;Rc&lt;Node&gt;&gt;,
</span><span style="color:#61676c;">}
</span></pre>
<p>It is tedious to work with this pattern if we need mutation, and
it is not performant because the nodes have to be dropped at different times.</p>
<p>A more efficient solution is to use a <code>Vec</code> as its backing storage and use indexes for pointers.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Tree </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    nodes</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;Node&gt;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Node </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    parent</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">&gt; </span><span style="font-style:italic;color:#abb0b6;">// index into `nodes`
</span><span style="color:#61676c;">}
</span></pre>
<p><a href="https://crates.io/crates/indextree"><code>indextree</code></a> is a nice library for this task.</p>
<p>Back to our AST, we can build a <code>indextree</code> by having the nodes point to an enum that wraps every single kind of AST node.
We call this the untyped AST.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Node</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    kind</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">AstKind&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">enum </span><span style="color:#399ee6;">AstKind</span><span style="color:#61676c;">&lt;&#39;a&gt; {
</span><span style="color:#61676c;">    BlockStatement(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a </span><span style="color:#61676c;">BlockStatement&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// ...
</span><span style="color:#61676c;">    ArrayExpression(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a </span><span style="color:#61676c;">ArrayExpression&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// ...
</span><span style="color:#61676c;">    Class(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a </span><span style="color:#61676c;">Class&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// ...
</span><span style="color:#61676c;">}
</span></pre>
<p>The last missing piece is to have callbacks inside the visitor pattern that builds this tree.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub trait </span><span style="color:#399ee6;">Visit</span><span style="color:#61676c;">&lt;&#39;a&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">enter_node</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">_kind</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">AstKind&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;) {}
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">leave_node</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">_kind</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">AstKind&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;) {}
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">visit_block_statement</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">stmt</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a </span><span style="color:#61676c;">BlockStatement&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;) {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> kind </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">AstKind</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">BlockStatement(stmt)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">enter_node</span><span style="color:#61676c;">(kind)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">visit_statements</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">stmt</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">body)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">leave_node</span><span style="color:#61676c;">(kind)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; Visit&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">TreeBuilder</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">enter_node</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">kind</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">AstKind&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;) {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">push_ast_node</span><span style="color:#61676c;">(kind)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">leave_node</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">kind</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">AstKind&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;) {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">pop_ast_node</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>The final data structure becomes <code>indextree::Arena&lt;Node&lt;'a&gt;&gt;</code> where each <code>Node</code> has a pointer to an <code>AstKind&lt;'a&gt;</code>.
<code>indextree::Node::parent</code> can be called to get the parent of any node.</p>
<p>The nice benefit of making this parent pointing tree is that it becomes convenient to visit AST nodes without having to implement any visitors.
A linter becomes a simple loop over all the nodes inside the <code>indextree</code>:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">for</span><span style="color:#61676c;"> node </span><span style="color:#ed9366;">in</span><span style="color:#61676c;"> nodes {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">match</span><span style="color:#61676c;"> node</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">get</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">kind {
</span><span style="color:#61676c;">        AstKind</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">DebuggerStatement(stmt) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// report error
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">_ =&gt; </span><span style="color:#61676c;">{}
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>A full example is provided <a href="https://github.com/Boshen/oxc/blob/main/crates/oxc_linter/examples/linter.rs">here</a>.</p>
<p>At first glance, this process may seem slow and inefficient.
However, visiting the typed AST through a memory arena and pushing a pointer into <code>indextree</code> are efficient linear memory access patterns.
The current benchmark indicates that this approach is 84 times faster than ESLint, so it is certainly fast enough for our purposes.</p>
<h3 id="processing-files-in-parallel" class="toc-item group scroll-mt-20">
    Processing files in parallel
    <a href="#processing-files-in-parallel" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>The linter uses the <a href="https://crates.io/crates/ignore">ignore</a> crate for directory traversal,
it supports <code>.gitignore</code> and adds additional ignore files such as <code>.eslintignore</code>.</p>
<p>A small problem with this crate is that it does not have a parallel interface,
There is no <code>par_iter</code> for <code>ignore::Walk::new(&quot;.&quot;)</code>.</p>
<p>Instead, <a href="https://github.com/Boshen/oxc/blob/b51c2df3cc43b9f7d57380acc1552fac7db75fab/crates/oxc_cli/src/lint/runner.rs#L116-L139">primitives need to be used</a></p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> walk </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Walk</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(</span><span style="color:#ed9366;">&amp;</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">options)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">rayon</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">spawn(</span><span style="color:#fa6e32;">move </span><span style="color:#ed9366;">|| </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    walk</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">iter</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">for_each</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">path</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">        tx_path</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">send</span><span style="color:#61676c;">(path)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">})</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> linter </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Arc</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">clone(</span><span style="color:#ed9366;">&amp;</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">linter)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">rayon</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">spawn(</span><span style="color:#fa6e32;">move </span><span style="color:#ed9366;">|| </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">while let </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(path) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> rx_path</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">recv</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> tx_error </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> tx_error</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">clone</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> linter </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Arc</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">clone(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">linter)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        rayon</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">spawn(</span><span style="color:#fa6e32;">move </span><span style="color:#ed9366;">|| </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(diagnostics) </span><span style="color:#ed9366;">= </span><span style="color:#fa6e32;">Self</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">lint_path(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">linter</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">path) {
</span><span style="color:#61676c;">                tx_error</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">send</span><span style="color:#61676c;">(diagnostics)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">            </span><span style="color:#f07171;">drop</span><span style="color:#61676c;">(tx_error)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">})</span><span style="color:#61676ccc;">;
</span></pre>
<p>This unlocks a useful feature where we can print all diagnostics in a single thread, which leads us to the final topic of this article.</p>
<h3 id="printing-is-slow" class="toc-item group scroll-mt-20">
    Printing is slow
    <a href="#printing-is-slow" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>Printing the diagnostics was fast, but I have been working on this project for so long that it felt like an eternity to print thousands of diagnostic messages every time I run the linter on huge monorepos.
So I started searching through the Rust GitHub issues and eventually found the relevant ones:</p>
<ul>
<li><a href="https://github.com/rust-lang/rust/issues/60673">io::Stdout should use block buffering when appropriate</a></li>
<li><a href="https://github.com/rust-lang/rust/issues/106133">stdin and stdout performance considerations are not documented</a></li>
</ul>
<p>In summary, a <code>println!</code> call will lock <code>stdout</code> every time it encounters a newline, this is called line buffering.
To make things print faster, we need to opt-in for block buffering which is <a href="https://rust-cli.github.io/book/tutorial/output.html#a-note-on-printing-performance">documented here</a>.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">use </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">io</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">{</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> Write}</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> stdout </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">io</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">stdout()</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// get the global stdout entity
</span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> handle </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">io</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">BufWriter</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(stdout)</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// optional: wrap that handle in a buffer
</span><span style="color:#f07171;">writeln!</span><span style="color:#61676c;">(handle, </span><span style="color:#86b300;">&quot;foo: </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">42</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// add `?` if you care about errors here
</span></pre>
<p>Or acquire the lock on stdout.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> stdout </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">io</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">stdout()</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// get the global stdout entity
</span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> handle </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> stdout</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">lock</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// acquire a lock on it
</span><span style="color:#f07171;">writeln!</span><span style="color:#61676c;">(handle, </span><span style="color:#86b300;">&quot;foo: </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">42</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// add `?` if you care about errors here
</span></pre>
<hr />
<p>At the moment of this writing,
development of Oxc is slowing down because I am currently considering the bigger picture of this project:</p>
<ul>
<li>an HIR (high-level intermediate representation) of the AST for scopes and symbols</li>
<li>a unified semantic model for building more sophisticated features, including a control flow graph</li>
<li>a performant Google Closure advanced compilation mode</li>
<li>partnership with the <a href="https://github.com/kaleidawave/ezno">ezno</a> experimental type checker</li>
</ul>
<p>So please stay tuned.</p>
<hr />
<p>If you found this article helpful, please give me a star to help keep me motivated.</p>
<p>Thank you for reading.</p>
2024-03-11T22:51:08.348140219+08:00 - 文章标题：Interview with @robjtede
2024-03-11T22:51:08.348379766+08:00 - 文章内容：<p>We are thrilled to present our third interview, this time with <strong>Rob</strong> (<a href="https://github.com/robjtede">@robjtede</a>), the core maintainer of <a href="https://github.com/actix/actix-web">Actix Web</a> and <a href="https://deps.rs/">deps.rs</a>. In this interview, we talked about how he became involved with Actix Web, what motivated him to take over the project after <a href="https://github.com/fafhrd91">@fafhrd91</a> quit, and his experience of maintaining popular Rust projects.</p>
<p>Thanks to <strong>Rob</strong> for sharing his story with us. We hope you enjoy this interview!</p>
<p><img src="/static/issue-3/robjtede.jpeg" alt="" title="" loading="lazy"></p>
<blockquote>
<p>Rob uses One Punch Man’s Saitama as his avatar online. Here he is meeting his hero.</p>
</blockquote>
<h1 id="introduction" class="toc-item group scroll-mt-20">
    Introduction
    <a href="#introduction" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>Introduce yourself and share a bit about your background with Rust. When did you start learning Rust, and what inspired you to do so?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/robjtede.jpeg"/>
            <div class="text-lg font-bold">Rob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Hey folks. I’m Rob; <a href="https://github.com/robjtede">@robjtede</a> on GitHub/Discord/Twitter/Reddit/etc. I’m a professional software engineer in the finance sector focussed on low latency distributed systems, mainly using microservice architectures. I did a masters degree in computer science at the University of Sheffield in the UK and moved to London to start my career after that.</p>
<p>I found out about Rust at some point during university and started <a href="https://github.com/robjtede/adventofcode2017">practicing it during 2017’s Advent of Code</a> event. It was more or less just a curiosity at that point, as my main development was focussed on JavaScript and other frontend skills plus some Node.JS which I used in my undergraduate dissertation project.</p>
<p>It wasn’t until I started working (a frontend role) that I started using Rust more. I had suggested to the (small) team that part of the monolithic application we were creating could be split out. It was written in Java, and I had no intention of writing Java so Rust seemed like a good idea to inject into our stack. Most of the team had at least heard of Rust and understood its stated benefits so they gave me free license to develop this service alongside my normal frontend work.</p>
<p>In the 4 years since then, I’ve transitioned to a purely backend role; as the team grew I needed to focus more on one side of the stack in order to keep my skills sharp. This lead to a desire to go deeper into Rust and its ecosystem.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="actix-web" class="toc-item group scroll-mt-20">
    Actix Web
    <a href="#actix-web" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>How did you become involved with Actix Web, and what motivated you to take over the project after <a href="https://github.com/fafhrd91">@fafhrd91</a> quit?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/robjtede.jpeg"/>
            <div class="text-lg font-bold">Rob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>I got involved with this particular open-source project in the same way most people do; submitting <a href="https://github.com/actix/actix-web/pull/1282">a pull request for a feature I needed to use</a> for work. In particular, this was around the time that the “SameSite” cookie attribute was going through a default value change in a bunch of browsers and it wasn’t possible to set the attribute to “none” explicitly, since the <code>None</code> variant was being used to represent the absence of this attribute. I felt a bit cheeky submitting my first PR with a breaking change, but it was accepted with grace. Unfortunately, v2.0 had been cut pretty recently so we had to use a fork or beta versions at work until v3.0 was released.</p>
<p>Now, after submitting that patch… the <em>very next</em> day… the Actix Web repo disappeared from GitHub. This was a result of <strong>Nikolay</strong> (<a href="https://github.com/fafhrd91">@fafhrd91</a>) getting frustrated with several comments made on GitHub and Reddit, especially, regarding the quality of the code in Actix Web. And, well, from a strict reading it seems <em>they</em> were right to some extent; the foundational principles of Rust <em>were</em> being broken. However, I can imagine (now) how that would have felt from <strong>Nikolay</strong>’s point-of-view; it must have come across as brigading or even bullying since, factually speaking, most people reading <code>/r/rust</code> at the time were hobbyists, not professionals like <strong>Nikolay</strong>.</p>
<p>I hadn’t really been privy to all the community drama prior to this, but I’d spent too long on this work project already and wanted to see it through without switching language, so I decided to do something about it. I <a href="https://www.reddit.com/r/rust/comments/eq4xsu/gauging_interest_in_an_actixweb_and_siblings_fork">posted on Reddit</a> to gauge interest in forking the project under a new name since it seemed that the repo would not be restored. Some people commented and we started a Discord server to discuss how to go about forking and maintaining a web server framework of this scale (it’s a lot of code) including the most important aspect of this whole thing: the name. In short, the best we came up with in that week was “Actica”. That effort never really got off the ground though, <strong>Nikolay</strong> realized that his project had become a bigger success that maybe he realized and that people were actually depending on it in real work (like me) so he restored the repo and gave effective ownership of the <strong>@actix</strong> organisation to <strong>Yuki Okushi</strong> (<a href="https://github.com/JohnTitor">@JohnTitor</a> on GitHub) who had already proven himself a reliable open-source maintainer both in Rust and other ecosystems. The future of the project was safe.</p>
<p><strong>Yuki</strong>’s attention, however, was already in high demand. The project still faced some risk of falling into obscurity or the dreaded “passive maintenance” mode. I felt driven to help though. I’d already submitted one PR. Why not another? Why not something more important and foundational? The patches for the known unsound code that caused the drama had been written and accepted but I wanted to make sure that no more “Unsafe Shitstorm“s could happen. I spent a great deal of personal time from February through May of 2020 (so, y’know, a lot of spare time) trawling through the codebase, adding documentation, comments, and most importantly, auditing unsafe blocks. I removed lots of unsafe blocks, replacing it with safe alternatives, and left detailed comments on every single unsafe block that remained. Some of the changes required API breaks, but we’d already kinda committed to that with my original <code>SameSite</code> PR (🙃). With that and some other tweaks, in September 2020, we were ready to <a href="https://github.com/actix/actix-web/wiki/v3-Announcement">release v3.0</a> with a major focus on improved safety.</p>
<p>During this time, I’d been driving the development work along with some other contributors, and <strong>Yuki</strong> had been approving my PRs diligently. At some point he must have realized I was serious about maintaining Actix Web and he granted me owner permissions to the repo and publish permissions to the crates.io registry.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>What is the current status of Actix Web, and how does it compare to two years ago? Are there any major changes or updates in the works?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/robjtede.jpeg"/>
            <div class="text-lg font-bold">Rob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Actix Web is actively maintained, mostly by myself, but we have a wide spread of developers submitting issues and PRs regularly. The biggest outside contribution made recently was <a href="https://github.com/actix/actix-web/pull/2883">derive macro support for multipart form uploads</a>, a huge PR (~2000 lines) of high quality and well tested code that reduces boilerplate significantly for multipart request handlers.</p>
<p>Two years ago the Actix Web version was v3.3, which added a number of new features focussed around quality of life changes for developers since v3.0. Since then, we’ve had another round of breaking changes, resulting in the major version bump to v4. I had a fresh new focus for v4: API stability. The cracks in v3’s API had started showing pretty quickly after its release and, based on feedback and repeated questions I had been observing, it felt like there was an opportunity to re-design some parts of the API surface so that we wouldn’t need to break it again for at least a year and improve the getting started experience at the same time.</p>
<p>Notably, one of these rough edges was the difference between <code>#[actix_web::main]</code> and <code>#[tokio::main]</code>. The reason why the former was <strong>required</strong> in v3 is unimportant, but this question came up enough times that we thought it was important to make Actix Web work under <code>#[tokio::main]</code> in v4. This may not have required a breaking change except that we’d already committed to put v4 on the recently released Tokio v1, a release which had inspired me to get on the API stability band-wagon with its mindfully cut down interface, ensuring that the base API was rock solid and additive changes could be made for a long time to come.</p>
<p>Some other API changes I paid attention to are documented in the <a href="https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md">v4 migration guide</a>. This page gives some insight into my thought processes for this release. All in all, it worked! There was a pretty long (<a href="https://www.reddit.com/r/rustjerk/comments/rgux3a/seriously_its_been_in_beta_for_more_than_11">meme worthy</a>) beta period for v4, but since its release in February 2022 we’ve had no further breaking changes!</p>
<p>As for future changes, there is certainly a v5 on the cards. The most exciting reasons for a major version bump are the changes we’ll be able to make to key traits like <code>FromRequest</code> now that Generic Associated Types (GATs) have been stabilized and return-position impl-trait and/or <code>async fn</code> in traits seems to be (perpetually) around the corner. These features will make writing custom extractors and middleware much more pleasant for our users (and us).</p>
<p>Some of the less exciting breaking changes are being trialled in the <a href="https://crates.io/crates/actix-web-lab"><code>actix-web-lab</code></a> crate, a place where I have been busy experimenting, unburdened by the burden of post-v1 semantic versioning. (This crate has helped me massively on the API stability goal of v4.x, too. Lots of cool, non-breaking features are written for this crate and then graduate to Actix Web after seeing some real world usage and having their sharp edges ironed out.)</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>Is Actix Web still a web framework powered by the actor model? If not, why?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/robjtede.jpeg"/>
            <div class="text-lg font-bold">Rob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>No. This is a common misconception, but one I can totally understand given the heritage and persisting name of the framework. Story time…</p>
<p><strong>Actix Web has not used the actor model, in particular the <code>actix</code> crate, to power its core HTTP server since before version 1.0!</strong> (The last pre-v1 version was released in January 2019.) It was around that time that the work on asynchronous Rust was gaining traction and the <code>futures</code> v0.1 crate was released as a prototype of what the <code>Future</code> abstraction would look like when it was part of std. Many crates incorporated this version of the <code>Future</code> trait.</p>
<p>Using this new trait, the “service architecture” was first <a href="https://docs.rs/actix-service/0.1.0/actix_service/trait.Service.html">modelled in <code>actix-service</code></a> which, as it turns out, is a much more natural mental model for representing the request-response pattern of HTTP since it composes the different networking layers very elegantly.</p>
<p>The only part of the stack that still requires actors is <code>WebSockets</code>, since this is actually still modelled quite well by actors due to being bi-directional and not strictly request-response. However, we’re working to remove the need for this too with a new API that should look similar to what’s provided by the third party <a href="https://crates.io/crates/actix-ws"><code>actix-ws</code></a> crate.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>What inspired you to maintain such a large project voluntarily, and what challenges have you faced in doing so?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/robjtede.jpeg"/>
            <div class="text-lg font-bold">Rob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Mainly it was a desire to dive deeper into the web stack and understand HTTP at a more fundamental level using a real implementation as guidance. Plus it was 2020 and I had a lot of free time on my hands.</p>
<p>The main challenge has been thinking pragmatically <strong>and</strong> holistically when designing features and making changes as well as considering the current and futures needs of <em>all</em> the users of Actix Web; even the ones who aren’t vocal in chatrooms or issue trackers, especially our enterprise users.</p>
<p>One particular change of viewpoint I’ve had throughout my maintainer-ship is about Minimum Supported Rust Version (MSRV) policies. I was a hard-line “MSRV increases are breaking changes” believer at the beginning. This turned out to cause me and some of our users a large number of headaches during both v3.x and even v4.x cycles. To be fair, this a tricky problem to solve when upstream crates have different policies. However, it <em>feels</em> like an area where Cargo could be smarter in selecting versions that <em>should</em> work with a particular MSRV now that the <a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field"><code>package.rust-version</code></a> field in Cargo manifests files has been available for over a year and is used in lots of well known crates.</p>
<p>With it being a large project, it also comes with a community of users; including contributors. Opening up the Discord server as an initial discussion zone for help instead of GitHub issues was a great move; there’s lots of folks in there asking questions and many apart from myself answering them. It also serves as a hub for Actix Web devs and third-party crate authors to bounce ideas around. Though with any community of significant size, we have to deal with the usual annoyances: spam, disagreements, Code of Conduct violations. The core team has been able to keep on top of all these issues, so far.</p>
<p>It’s also been really challenging for me be critical of feedback and PRs from regular contributors and team members when they don’t align with the overall vision for the project. I really want folks contributing code to remain excited and motivated so having to say “no” to an idea is hard. I try my best to understand their point of view, but have to stay balanced and consider <em>all</em> Actix Web users; sometimes that means having to significantly re-work a PR myself or close it outright.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="deps.rs" class="toc-item group scroll-mt-20">
    deps.rs
    <a href="#deps.rs" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>Let’s talk about deps.rs. What is it, and how did you get involved with deps.rs? How can Rust developers use it to improve their projects?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/robjtede.jpeg"/>
            <div class="text-lg font-bold">Rob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p><strong><a href="https://deps.rs">deps.rs</a> is a tool you can use to analyze your crates for outdated dependencies.</strong> We think that, in general, dependency freshness is a reasonably good indicator of maintainer activity, ecosystem compatibility, and, therefore, a factor in a crate’s suitability for use in your project. Searching a crate on <a href="https://deps.rs">deps.rs</a> will give details about dependency freshness and shows a snippet to include a badge/shield to put in your project README that will show green if all dependencies are up to date, or hint that some are outdated. We also integrated with the RustSec security advisory database to show indicators that updates are needed to patch security vulnerabilities.</p>
<p>In Nov 2019, there was a <a href="https://github.com/deps-rs/deps.rs/issues/40#issuecomment-552179964">call for maintainers</a> from the original author, <strong>Sam</strong> (<a href="https://github.com/srijs">@srijs</a>) which a few of us responded to, including <a href="https://github.com/cecton">@cecton</a> and <a href="https://github.com/paolobarbolini">@paolobarbolini</a> who are well known in the Rust community. We started a chatroom on Matrix to start co-ordinating ideas and resources. Since deps.rs is a free public tools that is not free to operate, this was more challenging to get started due to natural trust barriers of “strangers” on the internet. We didn’t want to give any one person control of the service so the responsibilities of keeping it running were divided up; one person would operate and pay for running the application itself and another would manage and and pay for the domain name when it was transferred.</p>
<p>To give <strong>Sam</strong>  assurance that we meant business, we forked the project and started assessing open issues and PRs, integrating them with our fork. A few weeks later, <strong>Sam</strong>  gave our team ownership of the original repo and transferred the domain over to me. Then in December 2020, we put <a href="https://www.reddit.com/r/rust/comments/kbqgt8/we_have_restored_depsrs_dependency_status_reports">an announcement out on Reddit</a> that this popular service was now community operated! I had already been toying with GitHub sponsors, so I changed the description on my page to encourage donations to cover domain costs, and it worked; the domain costs are effectively crowdsourced now! <strong>Paolo</strong> doesn’t have GitHub sponsors set up so he must be fronting the cloud server expenses himself. <strong>Even so, I consider this a real open-source success story.</strong></p>
<p>On a related note, I’ve been offering support to many crates that seem to be falling out of maintenance; most recently <a href="https://github.com/robjtede/tinymap"><code>tinymap</code></a>. It takes very little time and I can help increase the bus factor and improve code quality. <strong>If anyone has a crate and needs help keeping it up to date, message me on Discord. I’d be happy to take a look.</strong></p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="advice-for-developers" class="toc-item group scroll-mt-20">
    Advice for developers
    <a href="#advice-for-developers" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>What advice do you have for developers who are just starting to learn Rust, especially those who are interested in web development?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/robjtede.jpeg"/>
            <div class="text-lg font-bold">Rob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Some general advice I give to Rust newcomers is to always run <code>cargo clippy</code> instead of <code>cargo check</code> so you learn more of the idiomatic code patterns right from day 1. Also go subscribe to the <a href="https://this-week-in-rust.org">This Week in Rust newsletter</a> for exposure to lots of great blog posts, especially those in the “Rust Walkthroughs” section.</p>
<p>If you’re familiar with the micro-framework style of creating web services in other languages (think Flask or ExpressJS), do consider reading through the <a href="https://actix.rs/docs">getting started guide</a> and trying out Actix Web. I think Rust really is worth learning and doing so through building a web service is a good way to do so; it will expose you to loads of the concepts you read about in <a href="https://doc.rust-lang.org/book">The Book</a> (you read the book already, right?).</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="end-question" class="toc-item group scroll-mt-20">
    End question
    <a href="#end-question" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>What do you think of Rust Magazine, and do you have any advice for us as we continue to grow and improve? How can we better serve the Rust community?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/robjtede.jpeg"/>
            <div class="text-lg font-bold">Rob</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>I think the Magazine is a great initiative and fills a gap for more editorial content than you get from links via This Week in Rust, for example. I really enjoyed issue 1’s <a class="inline-link"
                    href="/issue-1/weihanglo"
                    data-title="Interview with Weihang Lo"
                    data-url="/issue-1/weihanglo"
                    data-image="/static/ferris/1.jpeg">
                    Interview with Weihang Lo
            </a>
 and that’s not the kind of written content you could find anywhere else but a magazine.</p>
<p>I’ve personally had good success with GitHub sponsors to fund my otherwise free work. It may be a road to look at for the Magazine to encourage high quality content either by directing sponsorship money to article authors or reviewers/editors in some way.</p>
<p>Finally, a massive thanks for this opportunity to speak to the Rust community.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p><strong>Editor: We are trying to open an <a href="https://opencollective.com/rustmagazine">OpenCollective account</a> for Rust Magazine, so that we can pay our contributors for incentivizing them to write more high-quality articles. We are also looking for sponsors to help us pay for the domain and email newsletter costs. If you are interested in helping us, please contact us on <a href="https://discord.gg/DdwgBuReJe">Discord</a> or email us at <a href="mailto://opencollective@rustmagazine.org">opencollective@rustmagazine.org</a>.</strong></p>
</blockquote>
2024-03-11T22:51:08.348458387+08:00 - 文章标题：Bridging Async and Sync Rust Code - A lesson learned while working with Tokio
2024-03-11T22:51:08.348787429+08:00 - 文章内容：<h2 id="background" class="toc-item group scroll-mt-20">
    Background
    <a href="#background" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Recently, while working on our <a href="https://github.com/grepTimeTeam/greptimedb/">GreptimeDB</a> project, we encountered an issue with calling asynchronous Rust code in a synchronous context. After investigating and resolving the issue, we gained a deeper understanding of asynchronous Rust and would like to share our experience with you.</p>
<p>Our project is based on <a href="https://tokio.rs/">Tokio</a>, which conveniently encapsulates cooperative task running and scheduling in <code>.await</code> calls, making it concise and elegant. However, users who are unfamiliar with the underlying principles may encounter issues and obstacles.</p>
<h2 id="problem" class="toc-item group scroll-mt-20">
    Problem
    <a href="#problem" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>The problem came up when we had to execute some asynchronous code in an implementation of a trait defined in a third-party crate, which is, unfortunately, synchronous and we can’t modify its definition.</p>
<blockquote>
<p>You can check <a href="https://github.com/apache/arrow-datafusion/issues/3777">here</a> for the real-world problem that we encountered.</p>
</blockquote>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">trait </span><span style="color:#399ee6;">Sequencer </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">generate</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">&gt;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>We use a <code>PlainSequencer</code> to implement this trait, and it relies on some asynchronous calls when implementing the <code>generate</code> function (such as <code>PlainSequencer::generate_async</code> here):</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl </span><span style="color:#399ee6;">PlainSequencer </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">generate_async</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">-&gt;</span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">&gt;{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> res </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">for</span><span style="color:#61676c;"> i </span><span style="color:#ed9366;">in </span><span style="color:#ff8f40;">0</span><span style="color:#ed9366;">..</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">bound {
</span><span style="color:#61676c;">            res</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">push</span><span style="color:#61676c;">(i)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            tokio</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">time</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">sleep(Duration</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_millis(</span><span style="color:#ff8f40;">100</span><span style="color:#61676c;">))</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">        res
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Sequencer </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">PlainSequencer </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">generate</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">generate_async</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>The problem occurs because <code>generate</code> is a synchronous method that <code>.await</code> cannot be used inside directly.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">error[E0728]: `await` is only allowed inside `async` functions and blocks
</span><span style="color:#61676c;">  --&gt; src/common/tt.rs:32:30
</span><span style="color:#61676c;">   |
</span><span style="color:#61676c;">31 | /     fn generate(</span><span style="color:#ff8f40;">&amp;</span><span style="color:#61676c;">self) -&gt; Vec&lt;i32&gt; {
</span><span style="color:#61676c;">32 | |         self.generate_async().await
</span><span style="color:#61676c;">   | |                              ^^^^^^ only allowed inside `async` functions and blocks
</span><span style="color:#61676c;">33 | |     }
</span><span style="color:#61676c;">   | |_____- this is not `async`
</span></pre>
<p>To address this issue, the first thing that came to mind is to use the <a href="https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html#method.block_on"><code>Runtime::block_on</code></a> method of Tokio runtime, which blocks current thread until the future completes.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Sequencer </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">PlainSequencer </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">generate</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#ff8f40;">RUNTIME</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">block_on</span><span style="color:#61676c;">(async{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">generate_async</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await
</span><span style="color:#61676c;">        })
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">cfg</span><span style="color:#61676c;">(test)]
</span><span style="color:#fa6e32;">mod </span><span style="color:#399ee6;">tests</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">tokio</span><span style="color:#61676c;">::</span><span style="color:#f29718;">test</span><span style="color:#61676c;">]
</span><span style="color:#61676c;">    async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">test_sync_method</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> sequencer </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> PlainSequencer {
</span><span style="color:#61676c;">            bound</span><span style="color:#61676ccc;">: </span><span style="color:#ff8f40;">3
</span><span style="color:#61676c;">        }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> vec </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> sequencer</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">generate</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;vec: </span><span style="color:#ff8f40;">{:?}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> vec)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>Though compiled successfully, an error occurs when running the code:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">thread &#39;tests::test_sync_method&#39; panicked at &#39;Cannot start a runtime
</span><span style="color:#61676c;">from within a runtime. This happens because a function (like `block_on`)
</span><span style="color:#61676c;">attempted to block the current thread while the thread is being used
</span><span style="color:#61676c;">to drive asynchronous tasks.&#39;
</span></pre>
<p>The error suggests that it’s not allowed to start another runtime from within a runtime that is currently being executed.</p>
<p>It seems that Tokio has implemented a check at the entry point of <code>Runtime::block_on</code> to prevent the above usage. Since that doesn’t work, let’s see if other crates have similar functions. Luckily, we found <code>futures::executor::block_on</code>:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Sequencer </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">PlainSequencer </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">generate</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        futures</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">executor</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">block_on(async {
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">generate_async</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await
</span><span style="color:#61676c;">        })
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>The compiling was fine as well, but the code just hung and did not return when running.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">cargo test --color=always --package tokio-demo --bin tt tests::test_sync_method --no-fail-fast -- --format=json --exact -Z unstable-options --show-output
</span><span style="color:#61676c;">   Compiling tokio-demo v0.1.0 (/Users/lei/Workspace/Rust/learning/tokio-demo)
</span><span style="color:#61676c;">    Finished test [unoptimized + debuginfo] target(s) in 0.39s
</span><span style="color:#61676c;">     Running unittests src/common/tt.rs (target/debug/deps/tt-adb10abca6625c07)
</span><span style="color:#61676c;">{ &quot;type&quot;: &quot;suite&quot;, &quot;event&quot;: &quot;started&quot;, &quot;test_count&quot;: 1 }
</span><span style="color:#61676c;">{ &quot;type&quot;: &quot;test&quot;, &quot;event&quot;: &quot;started&quot;, &quot;name&quot;: &quot;tests::test_sync_method&quot; }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;"># The code just hangs here...
</span></pre>
<p>Although there is only one simple sleep call in the <code>generate_async</code> method, why is the future never completed? What makes us more confused is that for the same code snippet, it hangs in <code>tokio::test</code> while completes normally in <code>tokio::main</code>.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">tokio</span><span style="color:#61676c;">::</span><span style="color:#f29718;">main</span><span style="color:#61676c;">]
</span><span style="color:#fa6e32;">pub</span><span style="color:#61676c;"> async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> sequencer </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> PlainSequencer {
</span><span style="color:#61676c;">        bound</span><span style="color:#61676ccc;">: </span><span style="color:#ff8f40;">3
</span><span style="color:#61676c;">    }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> vec </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> sequencer</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">generate</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;vec: </span><span style="color:#ff8f40;">{:?}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> vec)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>Exeution result:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">cargo run --color=always --package tokio-demo --bin tt
</span><span style="color:#61676c;">    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
</span><span style="color:#61676c;">     Running `target/debug/tt`
</span><span style="color:#61676c;">vec: [0, 1, 2]
</span></pre>
<blockquote>
<p>Actually, it wasn’t that easy to pinpoint the hanging issue when we first encountered this problem. The real world implementation involves calling remote gRPC services, leading us to suspect that the gRPC server might cause the issue. However, after network troubleshooting, we finally determined that the problem was on the client side. This experience reemphasizes the importance of abstracting the execution pattern of the problematic code and creating a Minimal Reproducible Example (MRE) to facilitate troubleshooting when encountering bugs.</p>
</blockquote>
<h2 id="catchup" class="toc-item group scroll-mt-20">
    Catchup
    <a href="#catchup" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>In Rust, an asynchronous code block will be compiled into a generator that implements <code>std::future::Future</code> by <a href="https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler/rustc_ast_lowering/src/expr.rs#L585"><code>make_async_expr</code></a>:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">tokio</span><span style="color:#61676c;">::</span><span style="color:#f29718;">test</span><span style="color:#61676c;">]
</span><span style="color:#61676c;">async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">test_future</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> future </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> async {
</span><span style="color:#61676c;">        </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;hello&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// the above async block won&#39;t get executed until we await it.
</span><span style="color:#61676c;">    future</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>The await point will be de-sugared to the following structure by <a href="https://github.com/rust-lang/rust/blob/7e966bcd03f6d0fae41f58cf80bcb10566ab971a/compiler/rustc_ast_lowering/src/expr.rs#L717"><code>lower_expr_await</code></a>:</p>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;">// pseudo-rust code
</span><span style="color:#fa6e32;">match </span><span style="color:#ed9366;">::</span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">future</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">IntoFuture</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">into_future(</span><span style="color:#ed9366;">&lt;</span><span style="color:#61676c;">expr</span><span style="color:#ed9366;">&gt;</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> __awaitee </span><span style="color:#ed9366;">=&gt; </span><span style="color:#fa6e32;">loop </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match unsafe </span><span style="color:#61676c;">{ </span><span style="color:#ed9366;">::</span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">future</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Future</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">poll(
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">&lt;::</span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">pin</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Pin</span><span style="color:#ed9366;">&gt;::</span><span style="color:#61676c;">new_unchecked(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> __awaitee)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">::</span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">future</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">get_context(task_context)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        ) } {
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">::</span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">task</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ready(result) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#fa6e32;">break</span><span style="color:#61676c;"> result</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">::</span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">task</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Pending </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">{}
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">        task_context </span><span style="color:#ed9366;">= </span><span style="color:#f51818;">yield </span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>In the de-sugared pseudo code, there is a loop that continuously checks if the state of the generator is ready.</p>
<p>Since there must be somebody that does the chores async runtime comes into play. Rust intentionally separates the async syntax with runtime implementation to provide more choices. In this case, the de-sugared code is executed by an executor provided by Tokio.</p>
<h2 id="solve-the-problem" class="toc-item group scroll-mt-20">
    Solve the Problem
    <a href="#solve-the-problem" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>With background knowledge equipped, let’s take another look at the implementation of the method:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">generate</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    futures</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">executor</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">block_on(async {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">generate_async</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await
</span><span style="color:#61676c;">    })
</span><span style="color:#61676c;">}
</span></pre>
<p>We know that it must be Tokio’s executor who calls the <code>generate</code> function. Then, who is responsible for polling the future <code>self.generate_async().await</code> inside the <code>block_on</code> function? Initially, I thought that <code>futures::executor::block_on</code> would have an internal runtime responsible for polling <code>generate_async</code>, so I check the code to see how the function is implemented. (mainly into the method for <code>futures_executor::local_pool::run_executor</code>).</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run_executor</span><span style="color:#61676c;">&lt;T, F</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">FnMut</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">Context&lt;&#39;</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Poll&lt;T&gt;&gt;(</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> T {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> _enter </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">enter</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">expect</span><span style="color:#61676c;">(
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;cannot execute `LocalPool` executor from within </span><span style="color:#61676ccc;">\
</span><span style="color:#86b300;">         another executor&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    )</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#ff8f40;">CURRENT_THREAD_NOTIFY</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">with</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">thread_notify</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> waker </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">waker_ref</span><span style="color:#61676c;">(thread_notify)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> cx </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Context</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_waker(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">waker)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">loop </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">if let </span><span style="color:#61676c;">Poll</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Ready(t) </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">f</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> cx) {
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">return</span><span style="color:#61676c;"> t</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// Wait for a wakeup.
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">while </span><span style="color:#ed9366;">!</span><span style="color:#61676c;">thread_notify</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">unparked</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">swap</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">false</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Acquire) {
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// No wakeup occurred. It may occur now, right before parking,
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// but in that case the token made available by `unpark()`
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#abb0b6;">// is guaranteed to still be available and `park()` is a no-op.
</span><span style="color:#61676c;">                thread</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">park()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    })
</span><span style="color:#61676c;">}
</span></pre>
<p>Upon the first glance of the code snippet, I immediately sensed that something was wrong. Although this method is named <code>run_executor</code>, there doesn’t seem to have any spawn invocation within it. Instead, it continuously loops within the current thread, checking whether the future submitted by user is ready!</p>
<p>This means that when the Tokio runtime thread reaches this point, it immediately parks itself until the user’s future is ready and unparks it. On the other hand, the user’s future is executed by the same thread, which is still parking, then a deadlock is caused.</p>
<p>The above explanation sounds reasonable, Let’s verify it now. Since we can’t block in the current runtime thread, let’s use another runtime to block for the result:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Sequencer </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">PlainSequencer </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">generate</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> bound </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">bound</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        futures</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">executor</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">block_on(async </span><span style="color:#fa6e32;">move </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="color:#ff8f40;">RUNTIME</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">spawn</span><span style="color:#61676c;">(async </span><span style="color:#fa6e32;">move </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> res </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">for</span><span style="color:#61676c;"> i </span><span style="color:#ed9366;">in </span><span style="color:#ff8f40;">0</span><span style="color:#ed9366;">..</span><span style="color:#61676c;">bound {
</span><span style="color:#61676c;">                    res</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">push</span><span style="color:#61676c;">(i)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                    tokio</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">time</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">sleep(Duration</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_millis(</span><span style="color:#ff8f40;">100</span><span style="color:#61676c;">))</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                }
</span><span style="color:#61676c;">                res
</span><span style="color:#61676c;">            })</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">        })
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>It works.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">cargo test --color=always --package tokio-demo --bin tt tests::test_sync_method --no-fail-fast -- --format=json --exact -Z unstable-options --show-output
</span><span style="color:#61676c;">    Finished test [unoptimized + debuginfo] target(s) in 0.04s
</span><span style="color:#61676c;">     Running unittests src/common/tt.rs (target/debug/deps/tt-adb10abca6625c07)
</span><span style="color:#61676c;">vec: [0, 1, 2]
</span></pre>
<p>It is worth noting that in <code>futures::executor::block_on</code>, an additional <code>RUNTIME</code> is used to spawn the asynchronous code. The reason for this is as mentioned earlier, the asynchronous task requires an executor to drive its state changes. If we remove the <code>RUNTIME</code>, instead we spawn a new thread for <code>futures::executor::block_on</code>, the deadlock problem is solved, but the <code>tokio::time::sleep</code> method call will complain “no reactor is running” since Tokio functionalities require a runtime:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">called `Result::unwrap()` on an `Err` value: Any { .. }
</span><span style="color:#61676c;">thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;there is no reactor running, must be called from the context of a Tokio 1.x runtime&#39;,
</span><span style="color:#61676c;">...
</span></pre>
<h3 id="difference-between-tokio::main-and-tokio::test" class="toc-item group scroll-mt-20">
    Difference between <code>tokio::main</code> and <code>tokio::test</code>
    <a href="#difference-between-tokio::main-and-tokio::test" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h3>
<p>After examining the underlying cause of the issue, it becomes evident why <code>tokio::main</code> does not hang whereas <code>tokio::test</code> does - they employ different runtimes. Specifically, <code>tokio::main</code> operates on a multi-threaded runtime, while <code>tokio::test</code> operates on a single-threaded runtime. Under a single-threaded runtime, when the present thread is blocked by <code>futures::executor::block_on</code>, the asynchronous code submitted by users is unable to execute, leading to deadlock as previously mentioned.</p>
<h2 id="best-practice" class="toc-item group scroll-mt-20">
    Best practice
    <a href="#best-practice" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Based on the above analysis and Rust’s generator-based cooperative asynchronous characteristics, we can summarize some tips when bridging asynchronous and synchronous code in Rust:</p>
<ul>
<li>Combining asynchronous code with synchronous code that can cause blocking is never a wise choice.</li>
<li>When calling asynchronous code from a synchronous context, use <code>futures::executor::block_on</code> and spawn the async code to a dedicated runtime, because the former will block the current thread.</li>
<li>On the other hand, if you have to call blocking synchronous code from an asynchronous context, it is recommended to use <code>tokio::task::spawn_blocking</code> to execute the code on a dedicated executor that handles blocking operations.</li>
</ul>
<h2 id="reference" class="toc-item group scroll-mt-20">
    Reference
    <a href="#reference" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<ul>
<li><a href="https://ryhl.io/blog/async-what-is-blocking/">Async: What is blocking?</a></li>
<li><a href="https://cfsamson.github.io/books-futures-explained/4_generators_async_await.html">Generators and async/await</a></li>
<li><a href="https://news.ycombinator.com/item?id=17536441">Async and Await in Rust: a full proposal</a></li>
<li><a href="https://github.com/tokio-rs/tokio/issues/2603">calling futures::executor::block_on in block_in_place may hang</a></li>
<li><a href="https://github.com/tokio-rs/tokio/issues/2376">tokio@0.2.14 + futures::executor::block_on causes hang</a></li>
</ul>
2024-03-11T22:51:08.348873951+08:00 - 文章标题：How Rust Search Extension Indexes Top 20k Crates
2024-03-11T22:51:08.359554763+08:00 - 文章内容：<p><a href="https://rust.extension.sh">Rust Search Extension</a> is an indispensable browser extension for Rustaceans looking to search for docs and crates. One of its most powerful features is its ability to instantly search the top 20K crates in the address bar. But how is this achieved, and why is it so fast? In this article, we will dive into the details.</p>
<h1 id="quick-demo" class="toc-item group scroll-mt-20">
    Quick demo
    <a href="#quick-demo" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>If you are not familiar with the extension, here is a quick demonstration of how to search the top 20K crates in the address bar.</p>
<p><img src="/static/issue-3/rust-search-extension.gif" alt="" title="" loading="lazy"></p>
<p>First, input <code>rs</code> in the address bar to activate the extension. Then, simply input the crate name or keywords you want to search for. The extension will instantly show you the top 20K crates that match your query. It is blazing fast, isn’t it? So, how is this achieved? The answer is simple: we have integrated a search index of the top 20K crates into the extension. In the next section, we will show you how we built the index and how it works.</p>
<h1 id="build-top-20k-crates-index" class="toc-item group scroll-mt-20">
    Build top 20K crates index
    <a href="#build-top-20k-crates-index" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>To build the crates index, we need to access the database of <a href="https://crates.io">crates.io</a>. Fortunately, <a href="https://crates.io">crates.io</a> provides a public <a href="https://crates.io/data-access">CSV database dumps</a> that is updated every 24 hours.</p>
<h2 id="the-essential-database-schema" class="toc-item group scroll-mt-20">
    The essential database schema
    <a href="#the-essential-database-schema" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>To build the top 20K crates index, we need access to the <a href="https://crates.io">crates.io</a> database schema. The schema includes several files, but we only need <code>crates.csv</code> to get the top 20K most downloaded crates and <code>versions.csv</code> to get the latest version of each crate.</p>
<p>Here is the directory structure of the dumped database:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">$ tree .
</span><span style="color:#61676c;">.
</span><span style="color:#61676c;">├── README.md
</span><span style="color:#61676c;">├── data
</span><span style="color:#61676c;">│   ├── badges.csv
</span><span style="color:#61676c;">│   ├── categories.csv
</span><span style="color:#61676c;">│   ├── crate_owners.csv
</span><span style="color:#61676c;">│   ├── crates.csv ✅
</span><span style="color:#61676c;">│   ├── crates_categories.csv
</span><span style="color:#61676c;">│   ├── crates_keywords.csv
</span><span style="color:#61676c;">│   ├── dependencies.csv
</span><span style="color:#61676c;">│   ├── keywords.csv
</span><span style="color:#61676c;">│   ├── metadata.csv
</span><span style="color:#61676c;">│   ├── reserved_crate_names.csv
</span><span style="color:#61676c;">│   ├── teams.csv
</span><span style="color:#61676c;">│   ├── users.csv
</span><span style="color:#61676c;">│   ├── version_downloads.csv
</span><span style="color:#61676c;">│   └── versions.csv ✅
</span><span style="color:#61676c;">├── export.sql
</span><span style="color:#61676c;">├── import.sql
</span><span style="color:#61676c;">├── metadata.json
</span><span style="color:#61676c;">└── schema.sql
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">1 directory, 19 files
</span></pre>
<p>We can use <a href="https://github.com/BurntSushi/xsv">xsv</a> to quickly peek the columns of <code>crates.csv</code> and <code>versions.csv</code>:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">$ xsv headers crates.csv
</span><span style="color:#61676c;">1   created_at
</span><span style="color:#61676c;">2   description ✅
</span><span style="color:#61676c;">3   documentation
</span><span style="color:#61676c;">4   downloads ✅
</span><span style="color:#61676c;">5   homepage
</span><span style="color:#61676c;">6   id ✅
</span><span style="color:#61676c;">7   max_upload_size
</span><span style="color:#61676c;">8   name ✅
</span><span style="color:#61676c;">9   readme
</span><span style="color:#61676c;">10  repository
</span><span style="color:#61676c;">11  updated_at
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">$ xsv headers versions.csv
</span><span style="color:#61676c;">1   checksum
</span><span style="color:#61676c;">2   crate_id ✅
</span><span style="color:#61676c;">3   crate_size
</span><span style="color:#61676c;">4   created_at
</span><span style="color:#61676c;">5   downloads
</span><span style="color:#61676c;">6   features
</span><span style="color:#61676c;">7   id
</span><span style="color:#61676c;">8   license
</span><span style="color:#61676c;">9   links
</span><span style="color:#61676c;">10  num ✅
</span><span style="color:#61676c;">11  published_by
</span><span style="color:#61676c;">12  updated_at
</span><span style="color:#61676c;">13  yanked
</span></pre>
<h2 id="parse-the-database-dumps" class="toc-item group scroll-mt-20">
    Parse the database dumps
    <a href="#parse-the-database-dumps" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>The database dumps are provided in <code>tar.gz</code> format, which we can extract using <a href="https://crates.io/crates/tar">tar</a> crate. Once the files are extracted, we can use <a href="https://crates.io/crates/csv">csv</a> crate to parse the CSV files.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">const </span><span style="color:#ff8f40;">MAX_CRATE_SIZE</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">20 </span><span style="color:#ed9366;">* </span><span style="color:#ff8f40;">1000</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">derive</span><span style="color:#61676c;">(Deserialize</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> Debug)]
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Crate </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">serde</span><span style="color:#61676c;">(rename </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;id&quot;</span><span style="color:#61676c;">)]
</span><span style="color:#61676c;">    crate_id</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">u64</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">    name</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> String,
</span><span style="color:#61676c;">    downloads</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">u64</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">    description</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;,
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">serde</span><span style="color:#61676c;">(skip_deserializing</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> default </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;default_version&quot;</span><span style="color:#61676c;">)]
</span><span style="color:#61676c;">    version</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Version,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">derive</span><span style="color:#61676c;">(Deserialize</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> Debug)]
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">CrateVersion </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    crate_id</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">u64</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">    num</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Version,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">execute</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">crate</span><span style="color:#ed9366;">::</span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;()&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> crates</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;Crate&gt; </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> versions</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;CrateVersion&gt; </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> csv_path </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;db-dump.tar.gz&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> archive </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Archive</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(Decoder</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(BufReader</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(File</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">open(csv_path)</span><span style="color:#ed9366;">?</span><span style="color:#61676c;">))</span><span style="color:#ed9366;">?</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">for</span><span style="color:#61676c;"> file </span><span style="color:#ed9366;">in</span><span style="color:#61676c;"> archive</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">entries</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">? </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> file </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> file</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(filename) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> file</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">path</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">?.</span><span style="color:#f07171;">file_name</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">and_then</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">f</span><span style="color:#61676c;">| f</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_str</span><span style="color:#61676c;">()) {
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">match</span><span style="color:#61676c;"> filename {
</span><span style="color:#61676c;">                </span><span style="color:#86b300;">&quot;crates.csv&quot; </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">                    crates </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">read_csv</span><span style="color:#61676c;">(file)</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                }
</span><span style="color:#61676c;">                </span><span style="color:#86b300;">&quot;versions.csv&quot; </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">                    versions </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">read_csv</span><span style="color:#61676c;">(file)</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                }
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">_ =&gt; </span><span style="color:#61676c;">{}
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">    crates</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">par_sort_unstable_by</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">a</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">b</span><span style="color:#61676c;">| b</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">downloads</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">cmp</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">a</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">downloads))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    crates </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> crates</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_iter</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">take</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">MAX_CRATE_SIZE</span><span style="color:#61676c;">)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">collect</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>We parse <code>crates.csv</code> and <code>versions.csv</code> into <code>Vec&lt;Crate&gt;</code> and <code>Vec&lt;CrateVersion&gt;</code>, respectively. We then sort the crates by <code>downloads</code> to get the top 20K crates.</p>
<blockquote>
<p>Note: We use <a href="https://crates.io/crates/rayon">rayon</a>’s <a href="https://docs.rs/rayon/latest/rayon/slice/trait.ParallelSliceMut.html#method.par_sort_unstable_by">par_sort_unstable_by()</a> instead of std’s <a href="https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable_by">sort_unstable_by()</a> to parallelize the sorting process.</p>
</blockquote>
<h2 id="building-the-search-index" class="toc-item group scroll-mt-20">
    Building the search index
    <a href="#building-the-search-index" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>While 20K items may not be a huge number for a computer to iterate through, we still need an efficient way to store and search through the crates. We can adopt the map as the format of the index, where the key is the crate name, and the value is the crate description and version.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;crate_name1&quot;</span><span style="color:#61676c;">: [</span><span style="color:#86b300;">&quot;crate_description1&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;crate_version1&quot;</span><span style="color:#61676c;">]</span><span style="color:#ed9366;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;crate_name2&quot;</span><span style="color:#61676c;">: [</span><span style="color:#86b300;">&quot;crate_description2&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;crate_version2&quot;</span><span style="color:#61676c;">]</span><span style="color:#ed9366;">,
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">}
</span></pre>
<p>However, we need to ensure that we get the latest version for each crate. Here is how we do it:</p>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;">// A &lt;crate_id, latest_version&gt; map to store the latest version of each crate.
</span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> latest_versions </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">HashMap</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">u64</span><span style="color:#61676c;">, Version&gt;</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">with_capacity(versions</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">versions</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_iter</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">for_each</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">cv</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> num </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> cv</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">num</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    latest_versions
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">entry</span><span style="color:#61676c;">(cv</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">crate_id)
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">and_modify</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">v</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">if </span><span style="color:#61676c;">(</span><span style="color:#ed9366;">*</span><span style="color:#61676c;">v)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">cmp</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">num) </span><span style="color:#ed9366;">== </span><span style="color:#61676c;">Ordering</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Less {
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">*</span><span style="color:#61676c;">v </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> num</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">clone</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">        })
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">or_insert</span><span style="color:#61676c;">(num)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">})</span><span style="color:#61676ccc;">;
</span><span style="font-style:italic;color:#abb0b6;">// Update the latest version of each crate.
</span><span style="color:#61676c;">crates</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">iter_mut</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">for_each</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">item</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> Crate| {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(version) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> latest_versions</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">remove</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">crate_id) {
</span><span style="color:#61676c;">        item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">version </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> version</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">})</span><span style="color:#61676ccc;">;
</span></pre>
<p>Now that we have the latest version of each crate, we can generate the index.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">generate_javascript_crates_index</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">crates</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;Crate&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;()&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// &lt;name, [optional description, version]&gt;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> crates_map</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">HashMap&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">, (</span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;, Version)&gt; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> crates
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_par_iter</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">item</span><span style="color:#61676c;">| (item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">name</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">(item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">description</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">version)))
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">collect</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">format!</span><span style="color:#61676c;">(
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;var crateIndex=</span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">;&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        serde_json</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">to_string(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">crates_map)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">    )
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> path </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">Path</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(</span><span style="color:#86b300;">&quot;./crate-index.js&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    fs</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">write(path</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">contents)</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(())
</span><span style="color:#61676c;">}
</span></pre>
<p>We generate the index as a JavaScript file instead of a JSON file. Here is a sample of the generated index:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">var </span><span style="color:#61676c;">crateInde</span><span style="color:#ed9366;">=</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;rand&quot;</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;">[</span><span style="color:#86b300;">&quot;Random number generators and other randomness functionality.&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#86b300;">&quot;0.8.5&quot;</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;tokio&quot;</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;">[</span><span style="color:#86b300;">&quot;An event-driven, non-blocking I/O platform for writing asynchronous I/O backed applications.&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#86b300;">&quot;1.27.0&quot;</span><span style="color:#61676c;">]
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">}</span><span style="color:#61676ccc;">;
</span></pre>
<h1 id="compressing-the-index" class="toc-item group scroll-mt-20">
    Compressing the index
    <a href="#compressing-the-index" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The full index of top 20K crates is more than 1.7MB. Since we are going to integrate the whole index into the extension, we should compress it to reduce the size. One idea is to map most frequent words to a short token. Then we can replace the words with the token in the index. For example, the words <code>asynchronous</code> and <code>applications</code> occur frequently in the index, we can replace them with <code>$1</code> and <code>$2</code>, respectively.</p>
<h2 id="tokenizing-the-search-words-and-building-the-frequency-map" class="toc-item group scroll-mt-20">
    Tokenizing the search words and building the frequency map
    <a href="#tokenizing-the-search-words-and-building-the-frequency-map" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>The first step is to collect all text, including the crate name and description, and use <a href="https://crates.io/crates/unicode-segmentation">unicode-segmentation</a> to tokenize them into words.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">use </span><span style="color:#61676c;">unicode_segmentation</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">UnicodeSegmentation</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">derive</span><span style="color:#61676c;">(Debug)]
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">WordCollector </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    words</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#399ee6;">WordCollector </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">new</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        WordCollector { words</span><span style="color:#61676ccc;">: </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[] }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">collect_crate_name</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">name</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">words</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">extend</span><span style="color:#61676c;">(
</span><span style="color:#61676c;">            name
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">split</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">c</span><span style="color:#61676c;">| c </span><span style="color:#ed9366;">== </span><span style="color:#86b300;">&#39;_&#39; </span><span style="color:#ed9366;">||</span><span style="color:#61676c;"> c </span><span style="color:#ed9366;">== </span><span style="color:#86b300;">&#39;-&#39;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">filter</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">c</span><span style="color:#61676c;">| c</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">&gt;= </span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from)
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#61676c;">collect</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">&gt;&gt;()</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        )
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">collect_crate_description</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">description</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">words</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">extend</span><span style="color:#61676c;">(
</span><span style="color:#61676c;">            description
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">trim</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unicode_words</span><span style="color:#61676c;">() </span><span style="font-style:italic;color:#abb0b6;">// Tokenize the description into words.
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">filter</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">word</span><span style="color:#61676c;">| word</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">&gt;= </span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">take</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">100</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from)
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#61676c;">collect</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">&gt;&gt;()</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        )</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">execute</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;()&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// some code omitted...
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> collector </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">WordCollector</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    crates</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">iter_mut</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">for_each</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">item</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> Crate| {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(version) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> latest_versions</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">remove</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">crate_id) {
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// Update the latest version of the crate.
</span><span style="color:#61676c;">            item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">version </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> version</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if let </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(description) </span><span style="color:#ed9366;">= &amp;</span><span style="color:#61676c;">item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">description {
</span><span style="color:#61676c;">            collector</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">collect_crate_description</span><span style="color:#61676c;">(description)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">        collector</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">collect_crate_name</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">item</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">name)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// some code omitted...
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(())
</span><span style="color:#61676c;">}
</span></pre>
<p>Then we can calculate the frequency of each word.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">use </span><span style="color:#61676c;">unicode_segmentation</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">UnicodeSegmentation</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">derive</span><span style="color:#61676c;">(Debug)]
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">FrequencyWord</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    word</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">    frequency</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; </span><span style="color:#399ee6;">FrequencyWord</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">inline</span><span style="color:#61676c;">]
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">score</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">usize </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// Due to the prefix + suffix occupying two letters,
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// we should minus the length to calculate the score.
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// This will lead to a 0.4% reduction in file size.
</span><span style="color:#61676c;">        (</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">word</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">- </span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">* </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">frequency
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#399ee6;">WordCollector </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Get the most frequent words.
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">get_frequency_words</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;FrequencyWord&gt; {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// A word to frequency mapping. Such as &lt;&quot;cargo&quot;, 100&gt;.
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> frequency_mapping</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">HashMap&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">, </span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">HashMap</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">words</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_iter</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">for_each</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">word</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> count </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> frequency_mapping</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">entry</span><span style="color:#61676c;">(word)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">or_insert</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">*</span><span style="color:#61676c;">count </span><span style="color:#ed9366;">+= </span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> frequency_words </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> frequency_mapping
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_par_iter</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(|(</span><span style="color:#ff8f40;">word</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">frequency</span><span style="color:#61676c;">)| FrequencyWord { word</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> frequency })
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#61676c;">collect</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;FrequencyWord&gt;&gt;()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        frequency_words</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">par_sort_by_key</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">b</span><span style="color:#61676c;">| Reverse(b</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">score</span><span style="color:#61676c;">()))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        frequency_words
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>The final <code>frequency_words</code> is sorted by the score, which is calculated by the word length and frequency. Here is the sample of the <code>frequency_words</code>:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">[
</span><span style="color:#61676c;">    FrequencyWord { word</span><span style="color:#61676ccc;">: </span><span style="color:#86b300;">&quot;asynchronous&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> frequency</span><span style="color:#61676ccc;">: </span><span style="color:#ff8f40;">100 </span><span style="color:#61676c;">}</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    FrequencyWord { word</span><span style="color:#61676ccc;">: </span><span style="color:#86b300;">&quot;applications&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> frequency</span><span style="color:#61676ccc;">: </span><span style="color:#ff8f40;">99 </span><span style="color:#61676c;">}</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    FrequencyWord { word</span><span style="color:#61676ccc;">: </span><span style="color:#86b300;">&quot;generators&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> frequency</span><span style="color:#61676ccc;">: </span><span style="color:#ff8f40;">98 </span><span style="color:#61676c;">}</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">]
</span></pre>
<h2 id="build-the-token-map" class="toc-item group scroll-mt-20">
    Build the token map
    <a href="#build-the-token-map" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>The next step is to build the token map. We can achieve this by combining a prefix and suffix of characters to form each token. The prefix can be a set of special characters, such as <code>@$^&amp;</code>, while the suffix can be a combination of alphanumeric characters.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">derive</span><span style="color:#61676c;">(Debug)]
</span><span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Minifier</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// A word to keys mapping. Such as &lt;&quot;cargo&quot;, &quot;$0&quot;&gt;.
</span><span style="color:#61676c;">    mapping</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">HashMap&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str</span><span style="color:#61676c;">, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; </span><span style="color:#399ee6;">Minifier</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">const </span><span style="color:#ff8f40;">PREFIX</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;static str </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;@$^&amp;&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">const </span><span style="color:#ff8f40;">SUFFIX</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;static str </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">new</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">frequency_words</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;"> [FrequencyWord]) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Minifier&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> keys</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">= </span><span style="color:#fa6e32;">Self</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">PREFIX
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">chars</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">flat_map</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">prefix</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">                </span><span style="color:#fa6e32;">Self</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">SUFFIX
</span><span style="color:#61676c;">                    </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">chars</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">                    </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">suffix</span><span style="color:#61676c;">| </span><span style="color:#f07171;">format!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{prefix}{suffix}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676c;">))
</span><span style="color:#61676c;">                    </span><span style="color:#ed9366;">.</span><span style="color:#61676c;">collect</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;&gt;()
</span><span style="color:#61676c;">            })
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">collect</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> words </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> frequency_words
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_par_iter</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">take</span><span style="color:#61676c;">(keys</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">())
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#61676c;">collect</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">&gt;&gt;()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        Minifier {
</span><span style="color:#61676c;">            mapping</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> words
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into_par_iter</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">enumerate</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(|(</span><span style="color:#ff8f40;">index</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">fw</span><span style="color:#61676c;">)| (fw</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">word</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">as_str</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> keys</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">get</span><span style="color:#61676c;">(index)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_owned</span><span style="color:#61676c;">()))
</span><span style="color:#61676c;">                </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">collect</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>The <code>Minifier</code> will generate a mapping from the word to the token. Here is a sample of the resulting <code>mapping</code>:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;asynchronous&quot;</span><span style="color:#61676c;">: </span><span style="color:#86b300;">&quot;$1&quot;</span><span style="color:#ed9366;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;applications&quot;</span><span style="color:#61676c;">: </span><span style="color:#86b300;">&quot;$2&quot;</span><span style="color:#ed9366;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;generators&quot;</span><span style="color:#61676c;">: </span><span style="color:#86b300;">&quot;$3&quot;</span><span style="color:#ed9366;">,
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">}
</span></pre>
<h2 id="replace-the-words-with-tokens" class="toc-item group scroll-mt-20">
    Replace the words with tokens
    <a href="#replace-the-words-with-tokens" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>The last step is to replace the words with tokens in the index.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; </span><span style="color:#399ee6;">Minifier</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">minify_crate_name</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">name</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> String {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> vec</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> name
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">split</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">c</span><span style="color:#61676c;">| c </span><span style="color:#ed9366;">== </span><span style="color:#86b300;">&#39;_&#39; </span><span style="color:#ed9366;">||</span><span style="color:#61676c;"> c </span><span style="color:#ed9366;">== </span><span style="color:#86b300;">&#39;-&#39;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">item</span><span style="color:#61676c;">| </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">mapping</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">get</span><span style="color:#61676c;">(item)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(Deref</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">deref)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap_or</span><span style="color:#61676c;">(item))
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">collect</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        vec</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">join</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;_&quot;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">minify_description</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">description</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> String {
</span><span style="color:#61676c;">        description
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">split_word_bounds</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">item</span><span style="color:#61676c;">| </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">mapping</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">get</span><span style="color:#61676c;">(item)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(Deref</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">deref)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap_or</span><span style="color:#61676c;">(item))
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">collect</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>After the minification, the crate index will be like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">var </span><span style="color:#61676c;">mapping</span><span style="color:#ed9366;">=</span><span style="font-style:italic;color:#ed9366;">JSON</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">parse</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&#39;{
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;@2&quot;</span><span style="color:#61676c;">:</span><span style="color:#86b300;">&quot;for&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;@6&quot;</span><span style="color:#61676c;">:</span><span style="color:#86b300;">&quot;and&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;@E&quot;</span><span style="color:#61676c;">:</span><span style="color:#86b300;">&quot;format&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;@s&quot;</span><span style="color:#61676c;">:</span><span style="color:#86b300;">&quot;applications&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;@y&quot;</span><span style="color:#61676c;">:</span><span style="color:#86b300;">&quot;platform&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;$U&quot;</span><span style="color:#61676c;">:</span><span style="color:#86b300;">&quot;tokio&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;$W&quot;</span><span style="color:#61676c;">:</span><span style="color:#86b300;">&quot;plugin&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;$w&quot;</span><span style="color:#61676c;">:</span><span style="color:#86b300;">&quot;writing&quot;
</span><span style="color:#f51818;">}</span><span style="color:#86b300;">&#39;);
</span><span style="color:#fa6e32;">var </span><span style="color:#61676c;">crateIndex</span><span style="color:#ed9366;">=</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;rand&quot;</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;">[</span><span style="color:#86b300;">&quot;Random number generators @6 other randomness @E.&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#86b300;">&quot;0.8.5&quot;</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;$U&quot;</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;">[</span><span style="color:#86b300;">&quot;An event-driven, non-blocking I/O @y @2 $w @W I/O backed @s.&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#86b300;">&quot;1.27.0&quot;</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">}</span><span style="color:#61676ccc;">;
</span></pre>
<p>We also include the mapping field in the index, so that tokens can be decoded back to their corresponding words.</p>
<p>Another thing worth mentioning is that we also use <a href="https://crates.io/crates/minifier">minifier</a> crate to minify the <code>crateIndex</code> JavaScript object to reduce the file size further. After minification, the file size is reduced to 1.3MB, more than <strong>20%</strong> smaller than the original index. The resulting minified index can be found at <a href="https://rust.extension.sh/crates/index.js">https://rust.extension.sh/crates/index.js</a>.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">$ ls -l
</span><span style="color:#61676c;">-rw-r--r--  1 root  1339340 Mar  11 21:27 crates-with-minified.js
</span><span style="color:#61676c;">-rw-r--r--  1 root  1664707 Mar  11 17:06 crates-without-minified.js
</span></pre>
<h1 id="keeping-the-index-up-to-date" class="toc-item group scroll-mt-20">
    Keeping the index up-to-date
    <a href="#keeping-the-index-up-to-date" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Since the index is generated from the <a href="https://crates.io">crates.io</a> API, it needs to be updated regularly to ensure that it reflects the latest state of the Rust ecosystem. We can use <a href="https://github.com/huhu/rust-search-extension/blob/53c94708fb440e80ae134c6763eea99a1acc8afe/.github/workflows/crates-index.yml">GitHub Actions</a> to schedule the updates. The user can also manually trigger an update by entering the <code>:update</code> command or visiting the <a href="https://rust.extension.sh/update">update page</a> on the Rust Search Extension website.</p>
<p><img src="/static/issue-3/update-index.png" alt="" title="" loading="lazy"></p>
<h1 id="conclusion" class="toc-item group scroll-mt-20">
    Conclusion
    <a href="#conclusion" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>In this article, we have described how to build a top 20K crates index for Rust and how to minimize the index to reduce its file size. The source code for the index generation and minimization process is available on <a href="https://github.com/huhu/rust-search-extension/blob/8597db7227fcc0888e462489a47be7b794d9c784/rust/src/tasks/crates.rs">GitHub</a>. The Rust Search Extension is a powerful tool for searching the Rust crates ecosystem, and we hope that this article has provided some insight into how it works behind the scenes.</p>
<p>Thanks for reading, and welcome to give <a href="https://rust.extension.sh">Rust Search Extension</a> a try!</p>
2024-03-11T22:51:08.359718789+08:00 - 文章标题：Issue 2
2024-03-11T22:51:08.359753059+08:00 - 文章内容：<p>Dear Rustaceans,</p>
<p>Welcome to the second issue of Rust Magazine! We are excited to bring you another round of engaging articles and tutorials from the Rust community.</p>
<p>In this issue, we explore topics ranging from optimizing Rust binary search to designing an API for a user-friendly retry crate. We also have an interview with <a class="author-code" href="/@sunli">
<img src="/static/avatar/sunli.jpeg" alt="avatar" loading="lazy">
<span>Sunli</span>
</a>
, the creator of popular crates such as <a href="https://github.com/async-graphql/async-graphql">async-graphql</a> and <a href="https://github.com/poem-web/poem">poem</a>, as well as a conversation with ChatGPT on the topic of Rust lifetimes. Additionally, we feature articles on <a href="https://github.com/egraphs-good/egg">Egg</a>, a popular Rust framework to help build a SQL optimizer, and an applicative command-line parser with Category Theory.</p>
<p>Thank you to our authors for their contributions and dedication to the Rust community. We couldn’t have done it without you.</p>
<p>As we close the chapter on Issue 2, we are excited to announce that we are looking for articles for Issue 3, and we would love to hear from you. Do you have a Rust project you want to share with the community? Have you learned something new about Rust that you want to pass on? Or do you have an idea for a Rust-related article that you would like to explore? Please don’t hesitate to submit your proposal via our website. Let’s make Rust Magazine a platform for everyone to share their Rust experience and knowledge!</p>
<p>Best regards,</p>
<p>The Rust Magazine Team.</p>
2024-03-11T22:51:08.359778488+08:00 - 文章标题：Write a SQL Optimizer using Egg
2024-03-11T22:51:08.369646190+08:00 - 文章内容：<h1 id="write-a-sql-optimizer-using-egg" class="toc-item group scroll-mt-20">
    Write a SQL Optimizer using Egg
    <a href="#write-a-sql-optimizer-using-egg" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The SQL optimizer is an important module in relational database systems. Its purpose is to optimize SQL statements to improve query efficiency. To help beginners understand the basic principles of the SQL optimizer, we have implemented a small SQL optimizer using the Egg framework in Rust language. Although its code is less than a thousand lines, it covers classic optimization techniques such as expression simplification, constant folding, predicate pushdown, column pruning, join reordering, and cost estimation. It includes both rule-based optimization (RBO) and cost-based optimization (CBO), and it is capable of working on actual TPC-H queries.</p>
<p>In this article, we will briefly introduce the implementation process of this project. You can find the relevant code in the <a href="https://github.com/risinglightdb/sql-optimizer-labs">SQL Optimizer Labs</a>, or learn about its application in the <a href="https://github.com/risinglightdb/risinglight">RisingLight</a> project.</p>
<h1 id="the-egg-library" class="toc-item group scroll-mt-20">
    The Egg Library
    <a href="#the-egg-library" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Egg is a program optimizer framework written in Rust. Its core technology is based on a method called Equality Saturation. The idea behind it is to gradually rewrite expressions to find all equivalent forms and then identify the optimal solution among them. During this process, Egg uses the <a href="https://en.wikipedia.org/wiki/E-graph">e-graph</a> data structure to efficiently query and maintain equivalence classes at runtime, reducing the time and space costs of program optimization.</p>
<p>The following image, taken from the <a href="https://egraphs-good.github.io">Egg official website</a>, shows the step-by-step process of optimizing the expression <code>a * 2 / 2</code> to simply <code>a</code>.</p>
<p><img src="/static/issue-2/egg/egg-official.png" alt="" title="" loading="lazy"></p>
<p>Taking the second image as an example, we can see that it consists of three layers of structure: e-graph, e-class, and e-node.</p>
<p><img src="/static/issue-2/egg/egraph.png" alt="" title="" loading="lazy"></p>
<p>Each node in the diagram is an e-node, which can represent a variable, a constant, or an operation. Multiple e-nodes can form an e-class, which represents a group of equivalent nodes with the same semantics that can be replaced by each other. The child nodes of each e-node are e-classes, which together form an e-graph. Therefore, this data structure can represent a large number of possible combinations with compact space.</p>
<p>The e-graph also allows for dynamic insertion of e-nodes and merging of e-classes, which enables expression rewriting. The following diagram illustrates the process of inserting a new expression <code>a &lt;&lt; 1</code> into the graph and merging it with <code>a * 2</code>.</p>
<p><img src="/static/issue-2/egg/rewrite.png" alt="" title="" loading="lazy"></p>
<p>Egg supports user-defined rules using <a href="https://en.wikipedia.org/wiki/S-expression">S-expressions</a>. For example, the rule shown in the above figure can be expressed as <code>(* ?a 2) =&gt; (&lt;&lt; ?a 1)</code>. More complex rules can also be written in Rust if needed. This makes Egg highly flexible and extensible. Developers can quickly implement an optimizer for their own language based on Egg. The following sections of this article demonstrate its application in SQL.</p>
<p>Lastly, it’s worth mentioning that the academic paper behind Egg has won the Distinguished Paper Award at POPL 2021. If you are interested, you can find more resources on their <a href="https://egraphs-good.github.io">website</a>.</p>
<h1 id="define-the-sql-language" class="toc-item group scroll-mt-20">
    Define The SQL Language
    <a href="#define-the-sql-language" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The first step to using Egg is to define the language, which in this case is SQL statements and their expressions.</p>
<p>Egg fully utilizes algebraic data types (ADT) in Rust to define the language. We can define an enum using the <a href="https://docs.rs/egg/latest/egg/macro.define_language.html"><code>define_language</code></a> macro provided by Egg to describe a node.</p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">define_language! </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub enum </span><span style="color:#399ee6;">Expr </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// values
</span><span style="color:#61676c;">        Constant(DataValue)</span><span style="color:#61676ccc;">,            </span><span style="font-style:italic;color:#abb0b6;">// null, true, 1, 1.0, &quot;hello&quot;, ...
</span><span style="color:#61676c;">        Column(ColumnRefId)</span><span style="color:#61676ccc;">,            </span><span style="font-style:italic;color:#abb0b6;">// $1.2, $2.1, ...
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// list
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;list&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> List(</span><span style="font-style:italic;color:#55b4d4;">Box</span><span style="color:#61676c;">&lt;[Id]&gt;)        </span><span style="font-style:italic;color:#abb0b6;">// (list ...)
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// operations
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;+&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Add([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,             </span><span style="font-style:italic;color:#abb0b6;">// (+ a b)
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;and&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> And([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,           </span><span style="font-style:italic;color:#abb0b6;">// (and a b)
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// plans
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;scan&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Scan([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,         </span><span style="font-style:italic;color:#abb0b6;">// (scan table [column..])
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;proj&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Proj([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,         </span><span style="font-style:italic;color:#abb0b6;">// (proj [expr..] child)
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;filter&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Filter([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,     </span><span style="font-style:italic;color:#abb0b6;">// (filter condition child)
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;join&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Join([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">4</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,         </span><span style="font-style:italic;color:#abb0b6;">// (join type condition left right)
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;hashjoin&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> HashJoin([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">5</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#abb0b6;">// (hashjoin type [left_expr..] [right_expr..] left right)
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;agg&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Agg([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,           </span><span style="font-style:italic;color:#abb0b6;">// (agg aggs=[expr..] group_keys=[expr..] child)
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;order&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Order([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,       </span><span style="font-style:italic;color:#abb0b6;">// (order [order_key..] child)
</span><span style="color:#61676c;">            </span><span style="color:#86b300;">&quot;asc&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Asc(Id)</span><span style="color:#61676ccc;">,                </span><span style="font-style:italic;color:#abb0b6;">// (asc key)
</span><span style="color:#61676c;">            </span><span style="color:#86b300;">&quot;desc&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Desc(Id)</span><span style="color:#61676ccc;">,              </span><span style="font-style:italic;color:#abb0b6;">// (desc key)
</span><span style="color:#61676c;">        </span><span style="color:#86b300;">&quot;limit&quot; </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Limit([Id</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">,       </span><span style="font-style:italic;color:#abb0b6;">// (limit limit offset child)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>The above code is a simplified version that includes four types of nodes: value, list, operator, and plan node.</p>
<ol>
<li>Value: the leaf node in an expression. It can be a <code>Constant</code>, or a variable <code>Column</code> that refers to a column in a table.</li>
<li>List: this is a special node that we introduce, representing an ordered list of several elements. It can have any number of child nodes. Note that from here on, each variant is prefixed with a string literal. It is used to identify this node in S-expressions. The specific representation is shown in the comment.</li>
<li>Operator: usually a middle node in an expression. Its associated Rust type can be either <code>Id</code>, <code>[Id; N]</code>, or <code>Box&lt;[Id]&gt;</code>, which respectively represent 1, N, or an indefinite number of child nodes.</li>
<li>Plan Node: similar to an operator, but it operates on a table instead of a value. A SQL statement is transformed into a query plan tree composed of several nodes. Each plan node contains not only child nodes (<code>child</code>, <code>left</code>, <code>right</code>) which are plans, but also several parameters composed of expressions.</li>
</ol>
<p>Let’s say we have a SQL statement like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">SELECT </span><span style="color:#ff8f40;">users</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">name</span><span style="color:#61676c;">, </span><span style="color:#f07171;">count</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">commits</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">id</span><span style="color:#61676c;">)
</span><span style="color:#fa6e32;">FROM</span><span style="color:#61676c;"> users, repos, commits
</span><span style="color:#fa6e32;">WHERE </span><span style="color:#ff8f40;">users</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">id </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">commits</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">user_id
</span><span style="color:#61676c;">	</span><span style="color:#ed9366;">AND </span><span style="color:#ff8f40;">repos</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">id </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">commits</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">repo_id
</span><span style="color:#61676c;">	</span><span style="color:#ed9366;">AND </span><span style="color:#ff8f40;">repos</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">name </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&#39;RisingLight&#39;
</span><span style="color:#61676c;">	</span><span style="color:#ed9366;">AND </span><span style="color:#ff8f40;">commits</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">time </span><span style="color:#ed9366;">BETWEEN </span><span style="color:#fa6e32;">date </span><span style="color:#86b300;">&#39;2022-01-01&#39; </span><span style="color:#ed9366;">AND </span><span style="color:#fa6e32;">date </span><span style="color:#86b300;">&#39;2022-12-31&#39;
</span><span style="color:#fa6e32;">GROUP BY </span><span style="color:#ff8f40;">users</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">name
</span><span style="color:#ed9366;">HAVING </span><span style="color:#f07171;">count</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">commits</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">id</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">&gt;= </span><span style="color:#ff8f40;">10
</span><span style="color:#fa6e32;">ORDER BY </span><span style="color:#f07171;">count</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">commits</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">id</span><span style="color:#61676c;">) </span><span style="color:#fa6e32;">DESC
</span><span style="color:#fa6e32;">LIMIT </span><span style="color:#ff8f40;">10
</span></pre>
<p>Its query plan can be represented in our language as follows:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">(proj (list $</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;"> (count $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">))
</span><span style="color:#61676c;">  (</span><span style="color:#fa6e32;">limit </span><span style="color:#ff8f40;">10 0
</span><span style="color:#61676c;">    (order (list (</span><span style="color:#fa6e32;">desc</span><span style="color:#61676c;"> (count $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">)))
</span><span style="color:#61676c;">      (filter (</span><span style="color:#ed9366;">&gt;=</span><span style="color:#61676c;"> (count $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">) </span><span style="color:#ff8f40;">10</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">        (agg (list (count $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">)) (list $</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">          (filter (</span><span style="color:#ed9366;">and</span><span style="color:#61676c;"> (</span><span style="color:#ed9366;">and</span><span style="color:#61676c;"> (</span><span style="color:#ed9366;">and</span><span style="color:#61676c;"> (</span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">) (</span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">)) (</span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">2 </span><span style="color:#86b300;">&#39;RisingLight&#39;</span><span style="color:#61676c;">))
</span><span style="color:#61676c;">                    (</span><span style="color:#ed9366;">and</span><span style="color:#61676c;"> (</span><span style="color:#ed9366;">&gt;=</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">4 </span><span style="color:#86b300;">&#39;2022-01-01&#39;</span><span style="color:#61676c;">) (</span><span style="color:#ed9366;">&lt;=</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">4 </span><span style="color:#86b300;">&#39;2022-12-31&#39;</span><span style="color:#61676c;">)))
</span><span style="color:#61676c;">            (</span><span style="color:#fa6e32;">join</span><span style="color:#61676c;"> inner true
</span><span style="color:#61676c;">              (</span><span style="color:#fa6e32;">join</span><span style="color:#61676c;"> inner true
</span><span style="color:#61676c;">                (scan $</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;"> (list $</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">))
</span><span style="color:#61676c;">                (scan $</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;"> (list $</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">)))
</span><span style="color:#61676c;">              (scan $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;"> (list $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">2</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">4</span><span style="color:#61676c;"> $</span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">.</span><span style="color:#ff8f40;">5</span><span style="color:#61676c;">))
</span><span style="color:#61676c;">)))))))
</span></pre>
<p>The next step is to define a series of rules to perform equivalent transformations on the expression above, and eventually find the representation with the smallest cost as the optimized result.</p>
<h1 id="define-rewrite-rules" class="toc-item group scroll-mt-20">
    Define Rewrite Rules
    <a href="#define-rewrite-rules" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>In this section, we will use the API provided by Egg to describe optimization rules. Due to space limitations, we will choose several representative ones for a brief introduction. They are:</p>
<ul>
<li>Expression simplification</li>
<li>Constant folding</li>
<li>Predicate pushdown</li>
<li>HashJoin</li>
<li>Join reordering</li>
<li>Cost function</li>
</ul>
<h2 id="expression-simplification" class="toc-item group scroll-mt-20">
    Expression Simplification
    <a href="#expression-simplification" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Firstly, we simplify expressions in the plan nodes.</p>
<p>For example, the multiplication-to-shift rule mentioned at the beginning can be described in Egg using the <a href="https://docs.rs/egg/0.9.3/egg/macro.rewrite.html"><code>rewrite</code></a> macro as follows:</p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">rewrite!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;mul2-to-shl1&quot;</span><span style="color:#61676ccc;">; </span><span style="color:#86b300;">&quot;(* ?a 2)&quot; </span><span style="color:#ed9366;">=&gt; </span><span style="color:#86b300;">&quot;(&lt;&lt; ?a 1)&quot;</span><span style="color:#61676c;">)
</span></pre>
<p>The strings on either side of <code>=&gt;</code> represent the expression patterns before and after the transformation, where <code>?a</code> represents a variable that can be replaced with any expression. When the runner finds an expression that matches this pattern, it generates a new expression according to the pattern on the right and unions it with the original node to form an equivalence class. By the way, <code>=&gt;</code> can also be replaced with <code>&lt;=&gt;</code> to indicate a bidirectional transformation.</p>
<p>Some rules require certain conditions to be met before execution. For example, the following rule is only valid when the divisor is not zero:</p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">rewrite!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;div-self&quot;</span><span style="color:#61676ccc;">; </span><span style="color:#86b300;">&quot;(/ ?a ?a)&quot; </span><span style="color:#ed9366;">=&gt; </span><span style="color:#86b300;">&quot;1&quot; </span><span style="color:#fa6e32;">if </span><span style="color:#f07171;">is_not_zero</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;?a&quot;</span><span style="color:#61676c;">))
</span></pre>
<p>Here we use the <code>is_not_zero</code> function to determine whether the variable <code>?a</code> is not zero. However, how do we know whether an expression is non-zero? This is where analysis comes in.</p>
<h2 id="constant-folding" class="toc-item group scroll-mt-20">
    Constant Folding
    <a href="#constant-folding" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Egg’s analysis allows us to associate arbitrary value with each e-class to describe its characteristics, such as whether it is a constant, what data type it is, or which columns are referenced. To solve the problem mentioned above, we can introduce constant analysis. It determines whether an expression is a constant and, if so, provides the specific constant value. The following figure shows the constant analysis results for an expression.</p>
<p><img src="/static/issue-2/egg/constant-analysis.png" alt="" title="" loading="lazy"></p>
<p>During the process of analysis, Egg allows us to modify the e-graph by adding e-nodes or merging e-classes. By using this mechanism, we can implement constant folding optimization: replacing expressions that are known to be constants with a single value.</p>
<p><img src="/static/issue-2/egg/constant-folding.png" alt="" title="" loading="lazy"></p>
<p>As shown in the left side of the figure, in constant analysis, we find that the node <code>(/ 2 2)</code> can be evaluated into the constant <code>1</code>. At this point, we create a new node <code>1</code> (which is already present in the graph) and merge it with <code>(/ 2 2)</code>. This completes the constant folding. Its characteristic is that it utilizes the side effect of expression analysis instead of being accomplished by rewriting rules.</p>
<p>In terms of code implementation, each analysis needs to implement the <a href="https://docs.rs/egg/0.9.3/egg/trait.Analysis.html"><code>Analysis</code></a> trait. The documentation provides an example of constant folding, explaining the specific steps for implementing analysis. Interested readers can click on the link to learn more about the details.</p>
<h2 id="predicate-pushdown" class="toc-item group scroll-mt-20">
    Predicate Pushdown
    <a href="#predicate-pushdown" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>After simplifying the expressions, let’s move on to the SQL plan node. One of the classic optimizations is predicate pushdown.</p>
<p>The idea of predicate pushdown is to push the predicates in the Filter node down to the lower-level operators, in order to filter out unnecessary data as early as possible, thereby reducing the amount of data that the upper-level operator needs to process. For example, the following diagram shows the process of pushing the Filter predicates above the Join node down to the Scan nodes. There are mainly two steps:</p>
<ol>
<li>Push the Filter predicate down to the Join condition.</li>
<li>Push the Join condition down to the left and right child nodes, and generate new Filter nodes.</li>
</ol>
<p><img src="/static/issue-2/egg/pushdown-filter.png" alt="" title="" loading="lazy"></p>
<p>The first step can be described by very simple rules:</p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">rewrite!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;pushdown-filter-join&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(filter ?cond (join inner ?on ?left ?right))&quot; </span><span style="color:#ed9366;">=&gt;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(join inner (and ?on ?cond) ?left ?right)&quot;
</span><span style="color:#61676c;">)
</span></pre>
<p>However, the second step is quite tricky since there are three possible scenarios:</p>
<ol>
<li>↙️ The predicate only contains columns from the left side and can be pushed down to the left subtree.</li>
<li>↘️ The predicate only contains columns from the right side and can be pushed down to the right subtree.</li>
<li>⏹️ The predicate contains columns from both sides, making it impossible to push down.</li>
</ol>
<p>At this point, we need to use the conditional rewrite feature of Egg. Only when the referenced columns in the predicate come from a subtree can we push it down.</p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">rewrite!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;pushdown-filter-join-left&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(join inner (and ?cond1 ?cond2) ?left ?right)&quot; </span><span style="color:#ed9366;">=&gt;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(join inner ?cond2 (filter ?cond1 ?left) ?right)&quot;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">if </span><span style="color:#f07171;">columns_is_subset</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;?cond1&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;?left&quot;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span></pre>
<p>The function <code>columns_is_subset(a, b)</code> here is defined as whether the set of columns used by expression <code>a</code> is a subset of columns provided by plan node <code>b</code>. To achieve this, we need to introduce a new “column analysis”, to calculate the set of columns used and defined by each node. This is somewhat similar to the “use” and “def” sets in live variable analysis. The implementation process is not complicated. You can refer to the code in the <a href="https://github.com/risinglightdb/risinglight/blob/6436dbeff1cbea691dc843038fa2dc3217f592bf/src/planner/rules/plan.rs#L208-L227">RisingLight</a> project for more details.</p>
<p>In addition to pushing down Filter nodes, we can also push down Projection nodes and perform column pruning on the operators along the way. Column pruning can remove unnecessary columns from plan nodes, reducing scan and transmission costs.</p>
<h2 id="hashjoin" class="toc-item group scroll-mt-20">
    HashJoin
    <a href="#hashjoin" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>The next optimization is to replace the Join operator with a more efficient Hash Join. The basic idea of hash join is to first build a hash table for one side, and then traverse the other side, looking for matching items in the hash table. Its time complexity is <code>O(N + M)</code>, which is usually far better than the nested loop join’s <code>O(N * M)</code>.</p>
<p>Implementing hash join optimization in Egg is also quite simple. Its main function is to identify the join condition in the form of <code>l1 = r1 AND l2 = r2 AND ...</code>, and then separate the keys on the left and right sides and store them in the HashJoin node. This makes it easy for the executor to directly extract data from the input on both sides in the future.</p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">rewrite!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;hash-join-on-one-eq&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(join ?type (= ?l1 ?r1) ?left ?right)&quot; </span><span style="color:#ed9366;">=&gt;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(hashjoin ?type (list ?l1) (list ?r1) ?left ?right)&quot;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">if </span><span style="color:#f07171;">columns_is_subset</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;?l1&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;?left&quot;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">if </span><span style="color:#f07171;">columns_is_subset</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;?l2&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;?right&quot;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span></pre>
<p>For cases where the join condition includes two or more equalities, we can also describe it in a similar way.</p>
<h2 id="join-reordering" class="toc-item group scroll-mt-20">
    Join Reordering
    <a href="#join-reordering" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>In addition to optimizing join algorithms, we can also adjust the order of multiple joins to minimize the overall execution cost. Different join orders can have vastly different costs.</p>
<p>For common inner joins, they satisfy the commutative law and the associative law. From the perspective of the query plan tree, the commutative law is equivalent to swapping the left and right subtrees of a join node, and the associative law is equivalent to performing rotations on the binary tree.</p>
<p><img src="/static/issue-2/egg/join-reordering.png" alt="" title="" loading="lazy"></p>
<p>Describing the associative law in Egg is also intuitive:</p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">rewrite!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;join-right-rotation&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(join inner true (join inner true ?left ?mid) ?right)&quot; </span><span style="color:#ed9366;">=&gt;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(join inner true ?left (join inner true ?mid ?right))&quot;
</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span></pre>
<p>Note that we have not considered the case where the Join operator has conditions. If the condition of the top-level Join operator contains columns from A, it cannot be moved to the right. If conditions are considered, more complex rules may need to be constructed with column analysis.</p>
<p>Similarly, we can also implement the commutative law:</p>
<p><img src="/static/issue-2/egg/join-swap.png" alt="" title="" loading="lazy"></p>
<pre style="background-color:#fafafa;">
<span style="color:#f07171;">rewrite!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;join-swap&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(proj ?exprs (join inner ?cond ?left ?right))&quot; </span><span style="color:#ed9366;">=&gt;
</span><span style="color:#61676c;">    </span><span style="color:#86b300;">&quot;(proj ?exprs (join inner ?cond ?right ?left))&quot;
</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span></pre>
<p>However, we require that a Projection operator must be placed above the Join in order to perform swapping. Because swapping the left and right subtrees of a Join operator results in a change in the output columns, which does not meet our definition of e-classes. Therefore, we need to apply a Projection on top to ensure that the output of both operators is exactly the same before and after rewriting.</p>
<p>With the above two rules, we can enumerate all possible join orders. For N tables, there are <code>N!</code> different permutations. Which one is the optimal solution? This is where a cost function comes in, which calculates the cost based on the actual sizes of each table.</p>
<h2 id="cost-function" class="toc-item group scroll-mt-20">
    Cost Function
    <a href="#cost-function" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>In the previous optimizations, the rewritten plans are always better than the original ones. These belong to rule-based optimization (RBO). However, join reordering requires an additional cost function to evaluate different plans and choose the one with the minimum cost. This belongs to cost-based optimization (CBO).</p>
<p>Since the equality saturation is naturally based on cost, implementing CBO in Egg is a breeze. We only need to implement the cost function under the <a href="https://docs.rs/egg/0.9.2/egg/trait.CostFunction.html"><code>CostFunction</code></a> trait:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">CostFn</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">pub </span><span style="color:#61676c;">egraph</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;"> EGraph,
</span><span style="color:#61676c;">}
</span><span style="color:#fa6e32;">impl </span><span style="color:#61676c;">egg</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">CostFunction&lt;Expr&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">CostFn</span><span style="color:#61676c;">&lt;&#39;</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">type </span><span style="color:#399ee6;">Cost </span><span style="color:#ed9366;">= </span><span style="color:#fa6e32;">f32</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">cost</span><span style="color:#61676c;">&lt;C&gt;(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">enode</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">Expr, </span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">costs</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> C) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Cost
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">        C</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FnMut(Id) -&gt; </span><span style="color:#fa6e32;">Self</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Cost,
</span><span style="color:#61676c;">    {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">use </span><span style="color:#61676c;">Expr</span><span style="color:#ed9366;">::*</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// Define some helper functions:
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// rows:  estimate the number of rows
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// cols:  return the number of columns
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// out:   amount of data = rows * cols
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// costs: the total cost of a node
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match</span><span style="color:#61676c;"> enode {
</span><span style="color:#61676c;">            Scan(</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">|</span><span style="color:#61676c;"> Values(</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#f07171;">out</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            Order([</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> c]) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#f07171;">nlogn</span><span style="color:#61676c;">(</span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(c)) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">out</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(c)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            Proj([exprs</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> c]) </span><span style="color:#ed9366;">|</span><span style="color:#61676c;"> Filter([exprs</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> c]) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(exprs) </span><span style="color:#ed9366;">* </span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(c) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">out</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(c)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            Agg([exprs</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> groupby</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> c]) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">(</span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(exprs) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(groupby)) </span><span style="color:#ed9366;">* </span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(c) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">out</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(c)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            Limit([</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> c]) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#f07171;">out</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(c)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            TopN([</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> c]) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">(</span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(id) </span><span style="color:#ed9366;">+ </span><span style="color:#ff8f40;">1.0</span><span style="color:#61676c;">)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">log2</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">* </span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(c) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">out</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(c)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            Join([</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> on</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> l</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> r]) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(on) </span><span style="color:#ed9366;">* </span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(l) </span><span style="color:#ed9366;">* </span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(r) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">out</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(l) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(r)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            HashJoin([</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> l</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> r]) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">(</span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(l) </span><span style="color:#ed9366;">+ </span><span style="color:#ff8f40;">1.0</span><span style="color:#61676c;">)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">log2</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">* </span><span style="color:#61676c;">(</span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(l) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(r)) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">out</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(l) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(r)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            Insert([</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> c]) </span><span style="color:#ed9366;">|</span><span style="color:#61676c;"> CopyTo([</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> c]) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#f07171;">rows</span><span style="color:#61676c;">(c) </span><span style="color:#ed9366;">* </span><span style="color:#f07171;">cols</span><span style="color:#61676c;">(c) </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(c)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            Empty(</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#ff8f40;">0.0</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#abb0b6;">// for other expressions, the cost = 0.1 x AST size
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">_ =&gt;</span><span style="color:#61676c;"> enode</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">fold</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">0.1</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">|</span><span style="color:#ff8f40;">sum</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">id</span><span style="color:#61676c;">| sum </span><span style="color:#ed9366;">+ </span><span style="color:#f07171;">costs</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">id))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>This function serves as an example and mainly considers the computational cost of operators and the size of the output data. In actual development, it may be necessary to fine-tune the cost function multiple times until the optimizer can find reasonable results.</p>
<p>After defining the cost function, we can hand it over to Egg to find the optimal expression. Egg provides a <a href="https://docs.rs/egg/0.9.3/egg/struct.Runner.html"><code>Runner</code></a> to automatically perform this process:</p>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;">/// Optimize the given plan
</span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">optimize</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">expr</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">RecExpr) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> RecExpr {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Do equality saturation based on the optimization rules
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> runner </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">egg</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Runner</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">default()
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">with_expr</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">expr)
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;*</span><span style="color:#61676c;">rules</span><span style="color:#ed9366;">::</span><span style="color:#ff8f40;">ALL_RULES</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// Extract the best plan based on the cost function
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> cost_fn </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> CostFn {
</span><span style="color:#61676c;">        egraph</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">runner</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">egraph</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> extractor </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">egg</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Extractor</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">runner</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">egraph</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> cost_fn)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let </span><span style="color:#61676c;">(_cost</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> best_expr) </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> extractor</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">find_best</span><span style="color:#61676c;">(runner</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">roots[</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    best_expr
</span><span style="color:#61676c;">}
</span></pre>
<p>However, the current runner of Egg is not very intelligent. It does not perform heuristic searches based on cost functions when expanding e-classes, but instead expands all possible representations. For more complex queries, such as multi-table joins in TPC-H, it is easy to encounter combinatorial explosion. In addition, some special rewriting rules can be applied infinitely, leading to deep nested expressions, which further exacerbates this phenomenon.</p>
<p><img src="/static/issue-2/egg/alphago.png" alt="" title="" loading="lazy"></p>
<blockquote>
<p>Multi-iteration &amp; multi-stage optimization. Source: <a href="https://www.quora.com/What-does-it-mean-that-AlphaGo-relied-on-Monte-Carlo-tree-search/answer/Kostis-Gourgoulias">AlphaGo</a>.</p>
</blockquote>
<p>To avoid this issue, we can manually iterate the above process multiple times, and extract the best plan as the input for the next round of iteration. This can achieve a nearly heuristic search effect. Additionally, we can manually categorize rules into several types for multi-stage optimization, applying only a subset of rules in each stage. With these workarounds, our optimizer can optimize common SQL queries to a satisfactory level in around 100ms. You can see the optimization results of RisingLight on TPC-H queries <a href="https://github.com/risinglightdb/risinglight/blob/2143a7c93d262eb7334298e357a358b0f675bff6/tests/planner_test/tpch.planner.sql">here</a>.</p>
<h1 id="conclusion" class="toc-item group scroll-mt-20">
    Conclusion
    <a href="#conclusion" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>In this article, we introduced the program optimizer framework Egg and demonstrated how to use it to develop an SQL optimizer.</p>
<p>The core principle of Egg is equality saturation. It rewrites expressions through rules and then finds the optimal solution based on a cost function. When using Egg, developers need to define the language first, then describe the rewrite rules in S-expressions, and finally define the cost function. The rest of the work can be automated by the framework.</p>
<p>Egg is a powerful and user-friendly framework that is ideal for quickly prototyping various optimizers. If you have similar requirements in your work or are interested in writing a database optimizer, you might want to try Egg!</p>
2024-03-11T22:51:08.369842926+08:00 - 文章标题：Demystifying Rust Lifetimes: A Conversation with ChatGPT
2024-03-11T22:51:08.370975169+08:00 - 文章内容：<blockquote>
<p>All-knowing and All-powerful ChatGPT, please bring forth all your abilities to rescue the learning curve of Rust!</p>
</blockquote>
<h1 id="preface" class="toc-item group scroll-mt-20">
    Preface
    <a href="#preface" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>I believe there is no introduction needed for <a href="https://chat.openai.com/chat">ChatGPT</a>, as it is already widely known worldwide. As we all know, one of the most well-known learning obstacles in Rust is the issue of lifetimes. Therefore, today I attempted to have ChatGPT explain the issue of lifetimes in Rust and see if ChatGPT can be of any concrete help in reducing the learning curve of Rust.</p>
<p><a href="https://chat.openai.com/chat">ChatGPT</a> is already widely known worldwide, so an introduction is not necessary. As we all know, one of the biggest learning obstacles in Rust is the concept of <strong>lifetimes</strong>. Therefore, I spoke with ChatGPT to see if it could explain the concept of lifetimes in Rust and provide concrete help in reducing the learning curve for Rust learners.</p>
<p>First, the conclusion:</p>
<blockquote>
<p>ChatGPT is likely to have a good grasp of various details of the Rust language, possess certain thinking abilities, and have the potential to act as a private Rust teacher. However, currently, ChatGPT can only act as a learning partner, and if one wishes to tap into ChatGPT’s potential as a teacher, appropriate questions need to be raised.</p>
</blockquote>
<p>Next, let me show you how I arrived at this conclusion.</p>
<h1 id="chat-with-chatgpt" class="toc-item group scroll-mt-20">
    Chat with ChatGPT
    <a href="#chat-with-chatgpt" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>me: Will this Rust code compile correctly?</strong></p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> buf1 </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[</span><span style="color:#ff8f40;">0</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">32</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> buf2 </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[</span><span style="color:#ff8f40;">0</span><span style="color:#61676ccc;">; </span><span style="color:#ff8f40;">32</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> b </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">first</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> buf1</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> buf2)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    buf2[</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">] </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    b[</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">] </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">2</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">first</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;(</span><span style="color:#ff8f40;">buf1</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a mut</span><span style="color:#61676c;"> [</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">], </span><span style="color:#ff8f40;">buf2</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a mut</span><span style="color:#61676c;"> [</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">]) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a mut </span><span style="color:#61676c;">[</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">] {
</span><span style="color:#61676c;">    buf1
</span><span style="color:#61676c;">}
</span></pre>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>No, the given Rust code will not compile because of a lifetime error.</p>
<p>The first function takes two mutable references to slices of <code>u8</code> values (<code>buf1</code> and <code>buf2</code>) and returns a mutable reference to <code>buf1</code>. The function has a single lifetime parameter, <code>'a</code>, which means that both mutable references <code>buf1</code> and <code>buf2</code> must have the same lifetime.</p>
<p>However, in the main function, <code>buf1</code> and <code>buf2</code> have different lifetimes because they are created separately and do not have any relationship between their lifetimes. Specifically, <code>buf1</code> and <code>buf2</code> have distinct mutable references, so they cannot be passed to the first function because it requires them to have the same lifetime.</p>
<p>To fix this issue, you can modify the first function to specify that <code>buf1</code> and <code>buf2</code> have different lifetimes, such that the returned mutable reference only depends on <code>buf1</code>’s lifetime. For example, you could change the signature of first to the following:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">first</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">, </span><span style="color:#fa6e32;">&#39;b</span><span style="color:#61676c;">&gt;(
</span><span style="color:#61676c;">    </span><span style="color:#ff8f40;">buf1</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a mut</span><span style="color:#61676c;"> [</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">],
</span><span style="color:#61676c;">    </span><span style="color:#ff8f40;">buf2</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;b mut</span><span style="color:#61676c;"> [</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">])
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a mut </span><span style="color:#61676c;">[</span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">] {
</span><span style="color:#61676c;">    buf1
</span><span style="color:#61676c;">}
</span></pre>
<p>In this modified function, <code>buf1</code> has a lifetime of <code>'a</code> and <code>buf2</code> has a lifetime of <code>'b</code>. The returned mutable reference has a lifetime of <code>'a</code>, which ensures that it will not outlive <code>buf1</code>. This way, you can pass <code>buf1</code> and <code>buf2</code> with different lifetimes to the first function and obtain a mutable reference to <code>buf1</code> that is valid for the lifetime of <code>buf1</code>.</p>
<p>With this modification, the given Rust code should compile correctly.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comments： ChatGPT’s explanation of the code surprised me. To be honest, this was the second time I asked ChatGPT about this code after a month. The first time, it answered that the code can compile successfully. It seems that after my first explanation to ChatGPT, it has learned how to understand the code better. Now I can understand this code more comprehensively.</p>
</blockquote>
<p><strong>Me: why?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>The original code did not compile because the function first had a single lifetime parameter, <code>'a</code>, which was used to specify the lifetime of both mutable references <code>buf1</code> and <code>buf2</code>. This means that the returned mutable reference would depend on the lifetime of both <code>buf1</code> and <code>buf2</code>.</p>
<p>However, in the main function, <code>buf1</code> and <code>buf2</code> were created with distinct mutable references, meaning they have different lifetimes. When these distinct mutable references were passed to the first function, the compiler detected that the mutable reference returned by first would depend on the lifetime of both <code>buf1</code> and <code>buf2</code>. This creates a lifetime mismatch, as the returned mutable reference would not be valid for the lifetime of <code>buf2</code>.</p>
<p>To fix this issue, we modified the first function to take two lifetime parameters, <code>'a</code> and <code>'b</code>, and specify that <code>buf1</code> has a lifetime of <code>'a</code> and <code>buf2</code> has a lifetime of <code>'b</code>. This allows the returned mutable reference to only depend on the lifetime of <code>buf1</code>, which ensures that it will be valid for the lifetime of <code>buf1</code>. This modification resolves the lifetime mismatch and allows the code to compile successfully.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: The code was interpreted correctly, so I switched to the <a href="https://dtolnay.github.io/rust-quiz/11">Rust Quiz 11</a> question to continue asking it.</p>
</blockquote>
<p><strong>Me: Will this Rust code compile correctly?</strong></p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">f</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;() {}
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">g</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;() {}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> pf </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">f</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> pg </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">g</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">print!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">(pf </span><span style="color:#ed9366;">==</span><span style="color:#61676c;"> pg) </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>The Rust code will not compile correctly.</p>
<p>The reason is that <code>f</code> and <code>g</code> are functions with generic lifetime parameters <code>'a</code>, but they are defined with empty bodies, so they don’t actually do anything. Furthermore, <code>f</code> has no bounds on <code>'a</code>, while <code>g</code> has a constraint that <code>'a</code> must outlive itself (<code>'a: 'a</code>). This constraint means that <code>'a</code> must live for at least as long as the current scope.</p>
<p>In the main function, <code>pf</code> and <code>pg</code> are both defined as function pointers to <code>f</code> and <code>g</code>, respectively, with the lifetime parameter <code>'static</code>. However, since <code>f</code> and <code>g</code> are generic over lifetime parameters, it is not possible to cast them to a function pointer with a specific lifetime, like <code>'static</code>.</p>
<p>If you want to define function pointers with specific lifetime parameters, you need to define the functions with those lifetimes explicitly, like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">f_static</span><span style="color:#61676c;">() {}
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">g_static</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt;() {}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> pf </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> f_static </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> pg </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">g_static</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">print!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">(pf </span><span style="color:#ed9366;">==</span><span style="color:#61676c;"> pg) </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>In this modified code, <code>f_static</code> is a function with no lifetime parameters, so it can be cast to a function pointer with the <code>'static</code> lifetime. <code>g_static</code> is a generic function with the constraint that <code>'a</code> must outlive <code>'static</code>, so it can also be cast to a function pointer with the <code>'static</code> lifetime by specifying the lifetime parameter explicitly when calling it with <code>g_static::&lt;'static&gt;</code>.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: ChatGPT’s explanation of this code is not entirely accurate. In fact, only the line in the main function with the variable <code>pf</code> cannot be compiled, while the variable <code>gf</code> can be compiled. Therefore, I continued to ask for clarification.</p>
</blockquote>
<p><strong>Me: Does the above code have an early bound？</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Yes, the above code has early bound lifetime parameters.</p>
<p>In Rust, there are two ways to define lifetime parameters for a function: <strong>early bound</strong> and <strong>late bound</strong>. Early bound lifetime parameters are explicitly defined at the function signature level and have a name that starts with an apostrophe (’), like <code>&lt;'a&gt;</code>. Late bound lifetime parameters are defined implicitly by the function body and do not have a name.</p>
<p>In the code you provided, both <code>f</code> and <code>g</code> have early bound lifetime parameters: <code>&lt;'a&gt;</code> and <code>&lt;'a: 'a&gt;</code>, respectively. This means that the lifetime of any references used in the function must be explicitly specified when the function is called, using syntax like <code>f::&lt;'a&gt;(...)</code>.</p>
<p>By contrast, late bound lifetime parameters are inferred by the Rust compiler from the context in which the function is called. Late bound lifetime parameters are used in situations where the function needs to reference a lifetime that is not explicitly defined in its signature, such as when a closure is used.</p>
<p>Since <code>f</code> and <code>g</code> both have explicit lifetime parameters, they do not rely on late bound lifetimes, and their lifetimes must be specified at the call site.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: In fact, only <code>g</code> is bound early, and <strong>here chatgpt is wrong</strong>.</p>
</blockquote>
<p><strong>Me: Which line is the early boundary ?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>In the Rust code you provided, the early bound lifetime parameters are defined in the function signatures of <code>f</code> and <code>g</code>. Therefore, the early boundary is the line where <code>f</code> and <code>g</code> are defined:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">f</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;() {}
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">g</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;() {}
</span></pre>
<p>In both functions, the lifetime parameter is explicitly defined within the function signature, before the function body. This means that the lifetime must be explicitly specified when calling the function, as in <code>f::&lt;'a&gt;() or g::&lt;'a&gt;()</code>, where <code>'a</code> is the lifetime parameter.</p>
<p>The use of early bound lifetime parameters allows Rust to enforce lifetime safety by ensuring that all references used in a function have a valid lifetime. By contrast, late bound lifetimes are inferred by the Rust compiler and are less explicit, which can make it harder to reason about the lifetime safety of a program.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: <strong>This answer is not quite correct.</strong></p>
</blockquote>
<p><strong>Me: This code does not compile because of a lifetime specification error, where <code>pf</code> does not compile and <code>pg</code> does, tell me why?</strong></p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">f</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;() {}
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">g</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;() {}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> pf </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">f</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> pg </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">g</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">print!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">(pf </span><span style="color:#ed9366;">==</span><span style="color:#61676c;"> pg) </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>The code you provided will not compile because the function pointers <code>pf</code> and <code>pg</code> have different types due to the difference in lifetime constraints of the functions <code>f</code> and <code>g</code>.</p>
<p>The function <code>f</code> has a generic lifetime parameter <code>'a</code>, which is not constrained to any specific lifetime. When you specify <code>f::&lt;'static&gt;</code> for <code>pf</code>, you are telling Rust that the function <code>f</code> will only be called with references that have a <code>'static</code> lifetime. However, since <code>'a</code> is not constrained, Rust cannot guarantee that all possible references passed to <code>f</code> will have a <code>'static</code> lifetime.</p>
<p>The function <code>g</code>, on the other hand, has a generic lifetime parameter <code>'a</code> that is constrained by the bound <code>'a: 'a</code>. This bound specifies that the lifetime parameter <code>'a</code> must be at least as long as itself, which is always true. Therefore, when you specify <code>g::&lt;'static&gt;</code> for <code>pg</code>, you are telling Rust that the function <code>g</code> will only be called with references that have a <code>'static</code> lifetime, and Rust can guarantee that all references passed to <code>g</code> will have a <code>'static</code> lifetime.</p>
<p>Since the lifetime constraint on <code>pf</code> and <code>pg</code> are different, their types are different. <code>pf</code> has the type <code>fn()</code>, while <code>pg</code> has the type <code>fn(&amp;'static ())</code>. This is the reason why you get a compilation error when you try to compare them using the <strong>==</strong> operator.</p>
<p>To fix the error, you can add the <code>'a: 'static</code> bound to the lifetime parameter of the <code>f</code> function, which will constrain <code>'a</code> to be at least as long as <code>'static</code>. Here is the modified code:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">f</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt;() {}
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">g</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;() {}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> pf </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">f</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> pg </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">g</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">&gt; </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;static </span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">print!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">(pf </span><span style="color:#ed9366;">==</span><span style="color:#61676c;"> pg) </span><span style="color:#ed9366;">as </span><span style="color:#fa6e32;">u8</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>In this modified version of the code, both <code>pf</code> and <code>pg</code> have the same type <code>fn(&amp;'static ())</code>, which can be compared for equality. Therefore, the code will compile correctly and will print <code>1</code> to indicate that the function pointers are equal.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: This explanation seems to make sense. But I need a little more guidance.</p>
</blockquote>
<p><strong>Me: <code>pf</code> is compiled incorrectly because of lifetime early bound.</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>You are correct. I apologize for my previous responses. The reason <code>pf</code> does not compile is that <code>f::&lt;'static&gt;</code> attempts to bind the lifetime parameter of the function <code>f</code> to the <code>'static</code> lifetime, but the lifetime parameter <code>'a</code> is not constrained and therefore cannot be guaranteed to live as long as <code>'static</code>. This causes a lifetime mismatch error.</p>
<p>On the other hand, <code>g::&lt;'static&gt;</code> compiles because the lifetime parameter of <code>g</code> is constrained by the bound <code>'a: 'a</code> which implies that <code>'a</code> must be at least as long as itself. Therefore, the <code>'static</code> lifetime is a valid lifetime for <code>g</code>.</p>
<p>So the reason why <code>pf</code> does not compile while <code>pg</code> does is due to the difference in the way that the lifetime parameters of <code>f</code> and <code>g</code> are constrained.</p>
<p>Thank you for bringing this to my attention.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: I had to be more explicit.</p>
</blockquote>
<p><strong>Me: <code>f/pf</code> is early bound, <code>g/pg</code> is late bound.</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>You are correct again. I apologize for my mistake. The difference in behavior between <code>pf</code> and <code>pg</code> is due to the fact that the lifetime parameter in <code>f</code> is early bound, while the lifetime parameter in <code>g</code> is late bound.</p>
<p>When you write <code>f::&lt;'static&gt;</code>, you are attempting to bind the lifetime parameter <code>'a</code> of the function <code>f</code> to the <code>'static</code> lifetime, which is an early bound lifetime annotation. However, since the lifetime parameter <code>'a</code> in <code>f</code> is not constrained, Rust cannot guarantee that all possible references passed to <code>f</code> will have a <code>'static</code> lifetime. This causes a lifetime mismatch error when you try to assign <code>f::&lt;'static&gt;</code> to <code>pf</code>.</p>
<p>On the other hand, when you write <code>g::&lt;'static&gt;</code>, you are specifying a lifetime bound on the lifetime parameter <code>'a</code> of the function <code>g</code>. This bound requires that any reference with the lifetime <code>'a</code> must outlive itself, which is a late bound lifetime annotation. Since <code>'static</code> outlives any lifetime, any reference with a lifetime of <code>'static</code> will satisfy the constraint of <code>'a: 'static</code>. Therefore, the code compiles without error when you assign <code>g::&lt;'static&gt;</code> to <code>pg</code>.</p>
<p>Thank you for correcting me on this.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: This explanation doesn’t satisfy me because it doesn’t say how early bound and late bound relate to lifetime generic params monomorphism.</p>
</blockquote>
<p><strong>Me: explain early bound and late bound.</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>In Rust, lifetime annotations can be either early bound or late bound, depending on where they appear in the syntax of a function or method declaration.</p>
<p>A lifetime parameter is said to be early bound if it appears within the angle brackets <code>&lt;...&gt;</code> that define the parameter list of a function or method. For example, in the function declaration <code>fn foo&lt;'a&gt;(x: &amp;'a u32) -&gt; &amp;'a u32</code>, the lifetime parameter <code>'a</code> is early bound because it appears in the parameter list.</p>
<p>An early bound lifetime parameter can be used to specify a lifetime that applies to one or more references within the function or method. However, early bound lifetimes have to be specified at the point of declaration, which means that they cannot depend on the context of the function or method call.</p>
<p>A lifetime parameter is said to be late bound if it appears within the body of a function or method, typically as a part of a lifetime bound or constraint. For example, in the function declaration <code>fn bar(x: &amp;u32) -&gt; impl Fn(&amp;'a u32) -&gt; &amp;'a u32</code>, the lifetime parameter <code>'a</code> is late bound because it appears within the return type of the function.</p>
<p>Late bound lifetimes can depend on the context of the function or method call, because they are not specified at the point of declaration. Instead, they are inferred by the Rust compiler based on the relationships between references and their lifetimes within the function or method.</p>
<p>In summary, early bound lifetimes are specified at the point of declaration and cannot depend on the context of the function or method call, while late bound lifetimes are specified within the body of a function or method and can depend on the context of the function or method call.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: This explanation is fairly correct, I’ll let it give more code.</p>
</blockquote>
<p><strong>Me: more example</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Here are some more examples of early bound and late bound lifetimes in Rust:
Early bound lifetime example:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Foo</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    x</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a u32</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; </span><span style="color:#399ee6;">Foo</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">get_x</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a u32 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">x
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>In this example, the lifetime parameter <code>'a</code> is early bound because it appears within the angle brackets that define the <code>Foo</code> struct and the implementation of its methods. The lifetime parameter <code>'a</code> is used to specify that the reference <code>x</code> stored within <code>Foo</code> has a lifetime that is tied to the lifetime of the <code>Foo</code> instance.</p>
<p>Late bound lifetime example:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">bar</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">, </span><span style="color:#fa6e32;">&#39;b</span><span style="color:#61676c;">&gt;(</span><span style="color:#ff8f40;">x</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a u32</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">y</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;b u32</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a u32 where &#39;a</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">&#39;b </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">if </span><span style="color:#ed9366;">*</span><span style="color:#61676c;">x </span><span style="color:#ed9366;">&lt; *</span><span style="color:#61676c;">y {
</span><span style="color:#61676c;">        y
</span><span style="color:#61676c;">    } </span><span style="color:#fa6e32;">else </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        x
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>In this example, the lifetime parameters <code>'a</code> and <code>'b</code> are early bound because they appear within the angle brackets that define the parameter list of the bar function. However, the lifetime parameter <code>'a</code> is also used as a late bound lifetime parameter within the function body. The lifetime parameter <code>'a</code> is constrained by the where clause to outlive the lifetime parameter <code>'b</code>, which means that Rust can infer that the lifetime of the returned reference is tied to the lifetime of the input reference <code>x</code>.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: The late bound example has some errors, <code>'a: 'b</code> is early bound, <strong>which is incorrectly interpreted</strong>.</p>
</blockquote>
<p><strong>Me: more example</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Sure! Here are some more examples:</p>
<p>Another example of late bound lifetime is when it is used in a closure. Here’s an example:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">find_index</span><span style="color:#61676c;">&lt;F&gt;(</span><span style="color:#ff8f40;">v</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">[</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">], </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">usize</span><span style="color:#61676c;">&gt;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">where</span><span style="color:#61676c;"> F</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Fn(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">) -&gt; </span><span style="color:#fa6e32;">bool
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">for </span><span style="color:#61676c;">(i</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> item) </span><span style="color:#ed9366;">in</span><span style="color:#61676c;"> v</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">iter</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">enumerate</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if </span><span style="color:#f07171;">f</span><span style="color:#61676c;">(item) {
</span><span style="color:#61676c;">            </span><span style="color:#fa6e32;">return </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(i)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">None
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> v </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[</span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">2</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">3</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">4</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> idx </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">find_index</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">v</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">|</span><span style="color:#ff8f40;">x</span><span style="color:#61676c;">| </span><span style="color:#ed9366;">*</span><span style="color:#61676c;">x </span><span style="color:#ed9366;">== </span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{:?}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> idx)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>In this example, the closure passed to <code>find_index</code> takes a reference to an <code>i32</code> value and returns a <code>boolean</code>. The lifetime of the reference is not specified explicitly, so Rust infers a late bound lifetime. The closure can be used with references that have any lifetime, as long as they satisfy the lifetime constraints imposed by the closure body.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>Me: is <code>'a: 'b</code> early bound or late bound?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>In the context of a function signature like <code>fn bar&lt;'a, 'b&gt;(x: &amp;'a u32, y: &amp;'b u32) -&gt; &amp;'a u32 where 'a: 'b</code>, the <code>'a: 'b</code> syntax is considered early bound because it appears within the angle brackets that define the function’s lifetime parameters. It is used to specify a constraint on the relationship between two lifetime parameters.</p>
<p>In general, the distinction between early and late bound lifetimes is based on where the lifetime parameter is defined and how it is used. If a lifetime parameter is defined within a type or function signature and is used to constrain the lifetime of a reference or other value within that signature, it is typically considered early bound. If a lifetime parameter is inferred by the Rust compiler based on the context in which it is used, or is specified in a closure or other value that is not part of a type or function signature, it is typically considered late bound.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: <strong>This explanation is quite correct.</strong> 👍</p>
</blockquote>
<p><strong>Me: is <code>for&lt;'a&gt;</code> a early bound?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Yes, <code>for&lt;'a&gt;</code> is an early bound lifetime syntax in Rust. It’s used to define a generic lifetime parameter <code>'a</code> within the bounds of a trait or function signature, and is typically used to specify constraints on the lifetime of references within the associated types or methods of that trait.</p>
<p>For example, here’s a trait that uses the <code>for&lt;'a&gt;</code> syntax to define a generic lifetime parameter:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">trait </span><span style="color:#399ee6;">Foo </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">type </span><span style="color:#399ee6;">Bar</span><span style="color:#ed9366;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#ed9366;">&gt;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">baz</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">x</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Bar&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>In this example, the <code>for&lt;'a&gt;</code> syntax is used to define a generic lifetime parameter <code>'a</code> within the bounds of the trait. The associated type <code>Bar</code> and method <code>baz</code> both use this lifetime parameter to specify the lifetime of the references they return.</p>
<p>The <code>for&lt;'a&gt;</code> syntax is also used in function signatures to define generic lifetime parameters. Here’s an example:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">foo</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">, T</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt;(</span><span style="color:#ff8f40;">x</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;"> T) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;"> T </span><span style="color:#fa6e32;">where</span><span style="color:#61676c;"> T</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Clone {
</span><span style="color:#61676c;">    x</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">clone</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">}
</span></pre>
<p>In this example, the <code>for&lt;'a&gt;</code> syntax is used to define a generic lifetime parameter <code>'a</code> within the bounds of the function signature. The lifetime parameter is used to specify the lifetime of the reference <code>x</code> and the reference returned by the function, which must both outlive the lifetime of the input <code>x</code> value.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: <strong>What a load of nonsense!</strong></p>
</blockquote>
<p><strong>Me: no, <code>for&lt;'a&gt;</code> is late bound</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>I apologize for the confusion in my previous response. You are correct that <code>for&lt;'a&gt;</code> is considered a late bound lifetime syntax in Rust.</p>
<p>The <code>for&lt;'a&gt;</code> syntax is used to specify an anonymous lifetime parameter within the bounds of a type or function signature. It is typically used to specify lifetime constraints on closures, which can capture references with different lifetimes depending on the context in which they are used. Here is an example of a closure that uses a <code>for&lt;'a&gt;</code> syntax to capture a reference with an anonymous lifetime:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> v </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">vec!</span><span style="color:#61676c;">[</span><span style="color:#ff8f40;">1</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">2</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">3</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">let </span><span style="color:#f29718;">f </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">|</span><span style="color:#ff8f40;">x</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">| </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">i32 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> r </span><span style="color:#ed9366;">= &amp;</span><span style="color:#61676c;">v[</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// capture a reference to the first element of v
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">if </span><span style="color:#ed9366;">*</span><span style="color:#61676c;">x </span><span style="color:#ed9366;">&gt; </span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        r
</span><span style="color:#61676c;">    } </span><span style="color:#fa6e32;">else </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        x
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}</span><span style="color:#61676ccc;">;
</span></pre>
<p>In this example, the closure captures a reference to the first element of the vector <code>v</code> using the <code>for&lt;'a&gt;</code> syntax. The anonymous lifetime parameter <code>'a</code> is inferred by the compiler based on the context in which the closure is used, and is used to specify the lifetime of the captured reference.</p>
<p>So to summarize, <code>for&lt;'a&gt;</code> is a late bound lifetime syntax because it is used to specify anonymous lifetime parameters that are inferred by the compiler based on the context in which they are used.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>Me: Can you explain the syntax <code>for&lt;'a&gt;</code>?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Yes, the syntax <code>for&lt;'a&gt;</code> is used to define a generic lifetime parameter in Rust.</p>
<p>In Rust, lifetimes are used to describe the scope of references, which are pointers to data in memory. Lifetime parameters are used to specify the lifetimes of references that are passed as arguments to a function, returned from a function, or stored in a data structure.</p>
<p>The syntax <code>for&lt;'a&gt;</code> is used to define a generic lifetime parameter <code>'a</code> that can be used in a function signature. This syntax is typically used when defining functions that take one or more references as arguments or return a reference. The <code>for</code> keyword is followed by the name of the lifetime parameter, in this case <code>'a</code>, which is then used to annotate the reference(s) in the function signature.</p>
<p>For example, consider the following function that takes a reference to a string slice and a reference to a generic type <code>T</code> that implements the <code>Display</code> trait:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">print_with_label</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">, T&gt;(</span><span style="color:#ff8f40;">label</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">value</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;"> T)
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">where</span><span style="color:#61676c;"> T</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">fmt</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Display
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">: </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> label</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> value)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>In this function, the lifetime parameter <code>'a</code> is used to annotate the string slice label and the generic type <code>T</code>. This specifies that the lifetime of the references passed as arguments to the function must be at least as long as the lifetime <code>'a</code>. The where clause specifies that the generic type <code>T</code> must implement the <code>Display</code> trait.</p>
<p>When calling this function, the lifetime of the references passed as arguments must be explicitly specified, like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> label </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot;My Label&quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> value </span><span style="color:#ed9366;">= </span><span style="color:#ff8f40;">42</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">print_with_label</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;static</span><span style="color:#61676c;">, </span><span style="color:#fa6e32;">i32</span><span style="color:#61676c;">&gt;(label</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">value)</span><span style="color:#61676ccc;">;
</span></pre>
<p>In this example, the lifetime of the string slice label is <code>'static</code>, meaning that it will live for the entire duration of the program. The lifetime of the reference to the integer value is not explicitly specified, so it is inferred by the Rust compiler to be the same as the lifetime of label.</p>
<p>By using the <code>for&lt;'a&gt;</code> syntax to define the lifetime parameter, Rust allows you to write generic functions that can accept references with different lifetimes, while still enforcing lifetime safety at compile time.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: Not the explanation I was looking for.</p>
</blockquote>
<p><strong>Me:</strong> give me more code for use the <code>for&lt;'a&gt;</code> lifetime bound ?</p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Sure! Here’s an example that uses the <code>for&lt;'a&gt;</code> lifetime bound with a closure:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">apply_to_string</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">, F&gt;(</span><span style="color:#ff8f40;">s</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;a str
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    F</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">for</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;b</span><span style="color:#61676c;">&gt; FnOnce(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;b str</span><span style="color:#61676c;">) -&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;b str</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">f</span><span style="color:#61676c;">(s)
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> s </span><span style="color:#ed9366;">= </span><span style="color:#86b300;">&quot; hello &quot;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> result </span><span style="color:#ed9366;">= </span><span style="color:#f07171;">apply_to_string</span><span style="color:#61676c;">(s</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">|</span><span style="color:#ff8f40;">s</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">| </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str </span><span style="color:#61676c;">{ s</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">trim</span><span style="color:#61676c;">() })</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Result: &#39;</span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">&#39;&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> result)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>In this example, the <code>apply_to_string</code> function takes a string slice s and a closure <code>f</code> that takes a string slice as input and returns a string slice. The closure <code>f</code> is specified using the <code>for&lt;'b&gt;</code> syntax to indicate that it can capture any lifetime <code>'b</code>.</p>
<p>The <code>apply_to_string</code> function also specifies its own lifetime parameter <code>'a</code>, which is used to ensure that the returned reference is valid for at least as long as the input string slice <code>s</code>. The <code>F</code> type parameter is specified as a closure that takes a reference with lifetime <code>'b</code> and returns a reference with the same lifetime <code>'b</code>.</p>
<p>In the main function, we call <code>apply_to_string</code> with a closure that trims the input string slice <code>s</code> and returns a reference to the trimmed slice. The <code>apply_to_string</code> function returns a reference with the same lifetime as the input string slice, so the result variable is valid for the lifetime of <code>s</code>.</p>
<p>When we print the result variable, it contains the trimmed string slice without any leading or trailing spaces.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comment: I had a lot of trouble guiding chatgpt to write the correct example above, and I don’t expect it to give any more examples.</p>
</blockquote>
<p><strong>Me: Can you explain what is HRTB ？</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/chatgpt.svg"/>
            <div class="text-lg font-bold">ChatGPT</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Sure! HRTB stands for Higher-Rank Trait Bounds, and it is a feature of some programming languages (including Rust and Haskell) that allows for more flexible and expressive type constraints on functions and data structures.</p>
<p>To understand HRTB, it’s helpful to first understand the concept of type constraints or trait bounds. In many programming languages, it’s common to define functions or data structures that operate on values of a certain type, or on values that satisfy certain criteria (e.g. implementing a particular interface or trait). Type constraints or trait bounds allow you to specify these requirements in a formal way, so that the compiler can verify that the code is correct and safe to run.</p>
<p>However, in some cases, you may want to express more complex or nuanced type constraints. For example, you may want to say that a function operates on values of any type that satisfies a certain trait, but that the function itself doesn’t care about the specific lifetime or type parameter of the trait. This is where HRTB comes in.</p>
<p>HRTB allows you to define a type constraint that applies to all possible instantiations of a given type parameter, regardless of the specific value of the parameter. In other words, HRTB allows you to specify type constraints at a higher level of abstraction than traditional trait bounds. This can be useful in situations where you want to write more generic or reusable code, or where the specific type parameters of a function or data structure are not important to the implementation.</p>
<p>Here’s an example of how HRTB might be used in Rust:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">my_func</span><span style="color:#61676c;">&lt;T&gt;(</span><span style="color:#ff8f40;">x</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> T)
</span><span style="color:#fa6e32;">where for</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; T</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">MyTrait&lt;</span><span style="color:#fa6e32;">&#39;a</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// implementation goes here
</span><span style="color:#61676c;">}
</span></pre>
<p>In this example, <code>my_func</code> is a function that takes a single parameter <code>x</code> of some type <code>T</code>. However, instead of specifying a concrete type for <code>T</code>, we use the <code>for&lt;'a&gt;</code> syntax to specify that <code>T</code> must implement the <code>MyTrait</code> trait for all possible lifetimes <code>'a</code>. This means that <code>my_func</code> can be called with any value of type <code>T</code> that satisfies this constraint, regardless of the specific lifetime of the trait.</p>
<p>Overall, HRTB is a powerful and flexible feature of some programming languages that allows for more expressive and abstract type constraints. However, it can also be somewhat tricky to understand and use correctly, so it’s important to use it judiciously and with care.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<blockquote>
<p>Comments: The conceptual explanation is basically correct, but it is not possible to get it to give more examples at this time.</p>
</blockquote>
<h1 id="summary" class="toc-item group scroll-mt-20">
    Summary
    <a href="#summary" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Currently ChatGPT is not a professional Rust teacher to guide you to learn Rust, even it will make up some nonsense to confuse you, and the generated code may not compile through, you need to compile it yourself to verify.</p>
<p>ChatGPT currently does not really understand some complex concepts, such as lifetime parameter monomorphism.</p>
<p>However, the process of talking to ChatGPT is also the process of thinking in your brain, and the process of learning is the process of thinking. Therefore, ChatGPT is very good as a learning partner for now.</p>
2024-03-11T22:51:08.371186458+08:00 - 文章标题：How I Designed the API for Backon, a User-Friendly Retry Crate
2024-03-11T22:51:08.417829308+08:00 - 文章内容：<p><a href="https://github.com/Xuanwo/backon">backon</a> is a Rust error retry library, and this article aims to share some techniques I used in implementing it.</p>
<h2 id="origin" class="toc-item group scroll-mt-20">
    Origin
    <a href="#origin" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>When implementing the RetryLayer for <a href="https://github.com/datafuselabs/opendal">OpenDAL</a>, I needed to provide a backoff mechanism to implement features such as exponential backoff and jitter.</p>
<blockquote>
<p>Backoff is a technique used in computer science and networking to handle errors or congestion in a more efficient way. The basic idea is to progressively increase the time between retries when encountering an error or congestion, so that the system has time to recover and handle the issue without overwhelming it with requests.</p>
</blockquote>
<p>Although I found <a href="https://github.com/ihrwein/backoff"><code>backoff</code></a> through a simple search, I wasn’t quite satisfied. First, I noticed that the maintenance status of the library didn’t seem to be good, with 4 unmerged PRs, and the main branch was last updated in 2021. Secondly, I didn’t like the API it provided:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">fetch_url</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">url</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">, reqwest</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Error&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">retry</span><span style="color:#61676c;">(ExponentialBackoff</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">default()</span><span style="color:#61676ccc;">, </span><span style="color:#61676c;">|| async { </span><span style="color:#f07171;">fetch</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await })</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await
</span><span style="color:#61676c;">}
</span></pre>
<p>Backoff implementation isn’t complicated, so why not make one that feels comfortable to use?</p>
<h2 id="design" class="toc-item group scroll-mt-20">
    Design
    <a href="#design" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>My first idea was to use an <code>Iterator&lt;Item = Duration&gt;</code> to represent the backoff. Any iterator that can return a <code>Duration</code> type can be used as backoff. Using an iterator to represent backoff has a very direct and clear meaning, and users can easily understand and implement it without reading every function’s comments. Secondly, I wanted to provide a usage experience for backoff similar to Rust’s native functions:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">fetch_url</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">url</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">, reqwest</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Error&gt; {
</span><span style="color:#61676c;">  	fetch</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">retry</span><span style="color:#61676c;">(ExponentialBackoff</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">default())</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await
</span><span style="color:#61676c;">}
</span></pre>
<p>It looks great: simple and direct, doesn’t disrupt the user’s reading order, and allows the user to locate the business logic position at a glance. Let’s get started implementing it!</p>
<h2 id="implementation" class="toc-item group scroll-mt-20">
    Implementation
    <a href="#implementation" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>First of all, what we need to understand is that async functions in Rust are essentially generators. These generators capture variables from the current environment and generate an anonymous Future. To retry an async function, we need to call the generator again to generate a brand new Future to execute.</p>
<p>I once went down the wrong path with a failed demo for retry: <a href="https://github.com/Xuanwo/backon/pull/1">we can’t retry a future directly</a>. At that time, I naively tried to retry a TryFuture directly:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub trait </span><span style="color:#399ee6;">Retryable</span><span style="color:#61676c;">&lt;B: Policy, F: Fn(&amp;Self::Error) -&gt; bool&gt;: TryFuture + Sized {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">retry</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">backoff</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> B, </span><span style="color:#ff8f40;">handle</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Retry&lt;</span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">, B, F&gt;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>Now I understand that this approach is incorrect. Once a <code>Future</code> enters the <code>Poll::Ready</code> state, we should not poll it again, as documented:</p>
<blockquote>
<p>Once a future has completed (returned <code>Ready</code> from <code>poll</code>), calling its <code>poll</code> method again may panic, block forever, or cause other kinds of problems</p>
</blockquote>
<p>Next, I needed to adjust my thinking and focus on implementing for <code>|| -&gt; impl Future&lt;Result&lt;T&gt;&gt;</code>. First, I defined a <code>Retryable</code> trait and implemented it for all <code>FnMut() -&gt; Fut</code> types:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub trait </span><span style="color:#399ee6;">Retryable</span><span style="color:#61676c;">&lt;
</span><span style="color:#61676c;">    B: BackoffBuilder,
</span><span style="color:#61676c;">    T,
</span><span style="color:#61676c;">    E,
</span><span style="color:#61676c;">    Fut: Future&lt;Output = Result&lt;T, E&gt;&gt;,
</span><span style="color:#61676c;">    FutureFn: FnMut() -&gt; Fut,
</span><span style="color:#61676c;">&gt;
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Generate a new retry
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">retry</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">builder</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">B) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Retry&lt;</span><span style="color:#fa6e32;">B</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Backoff, T, E, Fut, FutureFn&gt;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;B, T, E, Fut, FutureFn&gt; Retryable&lt;B, T, E, Fut, FutureFn&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">FutureFn
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    B</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> BackoffBuilder,
</span><span style="color:#61676c;">    Fut</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Future&lt;Output = </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, E&gt;&gt;,
</span><span style="color:#61676c;">    FutureFn</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FnMut() -&gt; Fut,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">retry</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">builder</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">B) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Retry&lt;</span><span style="color:#fa6e32;">B</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Backoff, T, E, Fut, FutureFn&gt; {
</span><span style="color:#61676c;">        Retry</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> builder</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">build</span><span style="color:#61676c;">())
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>This trait involves the following type parameters:</p>
<ul>
<li><code>B: BackoffBuilder</code>: the backoff builder passed in by the user, which specifies different backoff parameters</li>
<li><code>FutureFn: FnMut() -&gt; Fut</code>: indicates that its type is a function that returns a <code>Fut</code></li>
<li><code>Fut: Future&lt;Output = Result&lt;T, E&gt;&gt;</code>: represents a Future that returns a <code>Result&lt;T, E&gt;</code></li>
</ul>
<p>The returned Retry struct wraps all of the above types:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub struct </span><span style="color:#399ee6;">Retry</span><span style="color:#61676c;">&lt;B</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Backoff, T, E, Fut</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Future&lt;Output = </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, E&gt;&gt;, FutureFn</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">FnMut</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> Fut&gt; {
</span><span style="color:#61676c;">    backoff</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> B,
</span><span style="color:#61676c;">    retryable</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">E) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">bool</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">    notify</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">fn</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">E, Duration),
</span><span style="color:#61676c;">    future_fn</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FutureFn,
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">pin</span><span style="color:#61676c;">]
</span><span style="color:#61676c;">    state</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">State&lt;T, E, Fut&gt;,
</span><span style="color:#61676c;">}
</span></pre>
<p>Apart from <code>backoff</code> and <code>future_fn</code>, we introduced <code>retryable</code> and <code>notify</code> to implement retryable error checking and notification functions. Once the type system is clear, the next step is to implement the correct <code>Future</code> trait for <code>Retry</code>, and the details will not be elaborated:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;B, T, E, Fut, FutureFn&gt; Future </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">Retry</span><span style="color:#61676c;">&lt;B, T, E, Fut, FutureFn&gt;
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    B</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Backoff,
</span><span style="color:#61676c;">    Fut</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Future&lt;Output = </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, E&gt;&gt;,
</span><span style="color:#61676c;">    FutureFn</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FnMut() -&gt; Fut,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">type </span><span style="color:#399ee6;">Output </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, E&gt;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">poll</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">: Pin&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut Self</span><span style="color:#61676c;">&gt;, </span><span style="color:#ff8f40;">cx</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">Context&lt;&#39;</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Poll&lt;</span><span style="color:#fa6e32;">Self</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Output&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>In addition, there are some transactional tasks that need to be completed: we need to let users define which errors can be retried, and provide custom notification for retrying.</p>
<p>Finally, the combined effect is as follows:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">tokio</span><span style="color:#61676c;">::</span><span style="color:#f29718;">main</span><span style="color:#61676c;">]
</span><span style="color:#61676c;">async </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;()&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> content </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> fetch
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">retry</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">ExponentialBuilder</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">default())
</span><span style="color:#61676c;">  		</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">when</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">e</span><span style="color:#61676c;">| e</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_string</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">== </span><span style="color:#86b300;">&quot;EOF&quot;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">notify</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">err</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">dur</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;retrying error </span><span style="color:#ff8f40;">{:?}</span><span style="color:#86b300;"> with sleeping </span><span style="color:#ff8f40;">{:?}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> err</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> dur)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#61676c;">await</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(())
</span><span style="color:#61676c;">}
</span></pre>
<p>Looks perfect!</p>
<h2 id="one-more-thing" class="toc-item group scroll-mt-20">
    One More Thing
    <a href="#one-more-thing" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Oh, wait a minute, backon doesn’t support synchronous functions yet! No problem, we just need to apply the same approach:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">pub trait </span><span style="color:#399ee6;">BlockingRetryable</span><span style="color:#61676c;">&lt;B: BackoffBuilder, T, E, F: FnMut() -&gt; Result&lt;T, E&gt;&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// Generate a new retry
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">retry</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">builder</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">B) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">BlockingRetry&lt;</span><span style="color:#fa6e32;">B</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Backoff, T, E, F&gt;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;B, T, E, F&gt; BlockingRetryable&lt;B, T, E, F&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">F
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    B</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> BackoffBuilder,
</span><span style="color:#61676c;">    F</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FnMut() -&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, E&gt;,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">retry</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">builder</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">B) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">BlockingRetry&lt;</span><span style="color:#fa6e32;">B</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">Backoff, T, E, F&gt; {
</span><span style="color:#61676c;">        BlockingRetry</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new(</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> builder</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">build</span><span style="color:#61676c;">())
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>Due to the unavailability of the <a href="https://github.com/rust-lang/rust/issues/29625"><code>fn_traits</code></a> feature, which is still unstable, I chose to add a new function to <code>BlockingRetry</code> instead:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;B, T, E, F&gt; </span><span style="color:#399ee6;">BlockingRetry</span><span style="color:#61676c;">&lt;B, T, E, F&gt;
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    B</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Backoff,
</span><span style="color:#61676c;">    F</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> FnMut() -&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, E&gt;,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">  </span><span style="color:#fa6e32;">pub fn </span><span style="color:#f29718;">call</span><span style="color:#61676c;">(</span><span style="color:#fa6e32;">mut </span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, E&gt; {
</span><span style="color:#61676c;">	</span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">  }
</span><span style="color:#61676c;">}
</span></pre>
<p>It feels great to perform retry operations in the call function, and it also has a similar beauty to the Async version.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">main</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;()&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> content </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> fetch
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">retry</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">ExponentialBuilder</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">default())
</span><span style="color:#61676c;">  		</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">when</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">e</span><span style="color:#61676c;">| e</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_string</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">== </span><span style="color:#86b300;">&quot;EOF&quot;</span><span style="color:#61676c;">)
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">notify</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">err</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">dur</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">            </span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;retrying error </span><span style="color:#ff8f40;">{:?}</span><span style="color:#86b300;"> with sleeping </span><span style="color:#ff8f40;">{:?}</span><span style="color:#86b300;">&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> err</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> dur)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        })
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">call</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(())
</span><span style="color:#61676c;">}
</span></pre>
<p>In this article, I have shared the design and implementation of <code>backon</code>. Throughout the process, I have mainly used Rust’s generics mechanisms, namely <code>FnMut() -&gt; Fut</code> and <code>FnMut() -&gt; Result&lt;T, E&gt;</code>, to create custom traits and add new functionality. I hope this implementation can inspire you to design more user-friendly library APIs.</p>
<p>Thank you for reading!</p>
2024-03-11T22:51:08.417975877+08:00 - 文章标题：Using Category Theory to parse command line options
2024-03-11T22:51:08.455981634+08:00 - 文章内容：<h1 id="programming-is-hard,-looking-for-better-abstractions" class="toc-item group scroll-mt-20">
    Programming is hard, looking for better abstractions
    <a href="#programming-is-hard,-looking-for-better-abstractions" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>If you ever wrote a program bigger than a few lines of code you probably know that the bigger
the program gets - the harder it gets to ensure it does exactly what you meant, due to how
different parts can interact. Over time, programmers and computer scientists discovered various
ways to manage this complexity. Programming went from physically wiring the instructions, to
writing them as mnemonics with assembly languages, to abstractions with variables, labels,
functions, and so on.</p>
<p><a href="https://en.wikipedia.org/wiki/Functional_programming">Functional Programming</a>
is one of the paradigms for managing complexity. Its main idea is to abstract code as a set of
functions, and using those functions to pass values around rather than imperatively
to mutate data.</p>
<p>The main goal of this tutorial is to explain the idea of Applicative Functors, what its methods do,
and why you may want to use them. The code shown here is going to be similar but slightly different
from what you would use in a full featured command line argument parsing library - for
production you would want better error messages, help generation, dynamic completion and so
on. The main operations however, stay the same. Applicative Functors are not even limited to arg parsing
and you can try to follow this tutorial to get some ideas for your own problems.</p>
<p>Imagine you want to create an argument parser that parses your arguments into a struct like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Args </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    bin</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> String,
</span><span style="color:#61676c;">    jobs</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">u32</span><span style="color:#61676c;">,
</span><span style="color:#61676c;">}
</span></pre>
<p>If you want to write an argument parser purely imperatively, look at the horrors that entails,
think about how to scale and maintain this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">parse</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> Args {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> bin </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">None</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> jobs </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">None</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> args </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">env</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">args()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">while let </span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(arg)</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(value)) </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">(args</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">next</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> args</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">next</span><span style="color:#61676c;">()){
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if</span><span style="color:#61676c;"> arg </span><span style="color:#ed9366;">== </span><span style="color:#86b300;">&quot;--bin&quot; </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            bin </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(value</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_string</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if</span><span style="color:#61676c;"> arg </span><span style="color:#ed9366;">== </span><span style="color:#86b300;">&quot;--jobs&quot; </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            jobs </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(value</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">parse</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">u32</span><span style="color:#61676c;">&gt;</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    Args {
</span><span style="color:#61676c;">        bin</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> bin</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">expect</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;&#39;--bin&#39; not given&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        jobs</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> jobs</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">expect</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;&#39;--jobs&#39; not given&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>What if you could use functional programming to just describe what you want:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">parse</span><span style="color:#61676c;">() </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> Args {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> bin </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Arg(</span><span style="color:#86b300;">&quot;--bin&quot;</span><span style="color:#61676c;">)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">parse</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">n</span><span style="color:#61676c;">| n</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_string</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> jobs </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Arg(</span><span style="color:#86b300;">&quot;--jobs&quot;</span><span style="color:#61676c;">)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">parse</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">a</span><span style="color:#61676c;">| a</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">parse</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="color:#fa6e32;">u32</span><span style="color:#61676c;">&gt;)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> Args </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> bin
</span><span style="color:#61676c;">      </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">zip</span><span style="color:#61676c;">(jobs)
</span><span style="color:#61676c;">      </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(|(</span><span style="color:#ff8f40;">bin</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">jobs</span><span style="color:#61676c;">)| Args { bin</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> jobs })
</span><span style="color:#61676c;">      </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">      </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">}
</span></pre>
<p>Now lets see how we get there.</p>
<h1 id="parsing-command-line-options" class="toc-item group scroll-mt-20">
    Parsing command line options
    <a href="#parsing-command-line-options" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>If you used <code>cargo</code> you are probably familiar with expressions like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">$ cargo build --bin hello  # build a binary &quot;hello&quot;
</span><span style="color:#61676c;">$ cargo build --jobs 4     # build everything using 4 cpu jobs
</span></pre>
<p>Parsing command line options in general is a wide problem and to make it more manageable this
tutorial is going to look only at option arguments with a long name: <code>--bin hello</code> and
<code>--jobs 4</code> parts. This approach however can parse pretty much anything,
<a href="https://crates.io/crates/bpaf"><code>bpaf</code></a> is a finished library that uses it.</p>
<h2 id="humble-beginning" class="toc-item group scroll-mt-20">
    Humble beginning
    <a href="#humble-beginning" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Let’s start with some magical handwavey way, taking things from <code>std::env::args()</code> and placing
them in a container, that introduces a simple way of taking them out again.</p>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;">// a magical container with a value already inside
</span><span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;static str</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">impl </span><span style="color:#399ee6;">Magic </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// a way to get a value out of the container
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> String {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0.</span><span style="color:#f07171;">into</span><span style="color:#61676c;">()
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">test</span><span style="color:#61676c;">]
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">sample</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// --bin hello
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> bin </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Magic(</span><span style="color:#86b300;">&quot;hello&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> result </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> bin</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">assert_eq!</span><span style="color:#61676c;">(result</span><span style="color:#61676ccc;">, </span><span style="color:#86b300;">&quot;hello&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>At this point the parser can represent single string arguments using <code>Magic</code> and extract them via <code>Magic::run</code>.</p>
<h2 id="adding-more-types" class="toc-item group scroll-mt-20">
    Adding more types
    <a href="#adding-more-types" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Next step would be to allow it to have arguments of different types. Consider <code>--jobs</code> argument.
For some applications passing “4” to the consumer is valid, but in most cases consumer would
prefer to use its numeric value. To be able to pass a number like <code>4u32</code> the parser needs a way
to represent it in the first place. This can be achieved by making <code>Magic</code> a generic datatype:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt;(T)</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> T {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>Generics allow us to represent and extract values of any type, but since our handwavy magic only creates variables of
type <code>Magic&lt;&amp;'static str&gt;</code>, the parser still needs a way to change the type to another such as <code>Magic&lt;u32&gt;</code>.</p>
<p>For that <a href="https://en.wikipedia.org/wiki/Category_theory">Category Theory</a> gives an abstraction called
<a href="https://en.wikipedia.org/wiki/Functor_(functional_programming)"><code>Functor</code></a>.
A functor allows us to change a value inside of a generic context to some other value with the same
or a different type but without changing the context. Sounds scary, but <code>Option::map</code> does more
or less the same thing:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">map</span><span style="color:#61676c;">&lt;R, F</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Fn</span><span style="color:#61676c;">(T) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> R&gt;(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;R&gt; {
</span><span style="color:#61676c;">        Magic(</span><span style="color:#f07171;">f</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">test</span><span style="color:#61676c;">]
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">sample</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">use </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">path</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">PathBuf</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// --jobs 4
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> jobs </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Magic(</span><span style="color:#86b300;">&quot;4&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// Magic&lt;&amp;str&gt;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> jobs </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> jobs</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">s</span><span style="color:#61676c;">| </span><span style="color:#fa6e32;">u32</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_str(s)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">; </span><span style="font-style:italic;color:#abb0b6;">// Magic&lt;u32&gt;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> result </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> jobs</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">assert_eq!</span><span style="color:#61676c;">(result</span><span style="color:#61676ccc;">, </span><span style="color:#ff8f40;">4</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span></pre>
<p>Every valid <code>Functor</code> implementation must satisfy a two laws - preserving identity functions
(Functor mapped with a function that changes nothing stays the same) and preserving composition
of functions (functor transformed with two functions should give the same result as the same
functor transformed with a composition of those two functions). For as long as it only changes
the values in a context without affecting the context itself - implementation should be valid.</p>
<p>At this point the parser can represent arguments of any type and provides a way to map between types.</p>
<h2 id="handling-failures" class="toc-item group scroll-mt-20">
    Handling failures
    <a href="#handling-failures" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Supporting mapping that can’t fail is easy with just the <code>Functor</code> abstraction, but it can’t
handle failures well - consider parsing numeric information:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">$ app --jobs 42
</span><span style="color:#61676c;">$ app --jobs Forty-two
</span></pre>
<p>A parser using <code>map</code>, <code>FromStr::from_str</code> and <code>unwrap</code> can parse the first line but panics
with a bad error message for the second one. To handle parsing failures <code>Magic</code> needs to be
able to represent them. The usual approach for dealing with failing computations in Rust is
with help from the <code>Result</code> type.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt;(</span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;)</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">parse</span><span style="color:#61676c;">&lt;R, F</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Fn</span><span style="color:#61676c;">(T) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;R, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;&gt;(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;R&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(x) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="color:#f07171;">f</span><span style="color:#61676c;">(x))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>The <code>parse</code> method applies a failing computation on a value inside <code>Magic</code> if one exists or keeps
the error message untouched otherwise. The change in the representation of <code>Magic</code> also
requires to change <code>map</code>, but after that, fallible conversions are now possible:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">map</span><span style="color:#61676c;">&lt;R, F</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Fn</span><span style="color:#61676c;">(T) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> R&gt;(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;R&gt; {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">parse</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">x</span><span style="color:#61676c;">| </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="color:#f07171;">f</span><span style="color:#61676c;">(x)))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#61676ccc;">#</span><span style="color:#61676c;">[</span><span style="color:#f29718;">test</span><span style="color:#61676c;">]
</span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">sample</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">use </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">str</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">FromStr</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// --jobs 42
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> jobs </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;42&quot;</span><span style="color:#61676c;">))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> result </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> jobs
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">parse</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">n</span><span style="color:#61676c;">| </span><span style="color:#fa6e32;">u32</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_str(n)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map_err</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">e</span><span style="color:#61676c;">| e</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_string</span><span style="color:#61676c;">()))
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">assert_eq!</span><span style="color:#61676c;">(result</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">42</span><span style="color:#61676c;">))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> jobs </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Forty-two&quot;</span><span style="color:#61676c;">))</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> result </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> jobs
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">parse</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">n</span><span style="color:#61676c;">| </span><span style="color:#fa6e32;">u32</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">from_str(n)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map_err</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">e</span><span style="color:#61676c;">| e</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_string</span><span style="color:#61676c;">()))
</span><span style="color:#61676c;">        </span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">    </span><span style="color:#f07171;">assert_eq!</span><span style="color:#61676c;">(result</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;invalid digit found in string&quot;</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_owned</span><span style="color:#61676c;">()))
</span><span style="color:#61676c;">}
</span></pre>
<p>At this point the parser can represent arguments of any type and failures too.
Alas, <code>parse</code> is an ad-hoc thing and isn’t coming from Category Theory.</p>
<h2 id="composing-failing-computations" class="toc-item group scroll-mt-20">
    Composing failing computations
    <a href="#composing-failing-computations" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p><code>run</code> makes it easy to check if computation is successful and to proceed only when it is, but
it also adds a new corner case: consider an app that takes a name and the answer, checks if the
answer is correct and reports to the user:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> bin </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> bin</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">expect</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;You need to specify --bin&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="font-style:italic;color:#abb0b6;">// println!(&quot;Building binary {bin}!&quot;) // (1)
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> jobs </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> jobs</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">expect</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;You need to specify --jobs&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="font-style:italic;color:#abb0b6;">// println!(&quot;Building binary {bin}!&quot;) // (2)
</span><span style="color:#61676c;">
</span><span style="color:#f07171;">compile</span><span style="color:#61676c;">(bin</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> jobs)</span><span style="color:#61676ccc;">;
</span></pre>
<p>The greeting code can go in one of two position: (1) and (2). In the first position it executes
before all the arguments are validated. In this example a failure to validate the first
argument results in a confusing message to user, but it’s easy imagine a situation where,
instead of writing a message, an app might perform some harder to undo actions. Because of
this, a good argument parser needs to have a way to make sure all the arguments are validated
before proceeding.</p>
<p>An abstraction from the Category Theory called <a href="https://en.wikipedia.org/wiki/Applicative_functor"><code>Applicative Functor</code></a> can help with this
scenario.</p>
<blockquote>
<p>Applicative functors allow us to run functorial computations in a sequence (unlike
plain functors), but don’t allow us to use results from prior computations in the definition of
subsequent ones.</p>
</blockquote>
<p>Sounds scary but <code>Option::zip</code> does something similar for <code>Option</code> and a variant for <code>Magic</code> looks
like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">zip</span><span style="color:#61676c;">&lt;R&gt;(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">other</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Magic&lt;R&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;(T, R)&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match </span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> other</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">            (</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(t)</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(r)) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">((t</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> r)))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            (</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err)) </span><span style="color:#ed9366;">| </span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err)</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">_</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>This helps to combine the two independent computations for <em>bin</em> and <em>jobs</em> into a single
computation for both arguments:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> args </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> bin</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">zip</span><span style="color:#61676c;">(jobs)</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> args </span><span style="color:#ed9366;">= </span><span style="color:#fa6e32;">match</span><span style="color:#61676c;"> args</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">() {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(ok) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> ok</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#f07171;">panic!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;There&#39;s a problem with your arguments: {err}&quot;</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Building binary </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">!&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> args</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">)
</span><span style="color:#f07171;">compile</span><span style="color:#61676c;">(args</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> args</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span></pre>
<p>While <code>zip</code> can combine only two parsers you can chain it multiple times to create things like
<code>Magic&lt;(A, (B, (C, D)))&gt;</code> and flatten it later with <code>map</code> to <code>Magic&lt;(A, B, C, D)&gt;</code> or pack into a
struct like <code>Magic&lt;Struct&gt;</code>. A simple macro can take care of those transformations.</p>
<p>At this point the parser can deal with any number of arguments of any type while making sure they are all
present and valid.</p>
<h2 id="composing-failing-computations-in-a-different-way" class="toc-item group scroll-mt-20">
    Composing failing computations in a different way
    <a href="#composing-failing-computations-in-a-different-way" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>In some cases there can be more than one way to represent some information and for as long as
one of the representations is valid the alternatives may fail. To give an example an app might
expect user to specify either their nick name or a full name:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">app --nick Bob
</span><span style="color:#61676c;">app --fullname &quot;Bob the Magnificent&quot;
</span></pre>
<p>and work with whatever version the user prefers. For this style of composition Category Theory offers an
abstraction called
<a href="https://en.wikibooks.org/wiki/Haskell/Alternative_and_MonadPlus"><code>Alternative Functor</code></a>.</p>
<p>It extends the parser with a single function that takes two values in contexts and picks one
that succeeds:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// if first computation fails - pick the second one
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">alt</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">other</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(t) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(t))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> other</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>And a program that takes either a full or a nick name might look like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> nick </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;No nick name given&quot;</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_string</span><span style="color:#61676c;">()))</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> fullname </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Bob the Magnificent&quot;</span><span style="color:#61676c;">))</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> name </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> nick</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">alt</span><span style="color:#61676c;">(fullname)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#f07171;">println!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Hello </span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;">!&quot;</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> name</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">()</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">unwrap</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">;
</span></pre>
<p>Since <code>zip</code> isn’t constrained by argument types for as long as they are the same - it can pick
between whole different computation trees or different operations with multiple simple parsers
each.</p>
<p>At this point parser can deal with any number of arguments of any types allowing to pick valid
combinations.</p>
<h2 id="failing-intentionally-and-succeeding-unconditionally" class="toc-item group scroll-mt-20">
    Failing intentionally and succeeding unconditionally
    <a href="#failing-intentionally-and-succeeding-unconditionally" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>While an app might require users to specify some arguments, for other arguments there might be
a valid default value. Alternatively, for some cases a parser might provide better error
messages than a generic “argument –foo is missing”. The <code>alt</code> method helps with both cases,
when composed with either an always failing (<code>fail</code>) or always succeeding (<code>pure</code>) parser:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// put a value into a minimal valid context
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">pure</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">val</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> T) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(val))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// produce a failing computation with custom error message
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">fail</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">msg</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        Magic(</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(msg</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_owned</span><span style="color:#61676c;">()))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>Customizing error messages:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> name </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> nick</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">alt</span><span style="color:#61676c;">(fullname)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">alt</span><span style="color:#61676c;">(</span><span style="color:#f07171;">fail</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;You need to pass --nick or --fullname&quot;</span><span style="color:#61676c;">))</span><span style="color:#61676ccc;">;
</span></pre>
<p>Fallback to some default value:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">let</span><span style="color:#61676c;"> name </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> nick</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">alt</span><span style="color:#61676c;">(fullname)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">alt</span><span style="color:#61676c;">(</span><span style="color:#f51818;">pure</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;Anonymous&quot;</span><span style="color:#61676c;">))</span><span style="color:#61676ccc;">;
</span></pre>
<h2 id="defined-operations-summary" class="toc-item group scroll-mt-20">
    Defined operations summary
    <a href="#defined-operations-summary" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Operations defined so far are sufficient to express arbitrary computations on command line
arguments:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt;(</span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;)</span><span style="color:#61676ccc;">;
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;T&gt; </span><span style="color:#399ee6;">Magic</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// a way to run a computation
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// apply a pure transformation to a contained value
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">map</span><span style="color:#61676c;">&lt;R, F</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Fn</span><span style="color:#61676c;">(T) </span><span style="color:#61676ccc;">-&gt;</span><span style="color:#61676c;"> R&gt;(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;R&gt; {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">parse</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">x</span><span style="color:#61676c;">| </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(</span><span style="color:#f07171;">f</span><span style="color:#61676c;">(x)))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// apply a failing transformation to a contained value
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">parse</span><span style="color:#61676c;">&lt;R, F</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">Fn</span><span style="color:#61676c;">(T) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;R, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;&gt;(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;R&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(x) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="color:#f07171;">f</span><span style="color:#61676c;">(x))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// compose two computations into a single one requiring both to succeed
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">zip</span><span style="color:#61676c;">&lt;R&gt;(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">other</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Magic&lt;R&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;(T, R)&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match </span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> other</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">            (</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(t)</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(r)) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">((t</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> r)))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            (</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err)</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">_</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">| </span><span style="color:#61676c;">(</span><span style="color:#ed9366;">_</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err)) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(err))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// compose two computations, picking succeeding one
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">alt</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">other</span><span style="color:#61676ccc;">: </span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(t) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(t))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">) </span><span style="color:#ed9366;">=&gt;</span><span style="color:#61676c;"> other</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// create an unconditionally succeeding computation
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">pure</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">val</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> T) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        Magic(</span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(val))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">/// create an unconditionally failing computation
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">fail</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">msg</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#fa6e32;">Self </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">        Magic(</span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(msg</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_owned</span><span style="color:#61676c;">()))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>Those seven operations serve as a base for the parser. They allow us to compose primitive argument
parsers in many ways to create a very wide range of computations and there’s no mutations in the
API itself so it fits perfectly with a functional programming style.</p>
<p>There are a few examples of useful operations implemented in terms of this base API.</p>
<p>Optional command line arguments:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">optional</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">magic</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Magic&lt;T&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;</span><span style="font-style:italic;color:#55b4d4;">Option</span><span style="color:#61676c;">&lt;T&gt;&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// if magic contains a value - wrap it in Some, otherwise use None
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// this will also consume any errors that can be inside, but we&#39;ll address
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// this problem later
</span><span style="color:#61676c;">    magic</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">map</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">)</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">alt</span><span style="color:#61676c;">(</span><span style="color:#f51818;">pure</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">None</span><span style="color:#61676c;">))
</span><span style="color:#61676c;">}
</span></pre>
<p>Validating values with a function:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">fn </span><span style="color:#f29718;">guard</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">magic</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Magic&lt;T&gt;, </span><span style="color:#ff8f40;">check</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> impl Fn(&amp;</span><span style="color:#ff8f40;">T</span><span style="color:#61676c;">) -&gt; </span><span style="color:#fa6e32;">bool</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">msg</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">Magic&lt;T&gt; {
</span><span style="color:#61676c;">    magic</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">parse</span><span style="color:#61676c;">(|</span><span style="color:#ff8f40;">val</span><span style="color:#61676c;">| {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">if </span><span style="color:#f07171;">check</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">val) {
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(val)
</span><span style="color:#61676c;">        } </span><span style="color:#fa6e32;">else </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(msg</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">into</span><span style="color:#61676c;">())
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    })
</span><span style="color:#61676c;">}
</span></pre>
<h1 id="back-to-the-practical-implementation" class="toc-item group scroll-mt-20">
    Back to the practical implementation
    <a href="#back-to-the-practical-implementation" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Now that the parser has all the basic building blocks the next step is to reimplement them
without <code>Magic&lt;T&gt;</code>, since current internal representation relies on handwavy magic to provide
<code>Magic</code> containers for arguments on a command line.</p>
<p>An obvious way to represent a specific flag would be by keeping its name around:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Arg</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;static str</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span></pre>
<p>One way to represent all name-argument-pairs is to store them in a <code>BTreeMap&lt;String, String&gt;</code> (for simplicity this parser assumes there is only a single argument per name).
With this, an invocation of</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">$ app --bin hello --jobs 4
</span></pre>
<p>would create a map looking like this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">{
</span><span style="color:#61676c;">  </span><span style="color:#86b300;">&quot;bin&quot;</span><span style="color:#61676ccc;">: </span><span style="color:#86b300;">&quot;hello&quot;</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">  </span><span style="color:#86b300;">&quot;jobs&quot;</span><span style="color:#61676ccc;">: </span><span style="color:#86b300;">&quot;4&quot;
</span><span style="color:#61676c;">}
</span></pre>
<p>Since <code>Arg</code>, as defined above, only represents a name and doesn’t have a value
until the execution phase, the parser needs to use other data types to represent remaining
operations. In Rust, <code>trait</code>s are used to describe the same set of operations for different data types.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">Arg</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">&#39;static str</span><span style="color:#61676c;">)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">trait </span><span style="color:#399ee6;">Parser</span><span style="color:#61676c;">&lt;T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">args</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">BTreeMap&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl </span><span style="color:#61676c;">Parser&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">Arg </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">args</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">BTreeMap&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#abb0b6;">// remove takes care about only consuming each argument at most once
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match</span><span style="color:#61676c;"> args</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">remove</span><span style="color:#61676c;">(</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">) {
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Some</span><span style="color:#61676c;">(val) </span><span style="color:#ed9366;">=&gt; </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(val</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">to_owned</span><span style="color:#61676c;">())</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">None </span><span style="color:#ed9366;">=&gt; </span><span style="font-style:italic;color:#55b4d4;">Err</span><span style="color:#61676c;">(</span><span style="color:#f07171;">format!</span><span style="color:#61676c;">(</span><span style="color:#86b300;">&quot;</span><span style="color:#ff8f40;">{}</span><span style="color:#86b300;"> is not found&quot;</span><span style="color:#61676ccc;">, </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#ff8f40;">0</span><span style="color:#61676c;">))</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>With <code>Magic&lt;T&gt;</code> it’s possible to apply the <code>map</code> transformation immediately, with <code>Arg</code> the
value isn’t available until later so <code>map</code> needs to stash both the parser it changes and the
transformation it applies until later. A simple struct like <code>ParseMap</code> can do just that:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">ParseMap</span><span style="color:#61676c;">&lt;P, F, T, R&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// inner parser
</span><span style="color:#61676c;">    inner</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> P,
</span><span style="color:#61676c;">    inner_type</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">PhantomData&lt;T&gt;,
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// transformation function
</span><span style="color:#61676c;">    mapper</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F,
</span><span style="color:#61676c;">    mapper_result</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">PhantomData&lt;R&gt;,
</span><span style="color:#61676c;">}
</span></pre>
<p><code>PhantomData</code> here is something required by the Rust type system to allow us to implement <code>Parser</code>
trait for <code>ParseMap</code>. Since <code>ParseMap</code> doesn’t need to know what exact parser it works on.
As long as types align - <code>map</code> can go directly into the trait as a default implementation.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">trait </span><span style="color:#399ee6;">Parser</span><span style="color:#61676c;">&lt;T&gt;
</span><span style="color:#61676c;">where
</span><span style="color:#61676c;">    Self: Sized,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">map</span><span style="color:#61676c;">&lt;R, F&gt;(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">f</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F) </span><span style="color:#61676ccc;">-&gt; </span><span style="color:#61676c;">ParseMap&lt;</span><span style="color:#fa6e32;">Self</span><span style="color:#61676c;">, F, T, R&gt;
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">        F</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Fn(T) -&gt; R,
</span><span style="color:#61676c;">    {
</span><span style="color:#61676c;">        ParseMap {
</span><span style="color:#61676c;">            inner</span><span style="color:#61676ccc;">: </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            inner_type</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> PhantomData</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            mapper</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> f</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">            mapper_result</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> PhantomData</span><span style="color:#61676ccc;">,
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p><code>run</code> for <code>ParseMap</code> simply runs the inner parser and applies the transformation if inner
parser succeeded.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;F, P, R, T&gt; Parser&lt;T&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">ParseMap</span><span style="color:#61676c;">&lt;P, F, T, R&gt;
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    P</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Parser&lt;R&gt;,
</span><span style="color:#61676c;">    F</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Fn(R) -&gt; T,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">args</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">BTreeMap&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> p </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">inner</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">(args)</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">((</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">mapper)(p))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p><code>parse</code>’s implementation is almost identical to <code>map</code>, but instead of wrapping the result in <code>Ok</code>
it uses what <code>mapper</code> returns.</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">ParseParse</span><span style="color:#61676c;">&lt;P, F, T, R&gt; {
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// inner parser
</span><span style="color:#61676c;">    inner</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> P,
</span><span style="color:#61676c;">    inner_type</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">PhantomData&lt;T&gt;,
</span><span style="color:#61676c;">    </span><span style="font-style:italic;color:#abb0b6;">// transformation function
</span><span style="color:#61676c;">    mapper</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> F,
</span><span style="color:#61676c;">    mapper_result</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">PhantomData&lt;R&gt;,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;F, P, R, T&gt; Parser&lt;T&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">ParseParse</span><span style="color:#61676c;">&lt;P, F, T, R&gt;
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    P</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Parser&lt;R&gt;,
</span><span style="color:#61676c;">    F</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> Fn(R) -&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">args</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">BTreeMap&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> p </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">inner</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">(args)</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        (</span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">mapper)(p)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p><code>zip</code> is close too, but instead of a single inner parser it holds two of them and runs them
sequentially, when either parser fails - whole computation fails by the power of <code>?</code> operator:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">ParseZip</span><span style="color:#61676c;">&lt;L, R, A, B&gt; {
</span><span style="color:#61676c;">    left</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> L,
</span><span style="color:#61676c;">    left_type</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">PhantomData&lt;A&gt;,
</span><span style="color:#61676c;">    right</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> R,
</span><span style="color:#61676c;">    right_type</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">PhantomData&lt;B&gt;,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;L, R, A, B&gt; Parser&lt;(A, B)&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">ParseZip</span><span style="color:#61676c;">&lt;L, R, A, B&gt;
</span><span style="color:#fa6e32;">where
</span><span style="color:#61676c;">    L</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Parser&lt;A&gt;,
</span><span style="color:#61676c;">    R</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">Parser&lt;B&gt;,
</span><span style="color:#61676c;">{
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">args</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">BTreeMap&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;(A, B), </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> a </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">left</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">(args)</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> b </span><span style="color:#ed9366;">= </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">right</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">(args)</span><span style="color:#ed9366;">?</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">((a</span><span style="color:#61676ccc;">,</span><span style="color:#61676c;"> b))
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p><code>pure</code> and <code>fail</code> simply stash the expected value or the error message and return them inside
the <code>run</code> function without touching <code>args</code> at all.</p>
<p>With <code>alt</code> picking between two alternatives and each alternatives potentially consuming the
same command line options, both branches must get exactly the same set of inputs and the final
set of changes to <code>args</code> should come from the succeeding branch:</p>
<pre style="background-color:#fafafa;">
<span style="color:#fa6e32;">struct </span><span style="color:#399ee6;">ParseAlt</span><span style="color:#61676c;">&lt;L, R, T&gt; {
</span><span style="color:#61676c;">    left</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> L,
</span><span style="color:#61676c;">    right</span><span style="color:#61676ccc;">:</span><span style="color:#61676c;"> R,
</span><span style="color:#61676c;">    result_type</span><span style="color:#61676ccc;">: </span><span style="color:#61676c;">PhantomData&lt;T&gt;,
</span><span style="color:#61676c;">}
</span><span style="color:#61676c;">
</span><span style="color:#fa6e32;">impl</span><span style="color:#61676c;">&lt;L, R, T&gt; Parser&lt;T&gt; </span><span style="color:#fa6e32;">for </span><span style="color:#399ee6;">ParseAlt</span><span style="color:#61676c;">&lt;L, R, T&gt; {
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">run</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">, </span><span style="color:#ff8f40;">args</span><span style="color:#61676ccc;">: </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut </span><span style="color:#61676c;">BTreeMap&lt;</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">str</span><span style="color:#61676c;">, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt;) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> args_copy </span><span style="color:#ed9366;">=</span><span style="color:#61676c;"> args</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">clone</span><span style="color:#61676c;">()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">match </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">left</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> args_copy) {
</span><span style="color:#61676c;">            </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(ok) </span><span style="color:#ed9366;">=&gt; </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">                std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">mem</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">swap(args</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> args_copy)</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">                </span><span style="font-style:italic;color:#55b4d4;">Ok</span><span style="color:#61676c;">(ok)
</span><span style="color:#61676c;">            }
</span><span style="color:#61676c;">            </span><span style="color:#ed9366;">_ =&gt; </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">right</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">(args)
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">}
</span></pre>
<p>With all those methods in place, all that’s missing is a wrapper to take care of getting
arguments from <code>std::env::args()</code>, placing them into a <code>BTreeMap</code> and invoking <code>run</code>. Since
these steps the same for every <code>Parser</code>, it can be provided as a default implementation on the
<code>Parser</code> trait.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span><span style="color:#61676c;">    </span><span style="color:#fa6e32;">fn </span><span style="color:#f29718;">exec</span><span style="color:#61676c;">(</span><span style="color:#ff8f40;">self</span><span style="color:#61676c;">) </span><span style="color:#61676ccc;">-&gt; </span><span style="font-style:italic;color:#55b4d4;">Result</span><span style="color:#61676c;">&lt;T, </span><span style="font-style:italic;color:#55b4d4;">String</span><span style="color:#61676c;">&gt; {
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let</span><span style="color:#61676c;"> argv </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">std</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">env</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">args()</span><span style="color:#ed9366;">.</span><span style="color:#61676c;">collect</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">&lt;</span><span style="font-style:italic;color:#55b4d4;">Vec</span><span style="color:#61676c;">&lt;</span><span style="color:#ed9366;">_</span><span style="color:#61676c;">&gt;&gt;()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">let mut</span><span style="color:#61676c;"> args </span><span style="color:#ed9366;">= </span><span style="color:#61676c;">BTreeMap</span><span style="color:#ed9366;">::</span><span style="color:#61676c;">new()</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        </span><span style="color:#fa6e32;">for</span><span style="color:#61676c;"> i </span><span style="color:#ed9366;">in </span><span style="color:#ff8f40;">0</span><span style="color:#ed9366;">..</span><span style="color:#61676c;">argv</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">len</span><span style="color:#61676c;">() </span><span style="color:#ed9366;">/ </span><span style="color:#ff8f40;">2 </span><span style="color:#61676c;">{
</span><span style="color:#61676c;">            args</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">insert</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">argv[i </span><span style="color:#ed9366;">* </span><span style="color:#ff8f40;">2</span><span style="color:#61676c;">]</span><span style="color:#61676ccc;">, </span><span style="color:#ed9366;">&amp;</span><span style="color:#61676c;">argv[i </span><span style="color:#ed9366;">* </span><span style="color:#ff8f40;">2 </span><span style="color:#ed9366;">+ </span><span style="color:#ff8f40;">1</span><span style="color:#61676c;">])</span><span style="color:#61676ccc;">;
</span><span style="color:#61676c;">        }
</span><span style="color:#61676c;">        </span><span style="font-style:italic;color:#55b4d4;">self</span><span style="color:#ed9366;">.</span><span style="color:#f07171;">run</span><span style="color:#61676c;">(</span><span style="color:#ed9366;">&amp;</span><span style="color:#fa6e32;">mut</span><span style="color:#61676c;"> args)
</span><span style="color:#61676c;">    }
</span><span style="color:#61676c;">    </span><span style="color:#ed9366;">...
</span></pre>
<h1 id="conclusions" class="toc-item group scroll-mt-20">
    Conclusions
    <a href="#conclusions" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1><h2 id="using-applicative-parser-command-line-parser" class="toc-item group scroll-mt-20">
    Using applicative parser command line parser
    <a href="#using-applicative-parser-command-line-parser" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>This tutorial establishes the base components for an applicative command line parser.
The <a href="https://crates.io/crates/bpaf"><code>bpaf</code></a> library extends this concept all the way to
production ready state.</p>
<p>Unlike traditional command line interface parsers, where one argument maps roughly to a single
field and validations are limited to cases accounted for by the parser library authors, using
applicative functors lets library users perform almost arbitrary transformations and
validations. For example, it’s possible to have a single option to write to a multiple fields
or require that fields come in groups.</p>
<p>The fact that individual parsers compose makes it easy to share them across multiple binaries
in the same project. For example if your apps contain a notion of data input from multiple
types of sources (local file, remote data base, live network feed) it might be convenient to
have a single datatype representing it, possibly with <code>enum</code>, and a single shared parser that
lets users specify it. Such parser can contain all the help messages, validations, possible
dynamic shell completion functions and so on and can be easily reused across different binaries.</p>
<p>Typical steps consists of</p>
<ul>
<li>figuring out a list of options your app might take and relationships between them</li>
<li>packing those options into a composition of <code>struct</code>s and <code>enum</code>s (to represent mutually required and mutually exclusive combinations respectively)</li>
<li>decorating parsers with help messages, validations and shell completion functions</li>
</ul>
<p>The derive macro supplied by <code>bpaf</code>’s <code>derive</code> feature helps to avoid writing most of the parsing
and composition code by hand, but in some cases using a mix of derived and manually written code
leads to overall cleaner results.</p>
<h2 id="using-category-theory-abstractions-such-as-applicative-functors" class="toc-item group scroll-mt-20">
    Using Category Theory abstractions such as Applicative Functors
    <a href="#using-category-theory-abstractions-such-as-applicative-functors" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Rust already supports a very limited subset of similar function compositions with unstable
<code>Try</code> trait and <code>?</code> operator. Abstractions introduced in this tutorial can help to extend such
composition with the ability to implicitly pass information around, to try different paths through
compositions and collect information about successes and failures and make this information
available though side channels.</p>
<p>As shown earlier, Applicative Functors can help with splitting problems containing both business
logic (what command line options to consume and what constraints they must obey) and glue logic
(what arguments got consumed so far, how to pass consumed arguments around, how to make sure
consistent validations, etc) into performant and purely functional style code as far as the
external API is concerned.</p>
<p>While designing an Applicative style API requires some specialized knowledge - mostly what kind
of laws implementation needs to obey and how to check them - using the resulting API does not. With
help of the Rust’s type system it’s easy to make sure that for as long as the user’s code
typechecks - it works and all compositions are correct.</p>
2024-03-11T22:51:08.456235726+08:00 - 文章标题：Stupidly effective ways to optimize Rust compile time
2024-03-11T22:51:08.456444782+08:00 - 文章内容：<p>Although there are often complaints saying Rust’compilation speed is notoriously slow, our project <a href="https://github.com/risingwavelabs/risingwave">RisingWave</a> is not so slow to compile, especially since previously contributors like (<a href="https://github.com/skyzh">skyzh</a>, <a href="https://github.com/bugenzhao">BugenZhao</a>) have put in a lot of effort. After using an M1 MacBook Pro, compiling is not a problem at all. A full debug compilation only takes 2-3 minutes.</p>
<p>However, over time, more and more things have been added to our CI, making it increasingly bloated. The main workflow now takes about 40 minutes, while the PR workflow takes about 25 minutes 30 seconds. Although it is still not intolerably slow, it is already noticeably slower than before.</p>
<p>So a few days ago, I decided to spend some time researching whether I could optimize the compilation speed a bit more.</p>
<p>What shocked me was that there were some very simple methods that, with just a little effort, produced astonishing results. I feel like I can describe them as low-hanging fruits, silver bullets, or even free lunch 🤯.</p>
<hr />
<p>P.S. I highly recommend <a href="https://github.com/matklad">matklad</a>’s blog (He is the original author of IntelliJ Rust and rust-analyzer):</p>
<ul>
<li><a href="https://matklad.github.io/2021/09/04/fast-rust-builds.html">Fast Rust Builds</a></li>
<li><a href="https://matklad.github.io/2021/02/27/delete-cargo-integration-tests.html">Delete Cargo Integration Tests</a></li>
</ul>
<p>Most of the methods I used are discussed there, and he explains them clearly. If not otherwise indicated, all quotes in this article come from there.</p>
<p>Although there are quite some articles talking about how to optimize Rust compilation speed (e.g., <a href="https://endler.dev/2020/rust-compile-times/">Tips for Faster Rust Compile Times</a>), I still want to write another one to share my step-by-step process. Each optimization point comes with a corresponding PR, and you can combine the <a href="https://github.com/risingwavelabs/risingwave/commits/main?after=d8198fa138003e1f1431053f4f5f09e4a5fa8fd8+69&amp;branch=main&amp;qualified_name=refs%2Fheads%2Fmain">commit history</a> to see the effect of each optimization point by comparing the CI pages before and after its PR.</p>
<hr />
<p>P.P.S. Results after optimization: main workflow is now 27 minutes at the fastest, and PR workflow is now 16 minutes at the fastest, with most taking around 17-19 minutes.</p>
<h1 id="valuable-data-and-charts-to-find-the-bottlenecks" class="toc-item group scroll-mt-20">
    Valuable data and charts to find the bottlenecks
    <a href="#valuable-data-and-charts-to-find-the-bottlenecks" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<blockquote>
<p>Build times are a fairly easy optimization problem: it’s trivial to get direct feedback (just time the build), there are a bunch of tools for profiling, and you don’t even need to come up with a representative benchmark.</p>
</blockquote>
<p>When trying to optimize anything, it would be good to have some profiling data and charts to find out the bottlenecks. Luckily, we do have some nice ones for optimizing CI time.</p>
<h2 id="ci-waterfall-&-dag-graph" class="toc-item group scroll-mt-20">
    CI Waterfall &amp; DAG Graph
    <a href="#ci-waterfall-&-dag-graph" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>We use Buildkite for our CI, and the normal view of a page (such as <a href="https://buildkite.com/risingwavelabs/pull-request/builds/17099">Build #17099</a>) looks like this:</p>
<p><img src="https://xxchan.github.io/assets/img/comptime/buildkite-1.png" alt="buildkite-1.png" title="" loading="lazy"></p>
<p>Buildkite has two very useful hidden pages, located at <code>/waterfall</code> and <code>/dag</code>, respectively, which show:</p>
<p><img src="https://xxchan.github.io/assets/img/comptime/buildkite-waterfall.png" alt="buildkite-waterfall.png" title="" loading="lazy"></p>
<p><img src="https://xxchan.github.io/assets/img/comptime/buildkite-dag.png" alt="buildkite-dag.png" title="" loading="lazy"></p>
<p>From the waferfall graph, we can see recovery test finishes last. Two large steps finish before it: build (deterministic simulation) and check. The DAG graph shows that recovery test depends only on simulation build, so we can forget about the check step for now, and conclude the biggest bottleneck is in the path of simulation build -&gt; recovery test.</p>
<h2 id="cargo-build---timings" class="toc-item group scroll-mt-20">
    <code>cargo build --timings</code>
    <a href="#cargo-build---timings" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h2>
<p>Cargo comes with built-in support for profiling build times (it was stabilized last year), which can be enabled by running <a href="https://doc.rust-lang.org/cargo/reference/timings.html"><code>cargo build --timings</code></a>. It produces output like this:</p>
<p><img src="https://xxchan.github.io/assets/img/comptime/timings.png" alt="timings.png" title="" loading="lazy"></p>
<p>We can see that the compilation times for some dependencies such as <code>zstd-sys</code> and <code>protobuf-src</code> are very long, so we should try to optimize them.</p>
<h1 id="step-1:-compilation-cache" class="toc-item group scroll-mt-20">
    Step 1: Compilation cache
    <a href="#step-1:-compilation-cache" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><a href="https://github.com/risingwavelabs/risingwave/pull/7799">ci: try sccache #7799</a></p>
<blockquote>
<p>If you think about it, it’s pretty obvious how a good caching strategy for CI should work.</p>
<p>Unfortunately, almost nobody does this.</p>
</blockquote>
<p><a href="https://xuanwo.io/en-us/reports/2023-04/">Why should you give Sccache a try?</a> With xuanwo’s strong recommendation, I was very tempted to try sccache, which was also a major trigger for my optimization efforts this time.</p>
<p>It’s so easy to use. Just add two environment variables to start it up:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">ENV RUSTC_WRAPPER=sccache
</span><span style="color:#61676c;">ENV SCCACHE_BUCKET=ci-sccache-bucket
</span></pre>
<p>(Well, behind the scenes, you actually need to study Buildkite and AWS configurations - which are also very simple. Buildkite can obtain permissions through IAM roles, so I just need to a policy for the role to access an S3 bucket, without the need to configure things like secret keys. I had been thinking about whether I could echo the key out in CI before, but it seems there’s no need to worry about that. 😄)</p>
<p>The effect was immediately apparent, reducing the simulation build time by 2.5 minutes and the non-bottleneck debug build time by 4 minutes. Although it didn’t bring about a qualitative change, why not make use of the (almost free) quantitative change?</p>
<h1 id="step-2:-remove-unused-dependencies" class="toc-item group scroll-mt-20">
    Step 2: Remove unused dependencies
    <a href="#step-2:-remove-unused-dependencies" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><a href="https://github.com/risingwavelabs/risingwave/pull/7816">build: remove unused deps #7816</a></p>
<p>All dependencies declared in <code>Cargo.toml</code> will be compiled regardless of whether they are actually used or not. Moreover, they may introduce unnecessary synchronization points, affecting the parallelism of compilation.</p>
<p>An old tool <a href="https://github.com/est31/cargo-udeps">cargo-udeps</a> is used to remove unused dependencies. But firstly, it does not support automatic fixing, and it is also very slow. Also, I had an impression that it cannot be used together with <code>workspace-hack</code>. This has led to RisingWave not cleaning up unused dependencies for a long time – a typical broken window effect 🥲!</p>
<p>In an issue of <code>cargo-udeps</code> about automatic fix, someone mentioned <a href="https://github.com/bnjbvr/cargo-machete"><code>cargo-machete</code></a>. Without many investigation I just gave it a shot, hoping it works. It turned out to be very fast and there were not many false positives! Although there were a few small problems (see the commit history of the above PR), they were easily fixed.</p>
<p>The author of <code>cargo-machete</code> has a <a href="https://blog.benj.me/2022/04/27/cargo-machete/">blog</a> introducing the harm of unused dependencies and the solution of <code>cargo-machete</code>. Specifically, <code>cargo-udeps</code> first compiles the project via <code>cargo check</code> and then analyzes it, while <code>cargo-machete</code> uses a simple and stupid approach: just <code>ripgrep</code> it.</p>
<p>This PR immediately removed dozens of unused dependencies, which surprised me again 🤯. Unfortunately, the CI time did not decrease further, which seems to indicate that sccache works very well… I roughly tested it locally, and it was faster by about ten to twenty seconds. It seems not a thing, but anyway it’s free :)</p>
<hr />
<p>P.S. In fact, <code>cargo-udeps</code> can also be used with <code>workspace-hack</code> by configuring it: <a href="https://github.com/risingwavelabs/risingwave/pull/7836">feat(risedev): add <code>check-udeps</code> #7836</a></p>
<h1 id="step-3:-disable-incremental-compilation" class="toc-item group scroll-mt-20">
    Step 3: Disable incremental compilation
    <a href="#step-3:-disable-incremental-compilation" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><a href="https://github.com/risingwavelabs/risingwave/pull/7838">build: disable incremental build in CI #7838</a></p>
<p>After finishing the previous two steps, I almost wanted to finish my work, but I still felt a bit itchy and thought that the simulation build was still a little slow. So I decided to do some profiling. Then I saw the monsters in the <code>--timings</code> graph that I posted above. I felt that it didn’t make sense.</p>
<p>I tried to search the possible reasons why the build artifacts can be non-cacheable for sccache, and found that incremental compilation is a big caveat. I tried to disable it immediately and was shocked again. The effect was stupidly good:</p>
<p><img src="https://xxchan.github.io/assets/img/comptime/timings-2.png" alt="timings-2" title="" loading="lazy"></p>
<p>This instantly reduced the time for simulation build by 4 minutes…</p>
<p>Actually, we turned off incremental compilation for our debug build a long time ago:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">ci-dev</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">incremental </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">false
</span></pre>
<p>But when we added a new build profile <code>ci-sim</code> later, we didn’t consider this issue. If you think about it, you can find although incremental compilation is good, it doesn’t make sense in CI!</p>
<blockquote>
<p>CI builds often are closer to from-scratch builds, as changes are typically much bigger than from a local edit-compile cycle. For from-scratch builds, incremental adds an extra dependency-tracking overhead. It also significantly increases the amount of IO and the size of <code>./target</code>, which make caching less effective.</p>
</blockquote>
<p>So I simply added a global env var in CI to turn it off once and for all.</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">ENV CARGO_INCREMENTAL=0
</span></pre>
<h1 id="step-4:-single-binary-integration-test" class="toc-item group scroll-mt-20">
    Step 4: Single binary integration test
    <a href="#step-4:-single-binary-integration-test" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><a href="https://github.com/risingwavelabs/risingwave/pull/7842">build: single-binary integration test #7842</a></p>
<p>It’s another <em>stupidly effective</em> optimization. tl;dr:</p>
<p>Don’t do this:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">tests/
</span><span style="color:#61676c;">  foo.rs
</span><span style="color:#61676c;">  bar.rs
</span></pre>
<p>Do this instead:</p>
<pre style="background-color:#fafafa;">
<span style="color:#61676c;">tests/
</span><span style="color:#61676c;">  integration/
</span><span style="color:#61676c;">    main.rs
</span><span style="color:#61676c;">    foo.rs
</span><span style="color:#61676c;">    bar.rs
</span></pre>
<p>It’s because every file under <code>tests/</code> will be compiled into a separate binary (meaning every one will link dependencies). Apart from slow compilation, this can even slow down test runnings (a flaw in <code>cargo test</code>).</p>
<p>This optimization didn’t reduce our test time (probably due to the superiority of <code>cargo nextest</code>), but it immediately reduced the compilation time by another 2 minutes… It’s also a bit funny that it also reduced the time for uploading/downloading, compressing/decompressing artifacts by 2 minutes…(although the latter did not affect the bottleneck).</p>
<h1 id="some-previous-efforts" class="toc-item group scroll-mt-20">
    Some previous efforts
    <a href="#some-previous-efforts" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>The above is the main process of my optimization this time, and now I can finally be satisfied with the work. Finally, I would like to summarize some of our previous efforts for reference.</p>
<ul>
<li>Use <a href="https://github.com/nextest-rs/nextest"><code>cargo nextest</code></a> instead of <code>cargo test</code>.</li>
<li>Use the <code>workspace-hack</code> technique: see <a href="https://docs.rs/cargo-hakari/latest/cargo_hakari/about/index.html"><code>cargo hakari</code></a>.</li>
<li>Add cache to the cargo registry, or use the recently stabilized <a href="https://blog.rust-lang.org/inside-rust/2023/01/30/cargo-sparse-protocol.html">sparse index</a>.</li>
<li>Split a huge crate into multiple smaller crates.</li>
<li>Try to reduce linking time: linking takes a lot of time and is single-threaded, so it may probably become a bottleneck.
<ul>
<li>Use a faster linker: <code>mold</code> for Linux, <code>zld</code> for macOS. <code>lld</code> is the most mature option for production use.</li>
<li>Turn off Link Time Optimization (LTO) on debug builds.</li>
</ul>
</li>
<li>Trade-off between compile time and performance: The total time of CI is compile time + test time, so whether to turn on compile optimization (including LTO mentioned above), and how much to turn on, is actually a trade-off between the two. You can test and adjust that in order to achieve an overall optimal choice. For example, here’s our build profile tuned by <a href="https://github.com/bugenzhao">BugenZhao</a>:</li>
</ul>
<pre style="background-color:#fafafa;">
<span style="font-style:italic;color:#abb0b6;"># The profile used for CI in pull requests.
</span><span style="font-style:italic;color:#abb0b6;"># External dependencies are built with optimization enabled, while crates in this workspace are built
</span><span style="font-style:italic;color:#abb0b6;"># with `dev` profile and full debug info. This is a trade-off between build time and e2e test time.
</span><span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">ci-dev</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">inherits </span><span style="color:#61676c;">= </span><span style="color:#86b300;">&quot;dev&quot;
</span><span style="color:#399ee6;">incremental </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">false
</span><span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">ci-dev</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">package</span><span style="color:#61676ccc;">.</span><span style="color:#86b300;">&quot;*&quot;</span><span style="color:#61676c;">] </span><span style="font-style:italic;color:#abb0b6;"># external dependencies
</span><span style="color:#399ee6;">opt-level </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">1
</span><span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">ci-dev</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">package</span><span style="color:#61676ccc;">.</span><span style="color:#86b300;">&quot;tokio&quot;</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">opt-level </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">3
</span><span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">ci-dev</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">package</span><span style="color:#61676ccc;">.</span><span style="color:#86b300;">&quot;async_stack_trace&quot;</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">opt-level </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">3
</span><span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">ci-dev</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">package</span><span style="color:#61676ccc;">.</span><span style="color:#86b300;">&quot;indextree&quot;</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">opt-level </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">3
</span><span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">ci-dev</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">package</span><span style="color:#61676ccc;">.</span><span style="color:#86b300;">&quot;task_stats_alloc&quot;</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">opt-level </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">3
</span><span style="color:#61676c;">
</span><span style="font-style:italic;color:#abb0b6;"># The profile used for deterministic simulation tests in CI.
</span><span style="font-style:italic;color:#abb0b6;"># The simulator can only run single-threaded, so optimization is required to make the running time
</span><span style="font-style:italic;color:#abb0b6;"># reasonable. The optimization level is customized to speed up the build.
</span><span style="color:#61676c;">[</span><span style="color:#399ee6;">profile</span><span style="color:#61676ccc;">.</span><span style="color:#399ee6;">ci-sim</span><span style="color:#61676c;">]
</span><span style="color:#399ee6;">inherits </span><span style="color:#61676c;">= </span><span style="color:#86b300;">&quot;dev&quot;
</span><span style="color:#399ee6;">opt-level </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">2
</span><span style="color:#399ee6;">incremental </span><span style="color:#61676c;">= </span><span style="color:#ff8f40;">false
</span></pre>
<p>For more optimization techniques, you may refer to other posts like <a href="https://endler.dev/2020/rust-compile-times/">Tips for Faster Rust Compile Times</a>.</p>
<h1 id="conclusion" class="toc-item group scroll-mt-20">
    Conclusion
    <a href="#conclusion" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p>Things like CI and DX are easy to become messy if they are not taken care of regularly. My story shows that if you do some maintenance from time to time, you may get unexpected gains. A little effort can bring huge improvements.</p>
<p>Finally I’d like to quote matklad’s <a href="https://matklad.github.io/2021/09/04/fast-rust-builds.html">blog</a> again as a conclusion:</p>
<blockquote>
<p>Compilation time is a <em>multiplier</em> for basically everything. Whether you want to ship more features, to make code faster, to adapt to a change of requirements, or to attract new contributors, build time is a factor in that.</p>
<p>It also is a non-linear factor. Just waiting for the compiler is the smaller problem. The big one is losing the state of the flow or (worse) mental context switch to do something else while the code is compiling. One minute of work for the compiler wastes more than one minute of work for the human.</p>
</blockquote>
<p>Let’s take some time to prevent “<em>broken windows</em>”. The effort would pay off!</p>
2024-03-11T22:51:08.456529184+08:00 - 文章标题：Interview with Sunli
2024-03-11T22:51:08.457176261+08:00 - 文章内容：<p>I am pleased to introduce our second interviewee, <a href="https://github.com/sunli829">Sunli</a>, the creator of two widely-used crates: <a href="https://github.com/async-graphql/async-graphql">async-graphql</a> and <a href="https://github.com/poem-web/poem">poem</a>. It is an honor to have the chance to speak with him and gain insights into his experiences and expertise.</p>
<h1 id="introduction" class="toc-item group scroll-mt-20">
    Introduction
    <a href="#introduction" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>Introduce yourself and share a bit about your background with Rust. When did you start learning Rust, and what inspired you to do so?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Hello everyone, I am <strong>Sunli</strong> (Github: <a href="https://github.com/sunli829">@sunli829</a>), an older programmer who loves coding. Previously, C++ was my main programming language, and even though I have been using it for many years, I still feel like I haven’t fully mastered it.</p>
<p>Three years ago, I started learning Rust. Rust’s ownership and lifetime mechanisms force developers to follow conventions and naturally consider exceptional cases when writing code. This is one of the truly distinctive features that sets Rust apart from other programming languages. Therefore, I began applying it to my work. I also enjoy the Rust community, there are many helpful people.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="async-graphql" class="toc-item group scroll-mt-20">
    Async-graphql
    <a href="#async-graphql" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>Can you explain what async-graphql is and how it differs from other GraphQL libraries?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p><a href="https://graphql.org/">GraphQL</a> is a query language for APIs that allows clients to request specific data and enables servers to respond with the corresponding data based on the request content. The flexibility and powerful querying capabilities of GraphQL have made it increasingly popular in developing modern applications.</p>
<p><strong>async-graphql</strong> is a server-side library used to implement the GraphQL specification, leveraging Rust features such as procedural macros to enhance development experience and provide full asynchronous support.</p>
<p>Another library similar to <strong>async-graphql</strong> is <a href="https://github.com/graphql-rust/juniper">juniper</a>, which I have used before and is also excellent.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>What inspired you to create async-graphql, and what has the response been like from the Rust community?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>As a Rust learner, I wanted to contribute something to the community. As I wasn’t familiar with GraphQL at the time, I did some research and decided to develop the <strong>async-graphql</strong> project, also to learn GraphQL.</p>
<p>During development, I referenced the more complete GraphQL library at the time, <strong>Juniper</strong>, but it didn’t support Rust’s asynchronous features. So my goal became to implement all the features provided by <strong>Juniper</strong> and add asynchronous support to provide a better user experience.</p>
<p>About a month later, I released the first version of <strong>async-graphql</strong> and have been maintaining and improving it ever since. As it is the only library that supports asynchronous, many people have migrated from <strong>Juniper</strong> to <strong>async-graphql</strong>, which I believe is a very important point.</p>
<p>Although the first version of the code was not perfect, it still worked properly. Therefore, I received a lot of feedback, which helped me better understand Rust and GraphQL and provided many suggestions for improving <strong>async-graphql</strong>. Some even provided PRs to rewrite parts of the code, which greatly improved my skills and made me more aware of how to contribute to the open-source community.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="poem" class="toc-item group scroll-mt-20">
    Poem
    <a href="#poem" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>Can you tell us about Poem and its design philosophy?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>I wanted a web framework that may not have the best performance, but would be relatively simple to use, which is why I made it.</p>
<p><strong>Poem</strong> was named by <a class="author-code" href="/@HandongZhang">
<img src="/static/avatar.png" alt="avatar" loading="lazy">
<span>Handong Zhang</span>
</a>
, a friend in the Rust community. It is definitely a good name. He transferred this crate to me for free, hoping that using this library can really be like writing poem.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>What inspired you to develop another web framework, and how does Poem differ from other Rust web frameworks?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Rust has many high-quality web frameworks, some of which are better than <strong>Poem</strong>. However, for me personally, <strong>Poem</strong> is very important because it’s mine and I can freely modify it, which makes me more free during the development process.</p>
<p>Over time, I wanted to add more features and capabilities to <strong>Poem</strong>, so I started learning the OpenAPI specification and created a sub-project called <a href="https://github.com/poem-web/poem/tree/master/poem-openapi">poem-openapi</a>. Using Rust’s procedural macros to automatically generate API documentation that conforms to the OpenAPI specification, similar to the popular <a href="https://github.com/tiangolo/fastapi">FastAPI</a> library in Python. This greatly improved the efficiency of the development process.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>Can you share any exciting upcoming features or plans for Poem?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>There is no plan currently as the functionalities provided by <strong>Poem</strong> are already sufficient for my needs.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="open-source" class="toc-item group scroll-mt-20">
    Open-source
    <a href="#open-source" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>What are the most challenging aspects of maintaining two popular open-source projects like async-graphql and Poem?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>I didn’t expect these two libraries to have so many users. In the early days, I would receive around 10 issue reports from users around the world every day, which required me to work for more than 12 hours a day. Although it was very hard, as time went by, I saw that the number of users of these libraries was increasing, and I felt that it was all worth it. In fact, this was my first attempt at an open-source project, so I learned a lot during this process, such as how to collaborate with other developers using Github and how to better manage and solve problems.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
<p><strong>How do you balance maintaining these projects with other commitments?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>Balancing maintaining projects with other commitments can be difficult and definitely requires more time.</p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div><h1 id="end-question" class="toc-item group scroll-mt-20">
    End question
    <a href="#end-question" class="ml-2 inline-block opacity-0 border-0 group-hover:opacity-100"
        aria-label="Anchor">
        <div
            class="w-6 h-6 text-slate-400 ring-1 ring-slate-900/5 rounded-md shadow-sm flex items-center justify-center hover:ring-slate-900/10 hover:shadow hover:text-slate-700">
            <svg width="12" height="12" fill="none" aria-hidden="true">
                <path d="M3.75 1v10M8.25 1v10M1 3.75h10M1 8.25h10" stroke="currentColor" stroke-width="1.5"
                    stroke-linecap="round">
                </path>
            </svg>
        </div>
    </a>
</h1>
<p><strong>Are there any other hobbies or interests that you have, and how do you balance them with your work on Rust projects?</strong></p>
<div class="relative my-6 p-8 bg-[#f8fafc]">
    <div class="my-6">
        <div class="flex items-center">
            <img class="w-8 h-8 rounded-full !m-0 !mr-2" src="/static/avatar/sunli.jpeg"/>
            <div class="text-lg font-bold">Sunli</div>
            </div>
        </div>
    <div class="prose prose-slate"><p>I only have two hobbies, one is programming and the other is playing games. When I feel tired, I will spend some time playing games to relax my mind and body. This is also the secret to my long-term work efficiency. In this way, I can get rest and entertainment, so that I can better focus on my programming projects.</p>
<p><strong>I am fortunate to have the support of my family, especially my wife, who always encourages me to do things that make me happy. This support gives me more confidence to continue doing what I love, and I feel very lucky and grateful for it.</strong></p>
</div>
    <svg class="absolute top-8 right-8 w-10 h-10" t="1647239309441" viewBox="0 0 1024 1024" version="1.1"
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <style type="text/css"></style>
        </defs>
        <path
            d="M788.288069 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.090858-29.827329 52.204989-76.305897 91.499947-139.435703 117.915573l75.743078 120.500445c104.442724-47.073108 180.749644-116.493178 228.948389-208.292953 36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L958.70846 98.858542 626.473683 98.858542l0 359.77604L788.288069 458.634582zM254.647189 458.634582c-3.442402 99.842962-20.061918 175.8521-49.92097 228.089835-29.827329 52.206012-76.305897 91.50097-139.435703 117.916597l75.743078 120.500445C245.476319 878.06835 321.782216 808.647257 369.981984 716.848505c36.744879-68.857251 55.085596-180.185802 55.085596-333.957001L425.06758 98.858542 92.832803 98.858542l0 359.77604L254.647189 458.634582z"
            fill="#eee">
        </path>
    </svg>
</div>
2024-03-11T22:51:08.476371721+08:00 - RSS2
2024-03-11T22:51:08.476416075+08:00 - 文章标题：Why async Rust?
2024-03-11T22:51:08.476437090+08:00 - 文章内容：Async/await syntax in Rust was initially released to much fanfare and excitement. Recently, the reception has been a bit more mixed. To some extent this is just the natural progression of the hype cycle, but I also think as we have become more distant from the original design process, some of the context has been lost.
2024-03-11T22:51:08.476459361+08:00 - 文章标题：The Registers of Rust
2024-03-11T22:51:08.476480946+08:00 - 文章内容：It’s been nearly two and half years since I was an active contributor to the Rust project. There are some releases that I’ve been very excited about since then, and I’m heartened by Niko’s recent blog post emphasizing stability and polish over grand new projects. But I’ve also felt a certain apprehension at a lot of the directions the project has taken, which has often occupied my thoughts. From that preoccupation this blog post has emerged, hopefully the first in a series over the next few weeks outlining my thoughts on the design of Rust in 2023, especially in connection to async, and I hope its impact will be chiefly positive.
2024-03-11T22:51:08.476500339+08:00 - 文章标题：Reducing code size in librsvg by removing an unnecessary generic struct
2024-03-11T22:51:08.476520570+08:00 - 文章内容：Someone mentioned cargo-bloat the other day and it reminded me that I have been wanting to measure the code size for generic functions in librsvg, and see if there are improvements to be made.
2024-03-11T22:51:08.476544316+08:00 - 文章标题：Keyword Generics Progress Report: February 2023
2024-03-11T22:51:08.476565902+08:00 - 文章内容：About 9 months ago we announced the creation of the Keyword Generics Initiative; a group working under the lang team with the intent to solve the function coloring problem through the type system not just for async, but for const and all current and future function modifier keywords as well.<br><br>We're happy to share that we've made a lot of progress over these last several months, and we're finally ready to start putting some of our designs forward through RFCs. Because it's been a while since our last update, and because we're excited to share what we've been working on, in this post we'll be going over some of the things we're planning to propose.
2024-03-11T22:51:08.476586398+08:00 - 文章标题：Why is building a UI in Rust so hard?
2024-03-11T22:51:08.476607880+08:00 - 文章内容：In 2019, “GUI” was the 6th most highly requested feature that was preventing adoption of Rust. This is fundamentally a limitation in Rust: the design of the language itself makes modelling common approaches to building UI difficult.<br><br>In this post, I’ll discuss why Rust’s unique memory management model and lack of inheritance makes traditional techniques to build a UI framework difficult and a few of the ways we’ve been working around it. I believe one of these approaches, or some combination of them, will ultimately lead to a stable cross-platform UI toolkit for high-performance UI rendering that everyone can use.
2024-03-11T22:51:08.476639739+08:00 - 文章标题：New release
2024-03-11T22:51:08.476662022+08:00 - 文章内容：As you might’ve noticed, the gtk3-rs projects are getting less and less attention and we intend to deprecate them in one of the future releases. Therefore, we recommend to anyone who didn’t upgrade to GTK4 to do it now. gtk3-rs will get further releases in the foreseeable future to keep up with gtk-rs-core, but no development effort is going to be directed towards it. This is already the de-facto situation for more than a year. Additionally, the GTK3 versions of various externally maintained bindings will most likely not get any further releases.<br><br>In addition to gtk-rs, various externally maintained bindings also had a new release. For gstreamer-rs you can find the CHANGELOG of the 0.20 release here. Most bindings maintained as part of GNOME were also updated.<br><br>On this note, time to go through the major changes of this release. Enjoy!
2024-03-11T22:51:08.476682062+08:00 - 文章标题：Rust to WebAssembly the hard way
2024-03-11T22:51:08.476703020+08:00 - 文章内容：What follows is a brain dump of everything I know about compiling Rust to WebAssembly. Enjoy.<br><br>Some time ago, I wrote a blog post on how to compile C to WebAssembly without Emscripten, i.e. without the default tool that makes that process easy. In Rust, the tool that makes WebAssembly easy is called wasm-bindgen, and we are going to ditch it! At the same time, Rust is a bit different in that WebAssembly has been a first-class target for a long time and the standard library is laid out to support it out of the box.
2024-03-11T22:51:08.476722673+08:00 - 文章标题：Parsing TFTP in Rust
2024-03-11T22:51:08.476742793+08:00 - 文章内容：Several years ago I did a take-home interview which asked me to write a TFTP server in Go. The job wasn't the right fit for me, but I enjoyed the assignment. Lately, in my spare time, I've been tinkering with a Rust implementation. Here's what I've done to parse the protocol.
2024-03-11T22:51:08.476762867+08:00 - 文章标题：Dramatically reducing AccessKit’s memory usage
2024-03-11T22:51:08.476785247+08:00 - 文章内容：In our recent status update, we called out the use of a single large data structure for all accessible UI elements as a known potential weakness in the design. After that post, feedback from potential users of AccessKit made it clear that this design flaw was a pressing problem that blocked them from using AccessKit. One of these discussions also led us to a particularly attractive technique for solving the problem. So we decided to go ahead and do this optimization work, to unblock further adoption of AccessKit and get the inevitable incompatible API changes out of the way sooner rather than later. This post summarizes the results of this optimization, explains how we did it, and looks ahead to further potential optimizations.
2024-03-11T22:51:08.476806760+08:00 - 文章标题：The Git source code audit, viewed as a Rust programmer
2024-03-11T22:51:08.476828410+08:00 - 文章内容：On January 17th 2023, X41 and Gitlab published a report of the source code audit they performed on Git (funded by the OSTIF foundation).<br><br>This post is based on the (great) report available here and aims to investigate how Rust mitigates some of the vulnerabilities shown in this report, but also to put some light on what it doesn’t mitigate by itself, and how a programmer can address these issues using good practices.
2024-03-11T22:51:08.476848565+08:00 - 文章标题：Tauri vs Iced vs egui: Rust GUI framework performance comparison
2024-03-11T22:51:08.476869578+08:00 - 文章内容：Recently I found myself in need of doing GUI with Rust, so I researched and experimented a bit. In this post, I want to share the data I collected, as it might help others. I will mostly compare Tauri, Iced and egui as those seem to be popular choices. I spent quite a bit of time performing tests to assess the speed/performance of these libraries, as a snappy UI experience is something I really value.
2024-03-11T22:51:08.476895829+08:00 - 文章标题：Rustler - Using Rust crates in Elixir
2024-03-11T22:51:08.476915490+08:00 - 文章内容：In this blog post, I will show you how easily you can build and use small Rust programs inside Elixir using Rustler.
2024-03-11T22:51:08.476935247+08:00 - 文章标题：Speeding up Rust semver-checking by over 2000x
2024-03-11T22:51:08.476955349+08:00 - 文章内容：This post describes work in progress: how cargo-semver-checks will benefit from the upcoming query optimization API in the Trustfall query engine. Read on to learn how a modern linter works under the hood, and how ideas from the world of databases can improve its performance.
2024-03-11T22:51:08.476975063+08:00 - 文章标题：Generate gem skeleton with Rust extension
2024-03-11T22:51:08.476996878+08:00 - 文章内容：Do you think dynamically typed interpreted Ruby language and statically typed compiled Rust language could be friends? Yes, they can! And actually, they are!<br><br>Officially it all started when YJIT was ported to Rust and Ruby codebase has officially onboarded Rust code. This friendship matured when RubyGems 3.3.11 (with a new Add cargo builder for rust extensions feature) was released capable of compiling Rust-based extensions during gem installation process (similar to well-known C-based gem extensions like nokogiri, pg or puma).<br><br>And now, with Bundler 2.4, bundle gem skeleton generator can provide all the glue you need to start using Rust inside your gems thanks to the new --ext=rust parameter!
2024-03-11T22:51:08.477016448+08:00 - 文章标题：Exploring Rust for Vulkan drivers, part 1
2024-03-11T22:51:08.477039939+08:00 - 文章内容：Over the course of the last decade, Rust has emerged as a new programming language for writing safe low-level code. I've been contemplating the idea of using it in Mesa for a few years now. Specifically, I'd like to know if it's practical to write a Vulkan driver mostly in Rust and if doing so would bring enough benefit to be worth the effort. This blog post is intended to be the first in a series exploring the area of using Rust to write Mesa Vulkan drivers.
2024-03-11T22:51:08.477060107+08:00 - 文章标题：The size of Rust Futures
2024-03-11T22:51:08.477080698+08:00 - 文章内容：I have recently discovered that Rust Futures, or rather, async fn calls can lead to surprising performance problems if they are nested too deeply.<br><br>Apart from highlighting the source of the problem in great depth, I also want to propose some workarounds for this specific issue.
2024-03-11T22:51:08.477100529+08:00 - 文章标题：Testing SIMD instructions on ARM with Rust on Android
2024-03-11T22:51:08.477123721+08:00 - 文章内容：This blog post is the last one of a series exploring SIMD support with Rust on Android. In the previous two posts, I introduced how to compile Rust libraries for Android and detect SIMD instructions supported by the CPU at runtime.<br><br>Today, we’ll see how to effectively use the SIMD instructions themselves, and get the most performance out of them. After an introduction on running Rust benchmarks (and unit tests) on Android devices, we’ll measure the performance in various scenarios offered by Rust, and see that the overhead of CPU feature detection can be non-trivial. I’ll then describe various ways to reduce this overhead.<br><br>Lastly, I’ll present updated benchmarks on ARM of Horcrux, my Rust implementation of Shamir’s Secret Sharing, and see how they compare to Intel.
2024-03-11T22:51:08.477145805+08:00 - 文章标题：Running Zola on WebAssembly
2024-03-11T22:51:08.477169542+08:00 - 文章内容：Even though Zola is written in Rust, it still relies on glibc, the GNU C Library. The update to v15 changed how the Zola binary for Linux was built, causing it to rely on newer versions of glibc. After a few emails with Vercel's support team, I confirmed that the build environment used by Vercel only had access to glibc 2.26, hence the errors when attempting to use the latest version of Zola.<br><br>Now, at this point, I had a few options if I wanted to use the latest version of Zola to build my site, but the easiest was probably setting up my Vercel project to download a custom-built version of Zola that was built against a lower version of glibc. While it certainly would have worked, and wouldn't have been too much effort, it also wasn't a fun or interesting solution.<br><br>Instead, I decided to see if I could compile Zola to WASM targeting the WebAssembly System Interface (WASI) and run it as a standard npm package.<br><br>Spoiler: I could!
2024-03-11T22:51:08.477194153+08:00 - 文章标题：Supporting the Use of Rust in the Chromium Project
2024-03-11T22:51:08.477215980+08:00 - 文章内容：We are pleased to announce that moving forward, the Chromium project is going to support the use of third-party Rust libraries from C++ in Chromium. To do so, we are now actively pursuing adding a production Rust toolchain to our build system. This will enable us to include Rust code in the Chrome binary within the next year. We’re starting slow and setting clear expectations on what libraries we will consider once we’re ready.<br><br>In this blog post, we will discuss how we arrived at the decision to support third-party Rust libraries at this time, and not broader usage of Rust in Chromium.
2024-03-11T22:51:08.477236025+08:00 - 文章标题：gccrs in 2022
2024-03-11T22:51:08.477259470+08:00 - 文章内容：The most notable event occuring this year was the merging of gccrs into GCC. Our compiler will now be available in the next GCC release, GCC 13.1, due in April 2023. While the compiler is not yet complete, or even in a usable state, we hope you’ll find joy in experimenting with it, hacking on it, and contributing, either via reporting issues or submitting code.<br><br>We have attended multiple events, and were delighted to meet so many of you! We are looking forward to doing the same in 2023. Later in this report, you’ll find links to recordings of the talks we gave this year.<br><br>Even further in the report, you’ll find various little statistics around the compiler’s development: Number of bugs, ongoing work, number of tests… We don’t see the amount of bugs almost doubling since 2021 as a bad thing: quite the opposite actually, as it means the compiler is being tested more and more thoroughly, and used by more and more brave people willing to raise these issues. For that, thank you!
2024-03-11T22:51:08.477281702+08:00 - 文章标题：What Every Rust Developer Should Know About Macro Support in IDEs
2024-03-11T22:51:08.477303586+08:00 - 文章内容：We, the IntelliJ Rust plugin team, are now partially enabling support for procedural macros, specifically enabling function-like and derive procedural macro expansion by default while hiding support for attribute procedural macros behind the org.rust.macros.proc.attr experimental feature flag. While we mostly refer to the IntelliJ Rust plugin here, the same things apply to your favorite editor powered by rust-analyzer. In fact, we are very similar regarding macro support. Even more importantly, we face the same problems.<br><br>Let’s discuss several fundamental ideas regarding macros and their support in IDEs, including main ideas and approaches, good and bad parts, implementation details, and problems.
2024-03-11T22:51:08.477323709+08:00 - 文章标题：Is coding in Rust as bad as in C++?
2024-03-11T22:51:08.477344580+08:00 - 文章内容：C++ is notorious for its slow build times. “My code's compiling” is a meme in the programming world, and C++ keeps this joke alive.<br><br>I've heard the same thing about Rust: build times are a huge problem. But is it really a problem in Rust, or is this anti-Rust propaganda? How does it compare to C++'s build time problem?
2024-03-11T22:51:08.477364730+08:00 - 文章标题：Announcing KataOS and Sparrow
2024-03-11T22:51:08.477392601+08:00 - 文章内容：To begin collaborating with others, we've open sourced several components for our secure operating system, called KataOS, on GitHub, as well as partnered with Antmicro on their Renode simulator and related frameworks. As the foundation for this new operating system, we chose seL4 as the microkernel because it puts security front and center; it is mathematically proven secure, with guaranteed confidentiality, integrity, and availability. Through the seL4 CAmkES framework, we're also able to provide statically-defined and analyzable system components. KataOS provides a verifiably-secure platform that protects the user's privacy because it is logically impossible for applications to breach the kernel's hardware security protections and the system components are verifiably secure. KataOS is also implemented almost entirely in Rust, which provides a strong starting point for software security, since it eliminates entire classes of bugs, such as off-by-one errors and buffer overflows.
2024-03-11T22:51:08.477415262+08:00 - 文章标题：Rust 2023
2024-03-11T22:51:08.477437525+08:00 - 文章内容：The core team used to put out a yearly call for blog posts. My colleage Nick published their "Rust in 2023" post last week, and encouraged others to do the same. I like the idea of taking a moment to reflect on larger topics, and so well, why not write a post!
2024-03-11T22:51:08.477457136+08:00 - 文章标题：Ten Years of Ru...ewriting my website
2024-03-11T22:51:08.477477967+08:00 - 文章内容：December 21 is the anniversary of when I first heard about Rust way back in 2012. I used to write yearly posts about it; the last time I did was in 2018. That makes today ten years. I thought I’d have something big to say here, but… I just don’t.
2024-03-11T22:51:08.477497382+08:00 - 文章标题：Building a Rust-y Vim clutch with the Raspberry Pi 2040
2024-03-11T22:51:08.477518447+08:00 - 文章内容：Sadly my time working with a colleague had come to an end and I wanted to give him a token of my appreciation. In these days of hybrid working, I thought what better way to show my appreciation to an infrequent Vim user, than to add another rarely useful peripheral to their bag!
2024-03-11T22:51:08.477539249+08:00 - 文章标题：This Month in Rust OSDev: November 2022
2024-03-11T22:51:08.477559676+08:00 - 文章内容：Welcome to a new issue of "This Month in Rust OSDev". In these posts, we give a regular overview of notable changes in the Rust operating system development ecosystem.<br><br>We have some new sections this month, we hope you like the content!
2024-03-11T22:51:08.477579720+08:00 - 文章标题：Helix Release 22.12 Highlights
2024-03-11T22:51:08.477600592+08:00 - 文章内容：Helix is a modal text editor with built-in support for multiple selections, Language Server Protocol (LSP), tree-sitter, and experimental support for Debug Adapter Protocol (DAP).<br><br>Today we cut the 22.12 release. This release is big and featureful and saw contributions from 99 contributors. Thank you all! 🎊
2024-03-11T22:51:08.477620419+08:00 - 文章标题：KernelCI now testing Linux Rust code
2024-03-11T22:51:08.477641134+08:00 - 文章内容：During the 2022 Linux Maintainers Summit in Dublin, Linus Torvalds asked CI systems to start testing the new Rust infrastructure. So, with that in mind, we are excited to announce that as of today, Rust testing has now been added to KernelCI!
2024-03-11T22:51:08.477660842+08:00 - 文章标题：Launching the 2022 State of Rust Survey
2024-03-11T22:51:08.477682398+08:00 - 文章内容：It's that time again! Time for us to take a look at who the Rust community is composed of, how the Rust project is doing, and how we can improve the Rust programming experience. The Rust Survey working group is pleased to announce our 2022 State of Rust Survey! Whether or not you use Rust today, we want to know your opinions. Your responses will help the project understand its strengths and weaknesses, and establish development priorities for the future.
2024-03-11T22:51:08.477708250+08:00 - 文章标题：Memory Safe Languages in Android 13
2024-03-11T22:51:08.477729311+08:00 - 文章内容：For more than a decade, memory safety vulnerabilities have consistently represented more than 65% of vulnerabilities across products, and across the industry. On Android, we’re now seeing something different - a significant drop in memory safety vulnerabilities and an associated drop in the severity of our vulnerabilities. This drop coincides with a shift in programming language usage away from memory unsafe languages. Android 13 is the first Android release where a majority of new code added to the release is in a memory safe language.
2024-03-11T22:51:08.477749583+08:00 - 文章标题：Out-of-bounds memory access bug
2024-03-11T22:51:08.477769376+08:00 - 文章内容：Recent fuzz testing has uncovered a bug in capnproto-rust and capnproto-c++ that allows out-of-bounds memory to be accessed in certain situations.
2024-03-11T22:51:08.477789835+08:00 - 文章标题：Fedora 38 Looks To Shift RPM To Sequoia, A Rust-Based OpenPGP Parser
2024-03-11T22:51:08.477809865+08:00 - 文章内容：For the past two decades the RPM package manager software has relied upon its own OpenPGP parser implementation for dealing with package keys and signatures. With Fedora 38 they plan to have their RPM package shifted to use the Rust-written "Sequoia" parser instead.
2024-03-11T22:51:08.477832014+08:00 - 文章标题：How much does Rust's bounds checking actually cost?
2024-03-11T22:51:08.477852529+08:00 - 文章内容：Rust prevents out-of-bounds memory accesses and buffer overruns via runtime bounds checks - what’s the cost of those bounds checks for a real-world, production application?
2024-03-11T22:51:08.477872810+08:00 - 文章标题：Safely writing code that isn't thread-safe
2024-03-11T22:51:08.477893742+08:00 - 文章内容：One of the nice things about the Rust programming language is that it makes it easier to write correct concurrent (e.g. threaded) programs – to the degree that Rust’s slogan has been, at times, “fearless concurrency.”<br><br>But I’d like to tell you about the other side of Rust, which I think is under-appreciated. Rust enables you to write programs that are not concurrent. This feature is missing from most other languages, and is a source of much complexity and bugs.
2024-03-11T22:51:08.477914204+08:00 - 文章标题：Rust developers can now generate consistent type schema with Typeshare
2024-03-11T22:51:08.477935828+08:00 - 文章内容：Today, 1Password is making Typeshare publicly available as an open-source project to help Rust developers generate consistent type schema across multiple languages.<br><br>Decoupling the display code from our business logic gives us cross-platform consistency while also letting 1Password look great on any device. But the frontends are written in a different language, so we use a foreign function interface to communicate with the frontends.<br><br>But we needed to ensure the data we gave to the frontend was understood correctly - if the data types between the languages weren’t in sync, it would result in a host of problems. Typeshare was the solution, and today it helps our backend developers rapidly develop new features and fixes without fear of breaking consistency with our display code.
2024-03-11T22:51:08.477956139+08:00 - 文章标题：Redox OS 0.8.0
2024-03-11T22:51:08.477976925+08:00 - 文章内容：We have a lot to show since the 0.7.0 release! This release, care has been taken to ensure real hardware is working, i686 support has been added, features like audio and preliminary multi-display support have been enabled, and the boot and install infrastructure has been simplified and made more robust. I highly recommend skimming through the changes listed below before jumping into the images, if you want more details.
2024-03-11T22:51:08.477997402+08:00 - 文章标题：Flux: Refinement Types for Rust
2024-03-11T22:51:08.478018937+08:00 - 文章内容：Types bring order to code. For example, if a variable i:usize then we know i is a number that can be used to index a vector. Similarly, if v:vec<&str> then we can be sure that v is a collection of strings which may be indexed but of course, not used as an index. However, by itself usize doesn’t tell us how big or small the number and hence the programmer must still rely on their own wits, a lot of tests, and a dash of optimism, to ensure that all the different bits fit properly at run-time.<br><br>Refinements are a promising new way to extend type checkers with logical constraints that specify additional correctness requirements that can be verified by the compiler, thereby entirely eliminating various classes of run-time problems.<br><br>We’re excited to introduce Flux, a refinement type checker plugin that brings this technology to Rust.
2024-03-11T22:51:08.478043784+08:00 - 文章标题：The carcinization of Go programs
2024-03-11T22:51:08.478064629+08:00 - 文章内容：What if I told you there was a way that we could ship one binary from Rust, have that work on every platform Go supports, and not have to modify the build process beyond a simple go build? Imagine how much easier that would be. It's easy to imagine that such a thing would let users not even know that Rust was involved at all, even if they consume a package or program that uses it.<br><br>I've done this with a package I call mastosan and here's why it exists as well as how I made it.
2024-03-11T22:51:08.478085152+08:00 - 文章标题：From AST to bytecode execution in EndBASIC
2024-03-11T22:51:08.478108707+08:00 - 文章内容：Since its inception two years ago, the EndBASIC interpreter has been using an AST-based execution
<br>engine. And during all this time, people have mocked the language for not allowing 10 GOTO 10.
<br>Well, fear not: the upcoming 0.10 release has full support for GOTO and GOSUB, features that
<br>were made possible by moving to a bytecode-based interpreter. Let’s take a peek at what the
<br>problems were and how I addressed them.
2024-03-11T22:51:08.478129127+08:00 - 文章标题：A first look at Rust in the 6.1 kernel
2024-03-11T22:51:08.478150912+08:00 - 文章内容：There have been a lot of significant changes merged into the mainline for the 6.1 release, but one of the changes that has received the most attention will also have the least short-term effect for users of the kernel: the introduction of support for the Rust programming language. No system with a production 6.1 kernel will be running any Rust code, but this change does give kernel developers a chance to play with the language in the kernel context and get a sense for how Rust development feels. Perhaps the most likely conclusion for most developers, though, will be that there isn't yet enough Rust in the kernel to do much of anything interesting.
2024-03-11T22:51:08.478171143+08:00 - 文章标题：Generic associated types to be stable in Rust 1.65
2024-03-11T22:51:08.478192686+08:00 - 文章内容：As of Rust 1.65, which is set to release on November 3rd, generic associated types (GATs) will be stable — over six and a half years after the original RFC was opened. This is truly a monumental achievement; however, as with a few of the other monumental features of Rust, like async or const generics, there are limitations in the initial stabilization that we plan to remove in the future. <br><br>The goal of this post is not to teach about GATs, but rather to briefly introduce them to any readers that might not know what they are and to enumerate a few of the limitations in initial stabilization that users are most likely to run into.
2024-03-11T22:51:08.478212661+08:00 - 文章标题：Evaluating Build Scripts in the IntelliJ Rust Plugin
2024-03-11T22:51:08.478232926+08:00 - 文章内容：Build scripts is a Cargo feature that allows executing any code prior to building a package. We implemented support for build scripts evaluation in the IntelliJ Rust plugin a long time ago, but up until now, we hid it under the org.rust.cargo.evaluate.build.scripts experimental feature. As we are now enabling this feature by default, we’ve decided to explain what it means for our users.
2024-03-11T22:51:08.478257527+08:00 - 文章标题：Progress report on rustc_codegen_cranelift (Okt 2022)
2024-03-11T22:51:08.478278140+08:00 - 文章内容：There has a ton of progress since the last progress report. There have been 303 commits since then. @afonso360 has been contributing a ton to improve Windows and AArch64 support. (Thanks a lot for that!)
2024-03-11T22:51:08.478299317+08:00 - 文章标题：Rust on Espressif chips - 17-10-2022
2024-03-11T22:51:08.478319150+08:00 - 文章内容：This is the next quarterly update of esp-rs effort, detailing the progress over Q3 2022.
2024-03-11T22:51:08.478339540+08:00 - 文章标题：A deeper look into the GCC Rust front-end
2024-03-11T22:51:08.478360702+08:00 - 文章内容：Philip Herron and Arthur Cohen presented an update on the "gccrs" GCC front end for the Rust language at the 2022 Kangrejos conference. Less than two weeks later — and joined by David Faust — they did it again at the 2022 GNU Tools Cauldron. This time, though, they were talking to GCC developers and refocused their presentation accordingly; the result was an interesting look into the challenges of implementing a compiler for Rust.
2024-03-11T22:51:08.478380847+08:00 - 文章标题：RAII: Compile-Time Memory Management in C++ and Rust
2024-03-11T22:51:08.478402835+08:00 - 文章内容：One of the biggest such features – perhaps the biggest one – is RAII, C++’s and now Rust’s (somewhat oddly-named) scope-based feature for resource management. And while RAII is for managing all kinds of resources, its biggest use case is as part of a compile-time alternative to run-time garbage collection and reference counting.<br><br>I will start by talking about the problem that RAII was originally designed to solve. Then, I will re-hash the basics of how RAII works, and work through memory usage patterns where RAII needs to be combined with these other features, especially the borrow checker. Finally, I will discuss the downsides of these memory management techniques, especially performance implications and handling of cyclic data structures.
2024-03-11T22:51:08.478423100+08:00 - 文章标题：Welcoming Sage Griffin: Rust Foundation Communities Advocate
2024-03-11T22:51:08.478443472+08:00 - 文章内容：The Rust Foundation could not adequately support the Rust programming language and the maintainers developing the project without a strong focus on community health and collaboration. For this reason, we’ve been seeking to fill a significant role at the Foundation for several months. <br><br>Today, we’re thrilled to share that Sage Griffin has joined the Rust Foundation as our first Communities Advocate. Sage uses they/them pronouns.
2024-03-11T22:51:08.478463709+08:00 - 文章标题：retrowin32, a win32 emulator
2024-03-11T22:51:08.478485553+08:00 - 文章内容：My first post-Figma hobby project is a win32 emulator I've called retrowin32. It is now barely capable of executing a few unmodified Windows exe files in a browser (see the site for some links).<br><br>There are other projects to run old Windows programs. WoW64 is the name of the system within 64-bit Windows that makes old 32-bit Windows programs run. Wine shims the Windows API onto your host system — see the great How Wine works for a deep dive on what that means. And system emulator projects like qemu emulate a full x86 machine such that you can install Windows onto them. But Wow64 requires running 64-bit Windows, Wine requires x86 hardware, and qemu requires installing the full Windows OS into the emulator to run a Windows program.<br><br>In contrast, my toy emulates an x86 and enough of the Windows API to take a plain exe file and run it directly in my browser.
2024-03-11T22:51:08.478505737+08:00 - 文章标题：A Memory Safe Implementation of the Network Time Protocol
2024-03-11T22:51:08.478526638+08:00 - 文章内容：For the last few months we at Tweede golf have been working on implementing a Network Time Protocol (NTP) client and server in rust.<br><br>The project is a Prossimo initiative and is supported by their sponsors, Cisco and AWS. Our first short-term goal is to deploy our implementation at Let's Encrypt. The long-term goal is to develop an alternative fully-featured NTP implementation that can be widely used.<br><br>In this blog post we'll talk about the process of implementing a new open-source version of the protocol in Rust, why an alternative NTP implementation is important, and our experiences along the way.
2024-03-11T22:51:08.478549713+08:00 - 文章标题：Hard Mode Rust
2024-03-11T22:51:08.478570015+08:00 - 文章内容：This post is a case study of writing a Rust application using only minimal, artificially constrained API (eg, no dynamic memory allocation). It assumes a fair bit of familiarity with the language.
2024-03-11T22:51:08.478590105+08:00 - 文章标题：An Invitation to Rust Maintainers
2024-03-11T22:51:08.478610907+08:00 - 文章内容：A few weeks ago, we at Determinate Systems released Riff, a tool that uses Nix to automatically provide external dependencies for Rust projects. By that we mean dependencies written in other languages—like OpenSSL or the Protobuf compiler—that by definition can’t be installed by Cargo. The developer experience of Rust is widely regarded as one of the best in the business—and we concur!—but external dependencies have been a thorn in the side of the Rust community from the get-go. And so we’re excited to provide a full-fledged solution to this problem in the form of Riff.
2024-03-11T22:51:08.478631079+08:00 - 文章标题：Single Pass Recursion in Rust
2024-03-11T22:51:08.478652513+08:00 - 文章内容：This is the third post in a three-post series. In the first post we developed a stack-safe, ergonomic, and concise method for working with recursive data structures (using a simple expression language as an example). In the second post we made it fully generic, providing a set of generic tools for expanding and collapsing any recursive data structure in Rust.<br><br>In this post we will see how to combine these two things - expanding a structure and collapsing it at the same time, performing both operations in a single pass. In the process, we will gain the ability to write arbitrary recursive functions over traditional boxed-pointer recursive structures (instead of the novel `RecursiveTree` type introduced in my previous post) while retaining stack safety.
2024-03-11T22:51:08.478672590+08:00 - 文章标题：zerocal - A Serverless Calendar App in Rust Running on shuttle.rs
2024-03-11T22:51:08.478692787+08:00 - 文章内容：Like any reasonable person, I wanted a way to create calendar entries from my terminal.<br><br>That's how I pitched the idea to my buddies last time. The answer was: "I don’t know, sounds like a solution in search of a problem." But you know what they say: Never ask a starfish for directions.<br><br>That night I went home and built a website that would create a calendar entry from GET parameters.
2024-03-11T22:51:08.478712440+08:00 - 文章标题：Implementing truly safe semaphores in rust, and the costs we pay for safety
2024-03-11T22:51:08.478733912+08:00 - 文章内容：A couple of weeks ago, we released an update to rsevents, our crate that contains a rusty cross-platform equivalent to WIN32 events for signaling between threads and writing your own synchronization primitives, and rsevents-extra a companion crate that provides a few handy synchronization types built on top of the manual- and auto-reset events from the rsevents crate. Aside from the usual awesome helpings of performance improvements, ergonomics enhancements, and more, this latest version of rsevents-extra includes a Semaphore synchronization primitive – something that the rust standard library surprisingly lacks… but not without good reason.
2024-03-11T22:51:08.478754110+08:00 - 文章标题：How (and why) nextest uses tokio, part 1
2024-03-11T22:51:08.478774067+08:00 - 文章内容：Nextest is faster than cargo test for most Rust projects, and provides a number of extra features, such as test retries, reusing builds, and partitioning (sharding) test runs. To power these features, nextest uses Tokio, the leading Rust async runtime for writing network applications.
2024-03-11T22:51:08.478796888+08:00 - 文章标题：Rewriting the Modern Web in Rust
2024-03-11T22:51:08.478817875+08:00 - 文章内容：> Building a modern web app with Rust, Bazel, Yew and Axum.<br><br>Earlier this year I rewrote my website with Next.js, React, tsx, and mdx. Having tried full-stack rust in the past, I didn’t think its developer experience was on par with the Next.js stack. Well times have changed, and I wanted to see just how far I could push rust to feel like Next.js. So I did what any developer would do and rewrote my personal site… again.
2024-03-11T22:51:08.478838224+08:00 - 文章标题：Announcing ICU4X 1.0
2024-03-11T22:51:08.478859814+08:00 - 文章内容：Hello! Ndeewo! Molweni! Салам! Across the world, people are coming online with smartphones, smart watches, and other small, low-resource devices. The technology industry needs an internationalization solution for these environments that scales to dozens of programming languages and thousands of human languages.<br><br>Enter ICU4X. As the name suggests, ICU4X is an offshoot of the industry-standard i18n library published by the Unicode Consortium, ICU (International Components for Unicode), which is embedded in every major device and operating system.
2024-03-11T22:51:08.478879573+08:00 - 文章标题：Announcing the Rust Style Team
2024-03-11T22:51:08.478901548+08:00 - 文章内容：The standard Rust style resulted from development and discussion within the Rust style team, between 2016 and 2018. After publishing the style guide, the Rust style team concluded its active work, by design.<br><br>However, as the Rust language develops, we have a regular need for improvements to the style guide, such as to support new language constructs. To solve both of these problems, [RFC 3309](https://rust-lang.github.io/rfcs/3309-style-team.html) has revived the Rust style team, with three goals:<br><br>* Making determinations about styling for new Rust constructs
<br>* Evolving the existing Rust style
<br>* Defining mechanisms to evolve the Rust style while taking backwards compatibility into account
2024-03-11T22:51:08.478921891+08:00 - 文章标题：cargo careful: run your Rust code with extra careful debug checking
2024-03-11T22:51:08.478943604+08:00 - 文章内容：Did you know that the standard library is full of useful checks that users never get to see? There are plenty of debug assertions in the standard library that will do things like check that char::from_u32_unchecked is called on a valid char, that CStr::from_bytes_with_nul_unchecked does not have internal nul bytes, or that pointer functions such as copy or copy_nonoverlapping are called on suitably aligned non-null (and non-overlapping) pointers. However, the regular standard library that is distributed by rustup is compiled without debug assertions, so there is no easy way for users to benefit from all this extra checking.
2024-03-11T22:51:08.478963614+08:00 - 文章标题：Futures Concurrency IV: Join Ergonomics
2024-03-11T22:51:08.478983255+08:00 - 文章内容：In this post I want to show some of the ergonomics improvements IntoFuture might enable, inspired by Swift's recent improvements in async/await ergonomics.
2024-03-11T22:51:08.479002942+08:00 - 文章标题：The perils of pinning
2024-03-11T22:51:08.479023591+08:00 - 文章内容：Parts of the Rust language may look familiar to C programmers, but the two languages differ in fundamental ways. One difference that turns out to be problematic for kernel programming is the stability of data in memory — or the lack thereof. A challenging session at the 2022 Kangrejos conference wrestled with ways to deal with objects that should not be moved behind the programmer's back.
2024-03-11T22:51:08.479043997+08:00 - 文章标题：A pair of Rust kernel modules
2024-03-11T22:51:08.479064850+08:00 - 文章内容：The idea of being able to write kernel code in the Rust language has a certain appeal, but it is hard to judge how well that would actually work in the absence of examples to look at. Those examples, especially for modules beyond the "hello world" level of complexity, have been somewhat scarce, but that is beginning to change. At the 2022 Kangrejos gathering in Oviedo, Spain, two developers presented the modules they have developed and some lessons that have been learned from this exercise.
2024-03-11T22:51:08.479091738+08:00 - 文章标题：Compiling Rust with GCC: an update
2024-03-11T22:51:08.479112428+08:00 - 文章内容：While the Rust language has appeal for kernel development, many developers are concerned by the fact that there is only one compiler available; there are many reasons why a second implementation would be desirable. At the 2022 Kangrejos gathering, three developers described projects to build Rust programs with GCC in two different ways. A fully featured, GCC-based Rust implementation is still going to take some time, but rapid progress is being made.
2024-03-11T22:51:08.479132378+08:00 - 文章标题：Rust for the Polyglot Programmer
2024-03-11T22:51:08.479152647+08:00 - 文章内容：There are many guides and introductions to Rust.<br><br>This one is something different: it is intended for the experienced programmer who already knows many other programming languages.<br><br>I try to be comprehensive enough to be a starting point for any area of Rust, but to avoid going into too much detail except where things are not as you might expect.
2024-03-11T22:51:08.479174123+08:00 - 文章标题：Adding Rust-Stable libstd Support for Xous
2024-03-11T22:51:08.479197600+08:00 - 文章内容：Embedded targets lack Rust’s libstd, which in turn means they lack the conveniences of structures such as Vec, HashMap, Mutex, and Box. I added support for my OS, Xous, to the Rust compiler’s stable channel without rebuilding the entire Rust ecosystem, thus enabling libstd support for an entirely new operating system. In this post I’ll show how it’s done. 
<br> 
<br>tl;dr: It is possible to add support for a new OS to the Rust compiler’s stable channel without rebuilding everything, enabling libstd support for entirely new operating systems.
2024-03-11T22:51:08.479218542+08:00 - 文章标题：Improvements for #[doc] attributes in Rust
2024-03-11T22:51:08.479238606+08:00 - 文章内容：Since Rust 1.54, we can now use function-like macros in attributes. It has a lot of advantages for the #[doc] attribute, let's check some of them!
2024-03-11T22:51:08.479259185+08:00 - 文章标题：The push for GATs stabilization
2024-03-11T22:51:08.479280595+08:00 - 文章内容：So, what does that mean? Well, all it really means is that when you use this feature on nightly, you'll no longer get the "generic_associated_types is incomplete" warning. However, the real reason this is a big deal: we want to stabilize this feature. But we need your help. We need you to test this feature, to file issues for any bugs you find or for potential diagnostic improvements. Also, we'd love for you to just tell us about some interesting patterns that GATs enable over on Zulip!
2024-03-11T22:51:08.479300742+08:00 - 文章标题：Rust 2021 public testing period
2024-03-11T22:51:08.479320869+08:00 - 文章内容：We are happy to announce that the Rust 2021 edition is entering its public testing period. All of the planned features for the edition are now available on nightly builds along with migrations that should move your code from Rust 2018 to Rust 2021. If you'd like to learn more about the changes that are part of Rust 2021, check out the nightly version of the Edition Guide.
2024-03-11T22:51:08.479340532+08:00 - 文章标题：Rust in the Android platform
2024-03-11T22:51:08.479361067+08:00 - 文章内容：In addition to ongoing and upcoming efforts to improve detection of memory bugs, we are ramping up efforts to prevent them in the first place. Memory-safe languages are the most cost-effective means for preventing memory bugs. In addition to memory-safe languages like Kotlin and Java, we’re excited to announce that the Android Open Source Project (AOSP) now supports the Rust programming language for developing the OS itself.
2024-03-11T22:51:08.479385099+08:00 - 文章标题：Building a shared vision for Async Rust
2024-03-11T22:51:08.479406616+08:00 - 文章内容：The Async Foundations Working Group believes Rust can become one of the most popular choices for building distributed systems, ranging from embedded devices to foundational cloud services. Whatever they're using it for, we want all developers to love using Async Rust. For that to happen, we need to move Async Rust beyond the "MVP" state it's in today and make it accessible to everyone.<br><br>We are launching a collaborative effort to build a shared vision document for Async Rust. Our goal is to engage the entire community in a collective act of the imagination: how can we make the end-to-end experience of using Async I/O not only a pragmatic choice, but a joyful one?
2024-03-11T22:51:08.479427177+08:00 - 文章标题：Ferrocene Part 3: The Road
2024-03-11T22:51:08.479447631+08:00 - 文章内容：Ferrocene is an effort led by Ferrous Systems and its newly formed subsidiary Critical Section GmbH to qualify the Rust Language and Compiler for use in the safety-critical domain. This is the third post in a series detailing our plans and actions around this effort, addressing topics discussed in The Pitch and The Plan. Ferrocene's draft name was "Sealed Rust."
2024-03-11T22:51:08.479467582+08:00 - 文章标题：Rust & the case of the disappearing stack frames
2024-03-11T22:51:08.479488951+08:00 - 文章内容：The requirements of our current charter, and the RFC creating the group, are effectively fulfilled by the specification of "C unwind", so one option is to simply wind down the project group. While drafting the "C unwind" RFC, however, we discovered that the existing guarantees around longjmp and similar functions could be improved. Although this is not strictly related to unwinding1, they are closesly related: they are both "non-local" control-flow mechanisms that prevent functions from returning normally. Because one of the goals of the Rust project is for Rust to interoperate with existing C-like languages, and these control-flow mechanisms are widely used in practice, we believe that Rust must have some level of support for them.
2024-03-11T22:51:08.479509391+08:00 - 文章标题：Rust in Production: 1Password
2024-03-11T22:51:08.479530299+08:00 - 文章内容：To learn why this language is favored so much between developers, we have started a new series on Rust in production. In it, we’ll interview people that have used Rust for significant projects: apps, services, startup MVPs, and others.<br><br>For the first installment of the series, we interview Michael Fey, VP of Engineering at 1Password. Read further to find out why they chose Rust for their product, the benefits of Rust for security-centered applications, and what cool libraries you should look into if you’re developing something similar in Rust.
2024-03-11T22:51:08.479550656+08:00 - 文章标题：Rustdoc performance improvements
2024-03-11T22:51:08.479574174+08:00 - 文章内容：Hi everyone! @GuillaumeGomez recently tweeted about the rustdoc performance improvements and suggested that we write a blog post about it: 
<br> 
<br>> The performance comparison between @rustlang rustdoc now and rustdoc 4 months ago are crazy! The rustdoc cleanup going on (we're still far from done!) is having a huge positive impact! Can't wait to see how much better the results will be.  Maybe I should write a blog post? pic.twitter.com/XapdmdZ1IZ — Guillaume Gomez (@imperioworld_) January 13, 2021
<br>   
<br>The tweet received a lot of comments approving the blog post idea so here we go!
2024-03-11T22:51:08.479594591+08:00 - 文章标题：Announcing Rust 1.49.0
2024-03-11T22:51:08.479614422+08:00 - 文章内容：The Rust team is happy to announce a new version of Rust, 1.49.0. For this release, we have some new targets and an improvement to the test framework.
2024-03-11T22:51:08.479637764+08:00 - 文章标题：Sequoia PGP v1.0 Released: The Seedling's a Sapling
2024-03-11T22:51:08.479658549+08:00 - 文章内容：Version 1.0. It’s here. After three and a half years of development, we are happy to announce the release of version 1.0 of Sequoia!<br><br>The release includes the low-level crate sequoia-openpgp, and a program to verify detached signatures geared towards software distribution systems called sqv.
2024-03-11T22:51:08.479678838+08:00 - 文章标题：Launching the Lock Poisoning Survey
2024-03-11T22:51:08.479699971+08:00 - 文章内容：The Libs team is looking at how we can improve the std::sync module, by potentially splitting it up into new modules and making some changes to APIs along the way.
<br>One of those API changes we're looking at is non-poisoning implementations of Mutex and RwLock.<br><br>To find the best path forward we're conducting a survey to get a clearer picture of how the standard locks are used out in the wild.
2024-03-11T22:51:08.479720253+08:00 - 文章标题：Announcing Minus, a cross-platform pager
2024-03-11T22:51:08.479740039+08:00 - 文章内容：In this blog post, I want to talk about Minus, which is a cross-platform, asynchronous terminal paging library written in Rust.
2024-03-11T22:51:08.479759923+08:00 - 文章标题：lib-ruby-parser: A Ruby Parser Written in Rust
2024-03-11T22:51:08.479780838+08:00 - 文章内容：So, I’m ready to announce that I’ve finished working on a new Ruby parser. It’s called lib-ruby-parser. Key features:<br><br>1. It’s fast.
<br>2. It has a beautiful interface.
<br>3. It’s precise.
<br>4. It doesn’t depend on Ruby.
2024-03-11T22:51:08.479801191+08:00 - 文章标题：Announcing Rustup 1.23.0
2024-03-11T22:51:08.479821862+08:00 - 文章内容：Rustup is now natively available for the new Apple M1 devices, allowing you to install it on the new Macs the same way you'd install it on other platforms!<br><br>Starting from this release of rustup (1.23.0) you can also install a minor version without specifying the patch version, like 1.48 or 1.45.
2024-03-11T22:51:08.479842365+08:00 - 文章标题：What the Error Handling Project Group is Working On
2024-03-11T22:51:08.479863857+08:00 - 文章内容：The Rust community takes its error handling seriously. There’s already a strong culture in place for emphasizing helpful error handling and reporting, with multiple libraries each offering their own take (see Jane Lusby’s thorough survey of Rust error handling/reporting libraries).<br><br>But there’s still room for improvement. The main focus of the group is carrying on error handling-related work that was in progress before the group's formation. To that end, we're working on systematically addressing error handling-related issues, as well as eliminating blockers that are holding up stalled RFCs.
2024-03-11T22:51:08.479883976+08:00 - 文章标题：Announcing Rust 1.48.0
2024-03-11T22:51:08.479903975+08:00 - 文章内容：The Rust team is happy to announce a new version of Rust, 1.48.0. The star of this release is Rustdoc, with a few changes to make writing
<br>documentation even easier!
2024-03-11T22:51:08.479923999+08:00 - 文章标题：Exploring PGO for the Rust compiler
2024-03-11T22:51:08.479945030+08:00 - 文章内容：For the last few months Mozilla has been using Profile-Guided Optimization (PGO) to build their own optimized version of Clang, leading to an up to 9% reduction of Firefox compile times on their build infrastructure. Would the same be possible for the Rust compiler, that is, could we apply profile-guided optimization to rustc itself in order to make it faster? This post explores exactly this question, detailing first the steps needed for generating a PGOed versions of rustc (in two flavors), and then taking a look at the resulting performance implications. But before that let's have a little reminder what PGO even is and how it works in general.
2024-03-11T22:51:08.479965353+08:00 - 文章标题：Introducing Scipio - a Thread-per-Core Crate for Rust & Linux
2024-03-11T22:51:08.479990289+08:00 - 文章内容：This article will explore the thread-per-core model with its advantages and challenges, and introduce Scipio (you can also find it on crates.io), our solution to this problem. Scipio allows Rust developers to write thread-per-core applications in an easy and manageable way.
2024-03-11T22:51:08.480009899+08:00 - 文章标题：Non-Generic Inner Functions
2024-03-11T22:51:08.480031198+08:00 - 文章内容：Steve Klabnik recently wrote about whether out parameters are idiomatic in Rust. The post ends by showing a snippet of code: a generic function, with a non-generic function inside of it which contains the actual implementation. Steve says this pattern may warrant its own post, so here is that post, where I’ll explain why this inner function is useful, discuss the trade-offs of doing it, and describe why this pattern will hopefully not be necessary in the future.
2024-03-11T22:51:08.480050715+08:00 - 文章标题：Rust after the honeymoon
2024-03-11T22:51:08.480071004+08:00 - 文章内容：Two years ago, I had a blog entry describing falling in love with Rust. Of course, a relationship with a technology is like any other relationship: as novelty and infatuation wears off, it can get on a longer term (and often more realistic and subdued) footing — or it can begin to fray. So well one might ask: how is Rust after the honeymoon?
2024-03-11T22:51:08.480091079+08:00 - 文章标题：Rust in curl with Hyper
2024-03-11T22:51:08.480110950+08:00 - 文章内容：tldr: work has started to make Hyper work as a backend in curl for HTTP.
2024-03-11T22:51:08.480130572+08:00 - 文章标题：Announcing Rust 1.47.0
2024-03-11T22:51:08.480151286+08:00 - 文章内容：This release contains no new language features, though it does add one long-awaited standard library feature. It is mostly quality of life improvements, library stabilizations and const-ifications, and toolchain improvements. See the detailed release notes to learn about other changes not covered by this post.
2024-03-11T22:51:08.480170958+08:00 - 文章标题：Rust + Raspberry Pi Tide Clock
2024-03-11T22:51:08.480201986+08:00 - 文章内容：In this part 1 of 2 posts, I share the process of a heartwarming maker project built on top of Raspberry Pi and Rust. It's more a story than a how-to guide, but provides an interesting chronology of problems encountered. In part 2 I'll be getting technical and discussing Rust in-depth.
2024-03-11T22:51:08.480224176+08:00 - 文章标题：Announcing the Portable SIMD Project Group
2024-03-11T22:51:08.480244441+08:00 - 文章内容：We're announcing the start of the Portable SIMD Project Group within the Libs team. This group is dedicated to making a portable SIMD API available to stable Rust users.
2024-03-11T22:51:08.480264616+08:00 - 文章标题：Porting EBU R128 audio loudness analysis from C to Rust
2024-03-11T22:51:08.480284628+08:00 - 文章内容：Over the last few weeks I ported the libebur128 C library to Rust, both with a proper Rust API as well as a 100% compatible C API.
2024-03-11T22:51:08.480304191+08:00 - 文章标题：Async Iteration Semantics
2024-03-11T22:51:08.480324530+08:00 - 文章内容：In a recent lang team meeting we discussed the upcoming Stream RFC. We covered both the steps required to land it, and the steps we'd want to take after that. One of the things we'd want eventually for streams is: "async iteration syntax". Just like for x in y works for Iterator, we'd want something similar to work for Stream.
2024-03-11T22:51:08.480344734+08:00 - 文章标题：Rust 2021 – Ethical Development
2024-03-11T22:51:08.480369190+08:00 - 文章内容：This is my Rust 2021 post. I believe that Rust has shown that “bending the curve” is
<br>both possible and fruitful in programming language design. We also have a strong set
<br>of values as a community, enshrined both in the Code of Conduct and the example of
<br>various high-profile rustaceans.<br><br>For 2021 I really couldn’t care less what features go into the next edition. Don’t
<br>get me wrong, I want the next edition to be awesome, but I believe this is table
<br>stakes by now. I want us to take on the harder problems.
2024-03-11T22:51:08.480393378+08:00 - 文章标题：Call for 2021 Roadmap Blogs Ending Soon
2024-03-11T22:51:08.480412833+08:00 - 文章内容：We will be closing the collection of blog posts on October 5th. As a reminder, we plan to close the survey on September 24th, later this week.
2024-03-11T22:51:08.480432855+08:00 - 文章标题：Low-Level Academy
2024-03-11T22:51:08.480452130+08:00 - 文章内容：I'm excited to launch Low-Level Academy, an explorable systems programming course that uses Rust and web assembly for interactive playgrounds and visualisation. It starts with network programming, but it will be expanded to more topics!
2024-03-11T22:51:08.480473043+08:00 - 文章标题：Throw Away Code
2024-03-11T22:51:08.480493160+08:00 - 文章内容：There’s an ongoing discussion about what makes Python better prototyping language than Rust (with Python being probably just the archetype of some scripted weakly-typed language). The thing is, I prefer doing my prototypes in Rust over Python. Apparently, I’m not the only one. So I wanted to share few things about what makes Rust viable for these kinds of throw-away coding sprints, at least for me.
2024-03-11T22:51:08.480512778+08:00 - 文章标题：TL;DR Rust
2024-03-11T22:51:08.480533102+08:00 - 文章内容：Recently I've been starting to use Rust more and more for larger and larger projects. As things have come up, I realized that I am missing a good reference for common things in Rust as compared to Go. This post contains a quick high-level overview of patterns in Rust and how they compare to patterns in Go. This will focus on code samples. This is no replacement for the Rust book, but should help you get spun up on the various patterns used in Rust code.
2024-03-11T22:51:08.480552729+08:00 - 文章标题：Rust 2021: Make it accessible
2024-03-11T22:51:08.480573346+08:00 - 文章内容：More than any one thing, at it’s core Rust provides a lot of value to it’s users. Programs written in Rust are free of entire classes of bugs thanks to rustc having your back. The core idea of borrowing and lifetimes providing memory safety without a GC is so powerful that it will eventually become mainstream. After a point, all new programs will be written in a language that is memory safe, whether that safety is provided by a GC, or by Rust, or a language that copies Rust’s features. It may take 10, 20 or 50 years, but we will get there. As an end user, that makes me happy.<br><br>Since the success of Rust or a Rust clone/copycat is guaranteed on a long enough timescale, the question becomes - how can we accelerate that?
2024-03-11T22:51:08.480593230+08:00 - 文章标题：Introducing auditable: audit Rust binaries for known bugs or vulnerabilities in production
2024-03-11T22:51:08.480613637+08:00 - 文章内容：Today I'm pleased to announce the initial release of auditable crate. It embeds the dependency tree into the compiled executable so you can check which crates exactly were used in the build. The primary motivation is to make it possible to answer the question "Do the Rust binaries we're actually running in production have any known vulnerabilities?" - and even enable third parties such as cloud providers to automatically do that for you.
2024-03-11T22:51:08.480645086+08:00 - end
